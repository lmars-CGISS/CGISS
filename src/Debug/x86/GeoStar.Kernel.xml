<?xml version="1.0"?>
<doc>
    <assembly>
        "GeoStar.Kernel"
    </assembly>
    <members>
        <member name="M:GeoStar.Kernel.RasterClass.get_MetadataDomain">
            <summary>
元数据类别
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_BandCount">
            <summary>
波段数量
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_Format">
            <summary>
编码格式
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_BlockHeight">
            <summary>
栅格的像素高
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_BlockWidth">
            <summary>
栅格的像素宽
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_Height">
            <summary>
栅格的像素高
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_Width">
            <summary>
栅格的像素宽
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.get_ExistsPyramid">
            <summary>
金字塔、缩略图数量
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterCursor.get_Y">
\brief 游标数据开始数据Y偏移
</member>
        <member name="M:GeoStar.Kernel.RasterCursor.get_X">
\brief 游标数据开始数据X偏移
</member>
        <member name="M:GeoStar.Kernel.RasterCursor.get_Height">
\brief 游标的数据高度
</member>
        <member name="M:GeoStar.Kernel.RasterCursor.get_Width">
\brief 游标的数据宽度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_RasterData">
\brief 获取栅格数据
</member>
        <member name="M:GeoStar.Kernel.Raster.get_OffsetY">
\brief 获取设置栅格数据高度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_OffsetX">
\brief 获取设置栅格数据高度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_Height">
\brief 获取设置栅格数据高度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_Width">
\brief 获取设置栅格数据宽度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_DataLength">
\brief 根据栅格类属性计算的栅格数据长度
</member>
        <member name="M:GeoStar.Kernel.Raster.get_DataPtr">
\brief 获取栅格数据指针
</member>
        <member name="M:GeoStar.Kernel.RasterBand.get_NoDataValue">
\brief 无效值
</member>
        <member name="M:GeoStar.Kernel.RasterBand.get_Maximum">
\brief 最大值
</member>
        <member name="M:GeoStar.Kernel.RasterBand.get_Minimum">
\brief 最小值
</member>
        <member name="M:GeoStar.Kernel.RasterBand.get_BandType">
            <summary>
栅格波段的用途或类型
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterBand.get_BandDataType">
            <summary>
栅格波段的数据类型。
</summary>
        </member>
        <member name="M:GeoStar.Kernel.Win32.GsWin32CanvasFactory.CreateHwndDevice(HWND__*)">
\brief 创建基于Windows窗台的Canvas
\details 由QT界面程序中调用
</member>
        <member name="M:GeoStar.Kernel.Win32.GsWin32CanvasFactory.CreatePaintDevice(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从窗体或者设备句柄创建绘制设备
</member>
        <member name="M:GeoStar.Kernel.Win32.GsWin32CanvasFactory.CreateImageCanvas(System.Int32,System.Int32)">
\brief 创建一个基于内存的QT画布
</member>
        <member name="T:GeoStar.Kernel.Win32.GsWin32CanvasFactory">
\brief Win32画布类厂
\details Win32画布类厂
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.SaveMap(GeoStar.Kernel.GsMap*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存到文件
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.ParserMap(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Kernel.GsMap*)">
\brief 解析地图定义文件为地图
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.ParserMap(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Kernel.GsMap*)">
\brief 解析地图定义文件为地图
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.ParserMap(GeoStar.Kernel.GsMap*)">
\brief 解析地图定义文件为地图
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.FilePath">
\brief 获取地图定义文件的路径
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.FilePath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置地图定义文件的路径
</member>
        <member name="M:GeoStar.Kernel.GsMapDefine.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从地图定义文件打开
</member>
        <member name="F:GeoStar.Kernel.GsMapDefine.m_strFile">
\brief 地图定义文件的文件路径
</member>
        <member name="T:GeoStar.Kernel.GsMapDefine">
\brief 地图定义文件读写类
</member>
        <member name="M:GeoStar.Kernel.GsFontCollection.Familiy(System.Int32)">
\brief 根据索引获取字体
</member>
        <member name="M:GeoStar.Kernel.GsFontCollection.Families">
\brief 获取所有的字体
</member>
        <member name="M:GeoStar.Kernel.GsFontCollection.FamilyCount">
\brief 枚举系统中有多少的字体
</member>
        <member name="T:GeoStar.Kernel.GsFontCollection">
\brief 字体集合 
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.FileName">
\brief 获取字体文件的路径
\details 从内存中创建的字体将没有路径
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.Style">
\brief 获取字体的式样
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.FontName">
\brief 获取字体的名称
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.Handle">
\brief 获取内部指针
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.MatchStyle(GeoStar.Kernel.GsFontStyle)">
\brief 式样和字体自身的式样匹配程度
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.ConvertToStyle(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将字符串的式样转换为枚举值
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.ConvertToStyle(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 将字符串的式样转换为枚举值
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.ConvertToString(GeoStar.Kernel.GsFontStyle)">
\brief 将枚举的值字符串类型的式样
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.CreateFontFamily(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存块构造
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.CreateFontFamily(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从字体文件构造
\param fontfile 字体文件,*.ttf,*.ttc,*.font等
</member>
        <member name="M:GeoStar.Kernel.GsFontFamily.CreateFontFamily(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Kernel.GsFontStyle)">
\brief 从字体名称和式样构造
</member>
        <member name="T:GeoStar.Kernel.GsFontFamily">
\brief 字体对象
</member>
        <member name="D:GeoStar.Kernel.GsPyramidLayerPtr">
\brief GsPyramidLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.GridColor">
\brief 获取网格线颜色
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.GridColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置网格线颜色
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.Pyramid">
\brief 设置金字塔对象
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.Pyramid(GeoStar.Kernel.GsPyramid*)">
\brief 设置金字塔对象
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的地理范围
\param pTargetSR 以该空间参考返回范围
</member>
        <member name="M:GeoStar.Kernel.GsPyramidLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 内部绘制入口
\details 子类通过覆盖此函数实现绘制。
</member>
        <member name="T:GeoStar.Kernel.GsPyramidLayer">
\brief GsPyramidLayer
\details 金字塔网格图层
</member>
        <member name="D:GeoStar.Kernel.GsVectorTileLayerPtr">
\brief GsVectorTileLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileLayer.ClearCache">
\brief 清空
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileLayer.Renderer(GeoStar.Kernel.GsVectorTileRenderer*)">
\brief 设置Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileLayer.Renderer">
\brief 获取Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 绘制方法入口
</member>
        <member name="T:GeoStar.Kernel.GsVectorTileLayer">
\brief GsVectorTileLayer
\details 矢量瓦片图层
</member>
        <member name="D:GeoStar.Kernel.GsSimpleVectorTileRendererPtr">
\brief GsSimpleVectorTileRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsSimpleVectorTileRenderer.DrawVectorTile(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 绘制瓦片类型矢量数据。
</member>
        <member name="M:GeoStar.Kernel.GsSimpleVectorTileRenderer.#ctor(System.Int32,System.Int32,GeoStar.Kernel.GsPyramid*)">
\brief 通过画布长，宽和金字塔构造Renderer
</member>
        <member name="M:GeoStar.Kernel.GsSimpleVectorTileRenderer.#ctor(GeoStar.Kernel.GsImageCanvas*,GeoStar.Kernel.GsPyramid*)">
\brief 通过画布和金字塔构造Renderer
</member>
        <member name="T:GeoStar.Kernel.GsSimpleVectorTileRenderer">
\brief 简单矢量瓦片Render
\details 无样式配置的简单矢量瓦片渲染器，创建随机颜色样式的符号矢量数据
</member>
        <member name="D:GeoStar.Kernel.GsStyledVectorTileRendererPtr">
\brief GsVectorStyleRenderer
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.DrawVectorTile(GeoStar.Kernel.GsTile*)">
\brief 绘制瓦片类型矢量数据。
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.DrawVectorTile(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 绘制瓦片类型矢量数据。
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.StyleTable">
\brief 获取样式表实例
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.StyleTable(GeoStar.Kernel.GsStyleTable*)">
\brief 设置样式表实例
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.#ctor(System.Int32,System.Int32,GeoStar.Kernel.GsPyramid*,GeoStar.Kernel.GsStyleTable*)">
\brief 通过画布长，宽和金字塔构造Renderer
</member>
        <member name="M:GeoStar.Kernel.GsStyledVectorTileRenderer.#ctor(GeoStar.Kernel.GsImageCanvas*,GeoStar.Kernel.GsPyramid*,GeoStar.Kernel.GsStyleTable*)">
\brief 通过画布和金字塔构造Renderer
</member>
        <member name="T:GeoStar.Kernel.GsStyledVectorTileRenderer">
\brief 基于样式表绘制矢量数据的Renderer
\details 样式表在本类中默认为json格式，但可扩展为其他多种格式。根据样式表创建符号，并用符号绘制传入的矢量数据，最终在内存中创建栅格图片。
</member>
        <member name="D:GeoStar.Kernel.GsVectorTileRendererPtr">
\brief GsVectorTileRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileRenderer.DrawVectorTile(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 绘制瓦片类型矢量数据。
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileRenderer.DrawVectorTile(GeoStar.Kernel.GsTile*)">
\brief 绘制瓦片类型矢量数据。
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileRenderer.ImageCanvas">
\brief 返回画布指针
</member>
        <member name="M:GeoStar.Kernel.GsVectorTileRenderer.ClearCanvas(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 清空画布。
</member>
        <member name="T:GeoStar.Kernel.GsVectorTileRenderer">
\brief 绘制矢量瓦片数据Renderer的抽象基类
</member>
        <member name="D:GeoStar.Kernel.GsStyleTableFactoryPtr">
\brief GsStyleTableFactoryPtr
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromMapDefine(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从地图定义文件构造样式表实例
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromXml(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 从xml构造样式表实例
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromJson(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 从json文件构造样式表实例
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromFolder(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件夹打开
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromZip(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从Zip包二进制文件打开
</member>
        <member name="M:GeoStar.Kernel.GsStyleTableFactory.OpenFromZip(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从Zip包二进制文件打开
</member>
        <member name="T:GeoStar.Kernel.GsStyleTableFactory">
\brief 样式表类厂
\details 通过载入各种格式的文件创建样式表对象实例。
</member>
        <member name="D:GeoStar.Kernel.GsStyleTablePtr">
\brief GsStyleTablePtr
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.SaveMapDefine(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存样式表为本地地图定义文件
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.SaveXml(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存样式表为本地xml文件
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.SaveJson(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存样式表为本地json文件
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.Version">
\brief 获得样式表版本
\returns 返回样式表版本
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.Name">
\brief 获得样式表名字
\returns 返回样式表名字
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.GenerateRasterGlyph(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single,System.Int32,System.Int32,GeoStar.Utility.GsByteBuffer*)">
\brief 指定范围内的字体产生为Protobuffer格式的栅格。
</member>
        <member name="M:GeoStar.Kernel.GsStyleTable.Content(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Utility.GsByteBuffer*)">
\brief 获取式样的内容
</member>
        <member name="T:GeoStar.Kernel.GsStyleTable">
\brief 样式表
</member>
        <member name="D:GeoStar.Kernel.GsFileImageCanvasPtr">
\brief GsFileImageCanvasPtr
</member>
        <member name="M:GeoStar.Kernel.GsFileImageCanvas.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32)">
\brief 根据文件名和宽高构建RGBA32位色的画布
</member>
        <member name="T:GeoStar.Kernel.GsFileImageCanvas">
\brief 基于文件的影像画布
\details 基于文件的影像画布可以实现超过内存存储限制的画布，画布通过和文件直接IO实现超大画布的绘制能力。性能上到低于基于内存的画布。 
</member>
        <member name="D:GeoStar.Kernel.GsMemoryImageCanvasPtr">
\brief GsMemoryImageCanvasPtr
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Kernel.GsBrush*,GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsStringFormat*)">
\brief 绘制字符串
\returns 返回提交是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.Flush">
\brief 提交未提交的绘制数据   
\returns 返回提交是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.Clear(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 用特定颜色清空整个画布  
\param color 要清空的颜色  
\returns 返回绘制是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawArc(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\brief 绘制圆弧
\param pPath 要绘制的路径
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.FillPath(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.GsBrush*)">
\brief 填充路径 
\param pPath 要填充的路径
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawPath(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.GsPen*)">
\brief 绘制路径 
\param pPath 要绘制的路径
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreatePath">
\brief 创建路径对象 
\returns 返回创建的路径对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreateImage(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存块直接创建图像对象
\param strData　图像的内存块
\param nLen  内存块的长度
\return 返回图像对象
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawImage(GeoStar.Utility.GsImage*,GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 绘制图片的特定部分到特定范围 
\param pImg 要绘制的图片
\param source 图片要绘制的范围 
\param target 要绘制到的目标范围
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.FillPie(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsBrush*)">
\brief 填充Pie
\param rect Pie所在椭圆的外接矩形范围
\param start_angle 饼的开始角度
\param sweepAngle 饼的旋转角度
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawPie(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\brief 绘制Pie轮廓
\param rect Pie所在椭圆的外接矩形范围
\param start_angle 饼的开始角度
\param sweepAngle 饼的旋转角度
\param pPen 绘制的画笔
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.DrawLine(System.Single*,System.Int32,GeoStar.Kernel.GsPen*)">
\brief 绘制多个点连续的线 
\param pCoord 坐标数组指针，以X，Y坐标连续存储
\param nPointCount 坐标点的数量
\param pPen 绘制的画笔
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreatePen(GeoStar.Kernel.GsBrush*,System.Single)">
\brief 从画刷创建画笔对象
\param brush 画刷
\param  fWidth 画笔的宽度，像素单位
\returns 返回创建的画笔对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreatePen(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
\brief 创建画笔对象
\param color 画笔的颜色
\param  fWidth 画笔的宽度，像素单位
\returns 返回创建的画笔对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreateCompatibleImageCanvas(System.Int32,System.Int32)">
\brief 创建一个和当前画布兼容的Image画布
\param width　画布的高度
\param height  画布的宽度
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.Image">
\brief 获取绘制的位图
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.ClearClip">
\brief 清除裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.Clip(GeoStar.Kernel.GsRegion*)">
\brief 设置path作为的裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreateRegion(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 创建一个裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.CreateRegion(GeoStar.Kernel.GsGraphicsPath*)">
\brief 创建一个裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.RenderingOrigin(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst)">
\brief 设置绘制起算的原点
</member>
        <member name="M:GeoStar.Kernel.GsMemoryImageCanvas.#ctor(System.Int32,System.Int32,System.Single)">
\brief 根据宽和高构建RGBA32位色的画布
</member>
        <member name="T:GeoStar.Kernel.GsMemoryImageCanvas">
\brief 基于内存的影像画布
</member>
        <member name="D:GeoStar.Kernel.GsNewEnvelopeTrackerPtr">
\brief GsNewEnvelopeTrackerPtr
</member>
        <member name="M:GeoStar.Kernel.GsNewEnvelopeTracker.OnMouseMove(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标移动消息
</member>
        <member name="M:GeoStar.Kernel.GsNewEnvelopeTracker.OnMouseUp(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标弹起消息
</member>
        <member name="M:GeoStar.Kernel.GsNewEnvelopeTracker.OnMouseDown(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标按下消息
</member>
        <member name="M:GeoStar.Kernel.GsNewEnvelopeTracker.OnTrackerDraw(GeoStar.Kernel.GsDisplay*)">
\brief tracker绘制函数，子类通过覆盖此函数绘制内容。
</member>
        <member name="T:GeoStar.Kernel.GsNewEnvelopeTracker">
\brief 屏幕绘制
</member>
        <member name="D:GeoStar.Kernel.GsSymbolTrackerPtr">
\brief GsSymbolTrackerPtr
</member>
        <member name="F:GeoStar.Kernel.GsSymbolTracker.OnGeometryTracked">
\brief Geometry绘制完成
</member>
        <member name="F:eEndTracker">
\brief 通知Tracker结束
</member>
        <member name="F:eRestartTracker">
\brief 通知Tracker重新启动
</member>
        <member name="F:eDoNothing">
\brief 通知Tracker什么也不做，相当于结束Tracker
</member>
        <member name="T:GeoStar.Kernel.GsSymbolTracker.GsTrackerFeedBack">
\brief Tracker绘制的反馈。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTracker.OnMouseWheel(GeoStar.Kernel.GsButton,System.Int32,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标滚轮消息
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTracker.OnMouseMove(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标移动消息
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTracker.OnMouseUp(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标弹起消息
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTracker.OnMouseDown(GeoStar.Kernel.GsButton,System.Int32,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 接收鼠标按下消息
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTracker.OnTrackerDraw(GeoStar.Kernel.GsDisplay*)">
\brief tracker绘制函数，子类通过覆盖此函数绘制内容。
</member>
        <member name="T:GeoStar.Kernel.GsSymbolTracker">
\brief 屏幕绘制
</member>
        <member name="T:GeoStar.Kernel.GsButton">
\brief 鼠标按钮
</member>
        <member name="F:eMiddleButton">
\brief 鼠标中键
</member>
        <member name="F:eRightButton">
\brief 鼠标右键
</member>
        <member name="F:eLeftButton">
\brief 鼠标左键
</member>
        <member name="F:eNoneButton">
\brief 没有按下任何键
</member>
        <member name="D:GeoStar.Kernel.GsTileLayerPtr">
\brief GsTileLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.SpatialReference">
\brief 图层的空间参考
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.TileClass(GeoStar.Kernel.GsTileClass*)">
\brief 设置瓦片类
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.TileClass">
\brief 获取瓦片类对象指针
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的地理范围
\param pTargetSR 以该空间参考返回范围
</member>
        <member name="M:GeoStar.Kernel.GsTileLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 绘制方法入口
</member>
        <member name="T:GeoStar.Kernel.GsTileLayer">
\brief 瓦片类图层
</member>
        <member name="D:GeoStar.Kernel.GsRasterLayerPtr">
\brief GsRasterLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.Renderer(GeoStar.Kernel.GsRasterRenderer*)">
\brief 设置Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.Renderer">
\brief 获取Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.SpatialReference">
\brief 图层的空间参考
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.RasterClass(GeoStar.Kernel.GsRasterClass*)">
\brief 设置栅格类
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.RasterClass">
\brief 获取栅格类对象指针
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的地理范围
\param pTargetSR 以该空间参考返回范围
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.ResampleAlg(GeoStar.Kernel.GsRasterResampleAlg)">
\brief 设置插值算法
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.ResampleAlg">
\brief 获取插值算法
</member>
        <member name="M:GeoStar.Kernel.GsRasterLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 绘制方法入口
</member>
        <member name="D:GeoStar.Kernel.GsFeatureLayerPtr">
\brief GsFeatureLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.DisplayFilter(GeoStar.Kernel.GsQueryFilter*)">
\brief 开图时的过滤条件
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.SpatialReference(GeoStar.Kernel.GsSpatialReference*)">
\brief 设置强制投影时源空间参考
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.SourceSpatialReference">
\brief 获取强制投影时源空间参考
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.ProjectionStyle(GeoStar.Kernel.GsProjectionStyle)">
\brief 设置投影变换类型
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.ProjectionStyle">
\brief 获取投影变换类型
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.ClearSelection">
\brief 清空选择集
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.SelectionSet">
\brief 获取选择集
\return 返回内部的选择集指针
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.Select(GeoStar.Kernel.GsQueryFilter*)">
\brief 选择地物
\param pFilter 查询条件
\return 返回内部的选择集
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.Renderer(GeoStar.Kernel.GsFeatureRenderer*)">
\brief 设置Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.Renderer">
\brief 获取Renderer对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.FeatureClass(GeoStar.Kernel.GsFeatureClass*)">
\brief 设置地物类
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.FeatureClass">
\brief 获取地物类对象指针
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.SpatialReference">
\brief 图层的空间参考
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的地理范围
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.#ctor(GeoStar.Kernel.GsFeatureClass*)">
\brief 从一个地物类构造
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 绘制方法入口
</member>
        <member name="M:GeoStar.Kernel.GsFeatureLayer.OnCancel(GeoStar.Kernel.GsTrackCancel*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 事件，当外部调用Cancel方法时发生
</member>
        <member name="F:GeoStar.Kernel.GsFeatureLayer.m_ptrSource">
\brief 进行强制投影变换是源投影
</member>
        <member name="F:GeoStar.Kernel.GsFeatureLayer.m_eProjectionStyle">
\brief 动态投影的方法
</member>
        <member name="T:GeoStar.Kernel.GsFeatureLayer">
\brief 地物类图层
</member>
        <member name="T:GeoStar.Kernel.GsProjectionStyle">
\brief 动态投影的方法
</member>
        <member name="F:eDoProjectionForce">
\brief 强制动态投影
\details 不论当前图层和地图空间参考是否一致都进行投影。
</member>
        <member name="F:eDoProjectionAuto">
\brief 自动动态投影
\details 仅在当前图层和地图参考不一致的时候进行动态投影
</member>
        <member name="F:eDoNotProjection">
\brief 不论什么情况下不做动态投影
</member>
        <member name="D:GeoStar.Kernel.GsDotDensityRendererPtr">
\brief GsDotDensityRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.IsDrawBackGround">
\brief 获取是否绘制背景
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.IsDrawBackGround(System.Boolean)">
\brief 设置是否绘制背景
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.BackGroundSymbol">
\brief 获取背景面符号
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.BackGroundSymbol(GeoStar.Kernel.GsFillSymbol*)">
\brief 设置背景面符号
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.PointSymbol">
\brief 获取点符号
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.PointSymbol(GeoStar.Kernel.GsPointSymbol*)">
\brief 设置点符号
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.DotValue">
\brief 返回点值
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.DotValue(System.Double)">
\brief 设置点值
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.DotSize">
\brief 返回点尺寸
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.DotSize(System.Double)">
\brief 设置点的尺寸
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.FieldIndex">
\brief 返回字段位置
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.FieldIndex(System.Int32)">
\brief 设置字段位置
</member>
        <member name="M:GeoStar.Kernel.GsDotDensityRenderer.#ctor">
\brief 缺省构造
</member>
        <member name="T:GeoStar.Kernel.GsDotDensityRenderer">
\brief 点值法
</member>
        <member name="D:GeoStar.Kernel.GsGraduatedRendererPtr">
\brief GsGraduatedRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.BreakCount">
\brief 返回分级数量
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.BreakCount(System.Int32)">
\brief 设置分级数量
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.BreakValue(System.Int32)">
\brief 返回分级值
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.BreakValue(System.Double)">
\brief 设置分级值
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.NormalFieldPos">
\brief 返回正规化字段位置
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.NormalFieldPos(System.Int32)">
\brief 设置正规化字段位置
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.FieldPos">
\brief 返回字段位置
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.FieldPos(System.Int32)">
\brief 设置字段位置
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.GradeTypeColor(System.Boolean)">
\brief 设置是否分级颜色
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.GradeTypeColor">
\brief 判断是否分级颜色
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.IsUseDefaultSymbol">
\brief 获取是否使用默认符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.IsUseDefaultSymbol(System.Boolean)">
\brief 设置是否使用默认符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.DefaultSymbol">
\brief 获取默认符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.DefaultSymbol(GeoStar.Kernel.GsSymbol*)">
\brief 设置默认符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.Symbol(System.Int32)">
\brief 根据级别值获取符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.Symbol(GeoStar.Kernel.GsSymbol*)">
\brief 设置符号
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.FieldGrade(GeoStar.Kernel.GsFeature*)">
\brief 计算字段值的分级
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.FieldValue(GeoStar.Kernel.GsFeature*,System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 获取字段值
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsGraduatedRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_nBreakCount">
\brief 级别数
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_vBreakValues">
\brief 分级点
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_bIsGradeColor">
\brief 是否为分级颜色
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_vSymbols">
\brief 分级符号
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_bIsUseDefaultSymbol">
\brief 是否用缺省符号
</member>
        <member name="F:GeoStar.Kernel.GsGraduatedRenderer.m_ptrDefaultSymbol">
\brief 默认渲染符号
</member>
        <member name="T:GeoStar.Kernel.GsGraduatedRenderer">
\brief 用于分级渲染
</member>
        <member name="D:GeoStar.Kernel.GsTextFeatureRendererPtr">
\brief GsTextFeatureRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.Unified(System.Boolean)">
\brief 是否统一使用一种符号渲染
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.Unified">
\brief 是否统一使用一种符号渲染
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.Symbol">
\brief 获取渲染的符号指针
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.Symbol(GeoStar.Kernel.GsTextSymbol*)">
\brief 设置渲染的符号
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.#ctor(GeoStar.Kernel.GsTextSymbol*)">
\brief 根据符号构造
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsTextFeatureRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="T:GeoStar.Kernel.GsTextFeatureRenderer">
\brief 用于渲染注记地物
</member>
        <member name="D:GeoStar.Kernel.GsUniqueValueRendererPtr">
\brief GsSimpleFeatureRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.FindSymbolByKey(System.UInt64)">
\brief 根据key值查找符号，没有找到返回空指针
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.AllSymbolsEndDraw">
\brief 所有符号结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.AllSymbolsBeginDraw(GeoStar.Kernel.GsDisplay*)">
\brief 所有符号准备绘制
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.IsUseDefaultSymbol">
\brief 返回是否使用默认符号进行绘制
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.IsUseDefaultSymbol(System.Boolean)">
\brief 设置是否使用默认符号进行绘制
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据字符串型属性值获取符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Int32)">
\brief 根据整型属性值获取符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Single)">
\brief 根据单精度型属性值获取符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Double)">
\brief 根据双精度型属性值获取符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Kernel.GsSymbol*)">
\brief 根据字符串型属性值设置符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Int32,GeoStar.Kernel.GsSymbol*)">
\brief 根据整型属性值设置符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Single,GeoStar.Kernel.GsSymbol*)">
\brief 根据单精度型属性值设置符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.Symbol(System.Double,GeoStar.Kernel.GsSymbol*)">
\brief 根据双精度型属性值设置符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.FieldName">
\brief 获取过滤字段
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.FieldName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置过滤字段名
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.DefaultSymbol">
\brief 获取默认符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.DefaultSymbol(GeoStar.Kernel.GsSymbol*)">
\brief 设置默认符号
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.#ctor(GeoStar.Kernel.GsSymbol*)">
\brief 根据默认符号构造
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsUniqueValueRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_mapSymbols">
\brief 渲染符号容器
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_anyEachFeature">
\brief 绘制时描述Feature字段值，声明为成员减少构造次数
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_bUseDefaultSymbol">
\brief 记录是否使用默认符号进行绘制
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_nFieldPos">
\brief 要过滤的字段名的位置
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_strFieldName">
\brief 要过滤的字段名
</member>
        <member name="F:GeoStar.Kernel.GsUniqueValueRenderer.m_ptrDefaultSymbol">
\brief 默认渲染符号
</member>
        <member name="T:GeoStar.Kernel.GsUniqueValueRenderer">
\brief 质底填充渲染器
\details 游标中根据指定的属性值，过滤出各个地物，使用不同符号进行绘制
</member>
        <member name="D:GeoStar.Kernel.GsSimpleFeatureRendererPtr">
\brief GsSimpleFeatureRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.Symbol">
\brief 获取渲染的符号指针
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.Symbol(GeoStar.Kernel.GsSymbol*)">
\brief 设置渲染的符号
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.#ctor(GeoStar.Kernel.GsSymbol*)">
\brief 根据符号构造
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFeatureRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="F:GeoStar.Kernel.GsSimpleFeatureRenderer.m_ptrSymbol">
\brief 渲染的符号
</member>
        <member name="T:GeoStar.Kernel.GsSimpleFeatureRenderer">
\brief 简单地物渲染器
\details 游标中所有的地物统一使用一种符号进行绘制
</member>
        <member name="D:GeoStar.Kernel.GsPaletteRasterRendererPtr">
\brief GsPaletteRasterRenderer
</member>
        <member name="M:GeoStar.Kernel.GsPaletteRasterRenderer.ColorTable">
\brief 返回调色板
</member>
        <member name="M:GeoStar.Kernel.GsPaletteRasterRenderer.CreateColorTrans(GeoStar.Kernel.GsTrackCancel*)">
\brief 创建颜色绘制对象
</member>
        <member name="T:GeoStar.Kernel.GsPaletteRasterRenderer">
\brief 调色板真彩色渲染器
</member>
        <member name="D:GeoStar.Kernel.GsGrayIndexRasterRendererPtr">
\brief GsGrayIndexRasterRenderer
</member>
        <member name="M:GeoStar.Kernel.GsGrayIndexRasterRenderer.NoDataValue">
\brief 无效值
</member>
        <member name="M:GeoStar.Kernel.GsGrayIndexRasterRenderer.UseNoDataValue(System.Boolean)">
\brief 是否使用无效值
</member>
        <member name="M:GeoStar.Kernel.GsGrayIndexRasterRenderer.SwapWhiteBlack(System.Boolean)">
\brief 交换黑色和白色
</member>
        <member name="M:GeoStar.Kernel.GsGrayIndexRasterRenderer.CreateColorTrans(GeoStar.Kernel.GsTrackCancel*)">
\brief 创建颜色绘制对象
</member>
        <member name="T:GeoStar.Kernel.GsGrayIndexRasterRenderer">
\brief 灰度影像渲染器
</member>
        <member name="D:GeoStar.Kernel.GsRGBARasterRendererPtr">
\brief GsRGBARasterRenderer
</member>
        <member name="M:GeoStar.Kernel.GsRGBARasterRenderer.Blue">
\brief Blue通道序号
</member>
        <member name="M:GeoStar.Kernel.GsRGBARasterRenderer.Green">
\brief Green通道序号
</member>
        <member name="M:GeoStar.Kernel.GsRGBARasterRenderer.Red">
\brief Red通道序号
</member>
        <member name="M:GeoStar.Kernel.GsRGBARasterRenderer.CreateColorTrans(GeoStar.Kernel.GsTrackCancel*)">
\brief 创建颜色绘制对象
</member>
        <member name="T:GeoStar.Kernel.GsRGBARasterRenderer">
\brief RGBA渲染器
\details 游标中所有的像素统一使用RGBA值进行绘制
</member>
        <member name="D:GeoStar.Kernel.GsRasterRendererPtr">
\brief GsRasterRendererPtr
</member>
        <member name="M:GeoStar.Kernel.GsRasterRenderer.CreateColorTrans(GeoStar.Kernel.GsTrackCancel*)">
\brief 创建颜色绘制对象
</member>
        <member name="M:GeoStar.Kernel.GsRasterRenderer.Transparency(System.Double)">
\brief 设置透明度，取值从0到1
</member>
        <member name="M:GeoStar.Kernel.GsRasterRenderer.DrawCursor(GeoStar.Kernel.GsRasterCursor*,GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*)">
\brief 绘制一个地物游标中的数据
</member>
        <member name="F:GeoStar.Kernel.GsRasterRenderer.m_dblTrans">
\brief 透明度
</member>
        <member name="F:GeoStar.Kernel.GsRasterRenderer.m_ptrTrans">
\brief 像素转换
</member>
        <member name="F:GeoStar.Kernel.GsRasterRenderer.m_ptrImage">
\brief 用于绘制的位图对象
</member>
        <member name="F:GeoStar.Kernel.GsRasterRenderer.m_ptrRasterCursor">
\brief 当前会绘制的游标
</member>
        <member name="F:GeoStar.Kernel.GsRasterRenderer.m_ptrDisplay">
\brief 显示对象
</member>
        <member name="T:GeoStar.Kernel.GsRasterRenderer">
\brief 栅格数据渲染器抽象基类
</member>
        <member name="M:GeoStar.Kernel.GsColorToRGBA.Transparency(System.Double)">
\brief 设置透明度，取值从0到1
</member>
        <member name="F:GeoStar.Kernel.GsColorToRGBA.m_dblTrans">
\brief 透明度
</member>
        <member name="T:GeoStar.Kernel.GsColorToRGBA">
\brief 将任意的颜色转换为RGBA32位位图。
\details RasterRenderer的二次开发可以扩展一个ColorToRGBA子类；或者直接重写GsRasterRenderer::DrawCursor，以获得更大的灵活性
</member>
        <member name="D:GeoStar.Kernel.GsFeatureRendererPtr">
\brief GsFeatureRendererPtr
</member>
        <member name="F:GeoStar.Kernel.GsFeatureRenderer.OnBegin">
\brief 事件,当开始绘制的时候发生
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.CoordinateTransformation(GeoStar.Kernel.GsCoordinateTransformation*)">
\brief 设置坐标转换对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.CoordinateTransformation">
\brief 获取坐标转换对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.DrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*)">
\brief 绘制一个地物游标中的数据
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.Rendition(GeoStar.Kernel.GsFeatureRendition*)">
\brief 设置渲染器
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.Rendition">
\brief 获取渲染器
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.OnEndDrawCursor(GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器结束绘制时发生。
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.OnDrawFeature(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器每渲染一个地物时发生
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRenderer.OnBeginDrawCursor(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 渲染器开始绘制游标时发生
</member>
        <member name="F:GeoStar.Kernel.GsFeatureRenderer.m_ptrRendition">
\brief 渲染器
</member>
        <member name="F:GeoStar.Kernel.GsFeatureRenderer.m_ptrTrans">
\brief 坐标变换对象
</member>
        <member name="F:GeoStar.Kernel.GsFeatureRenderer.m_ptrFeaCursor">
\brief 当前会绘制的游标
</member>
        <member name="F:GeoStar.Kernel.GsFeatureRenderer.m_ptrDisplay">
\brief 显示对象
</member>
        <member name="T:GeoStar.Kernel.GsFeatureRenderer">
\brief 地物渲染器抽象基类
</member>
        <member name="D:GeoStar.Kernel.GsLabelRenditionPtr">
\brief GsLabelRenditionPtr
</member>
        <member name="M:GeoStar.Kernel.GsLabelRendition.LabelProperty">
\brief 返回 LabelProperty
</member>
        <member name="M:GeoStar.Kernel.GsLabelRendition.Render(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsSymbol*)">
\brief 渲染一个地物
</member>
        <member name="M:GeoStar.Kernel.GsLabelRendition.End">
\brief 结束渲染
</member>
        <member name="M:GeoStar.Kernel.GsLabelRendition.Begin(GeoStar.Kernel.GsDisplay*)">
\brief 开始渲染
</member>
        <member name="T:GeoStar.Kernel.GsLabelRendition">
\brief 标注渲染器
</member>
        <member name="D:GeoStar.Kernel.GsFeatureRenditionPtr">
\brief GsFeatureRenditionPtr
</member>
        <member name="M:GeoStar.Kernel.GsFeatureRendition.Render(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsSymbol*)">
\brief 渲染一个地物
</member>
        <member name="T:GeoStar.Kernel.GsFeatureRendition">
\brief 矢量数据渲染器
</member>
        <member name="D:GeoStar.Kernel.GsRenditionPtr">
\brief GsRenditionPtr
</member>
        <member name="M:GeoStar.Kernel.GsRendition.End">
\brief 结束渲染
</member>
        <member name="M:GeoStar.Kernel.GsRendition.Begin(GeoStar.Kernel.GsDisplay*)">
\brief 开始渲染
</member>
        <member name="T:GeoStar.Kernel.GsRendition">
\brief 渲染器，实现数据的渲染。
</member>
        <member name="D:GeoStar.Kernel.GsMapPtr">
\brief GsMapPtr
</member>
        <member name="M:GeoStar.Kernel.GsMap.GetPyramidLayer">
\brief 获取金字塔图层
</member>
        <member name="M:GeoStar.Kernel.GsMap.Output(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*)">
\brief 将地图数据绘制到输入的Display上。
\details 调用者需要在外部输入启动Display的StartDraw，并在输出结束后调用EndDraw。
\param pDisp 需要输出数据的Display
</member>
        <member name="M:GeoStar.Kernel.GsMap.ViewExtent">
\brief 获取当前显示范围
\details 相当于调用方法Display()-&gt;DisplayTransformation()-&gt;MapExtent();
</member>
        <member name="M:GeoStar.Kernel.GsMap.ViewExtent(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置当前显示范围
\details 会取消当前地图绘制，同时使得地图失效，但不会立刻刷新地图，需要额外调用Paint或者Update刷新地图
</member>
        <member name="M:GeoStar.Kernel.GsMap.FullExtent">
\brief 全图范围
\details 所有图层的范围合并的范围
</member>
        <member name="M:GeoStar.Kernel.GsMap.IsValid">
\brief 判断是否是否已经失效
</member>
        <member name="M:GeoStar.Kernel.GsMap.Invalidate">
\brief 使地图失效
</member>
        <member name="M:GeoStar.Kernel.GsMap.Paint(GeoStar.Kernel.GsDrawPhase)">
\brief 绘制地图
\details 如果地图数据未失效，则直接绘制缓冲的位图，反之则重新绘制
</member>
        <member name="M:GeoStar.Kernel.GsMap.Update">
\brief 强制刷新地图
\details 使地图失效，强制刷新
</member>
        <member name="M:GeoStar.Kernel.GsMap.Layers">
\brief 获取图层列表对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMap.IsDrawing">
\brief 地图是否处于绘制状态
</member>
        <member name="M:GeoStar.Kernel.GsMap.Cancel">
\brief 取消当前绘制
</member>
        <member name="M:GeoStar.Kernel.GsMap.ScreenDisplay">
\brief 获取屏幕显示对象
</member>
        <member name="M:GeoStar.Kernel.GsMap.TrackCancel">
\brief 取消对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMap.#ctor(GeoStar.Kernel.GsScreenDisplay*)">
\brief 根据屏幕显示对象构造
</member>
        <member name="F:GeoStar.Kernel.GsMap.m_TrackCancel">
\brief 绘制取消对象
</member>
        <member name="F:GeoStar.Kernel.GsMap.m_ptrDisplay">
\brief 屏幕显示对象
</member>
        <member name="F:GeoStar.Kernel.GsMap.m_ptrPyramidLayer">
\brief 金字塔图层
</member>
        <member name="F:GeoStar.Kernel.GsMap.m_lstLayers">
\brief 图形列表
</member>
        <member name="T:GeoStar.Kernel.GsMap">
\brief 地图对象
\details 多个图层绘制
</member>
        <member name="D:GeoStar.Kernel.GsMultiLayerPtr">
\brief GsMultiLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.SpatialReference">
\brief 图层的空间参考
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的最大范围
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.Layers">
\brief 获取图层列表对象指针
</member>
        <member name="M:GeoStar.Kernel.GsMultiLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 内部绘制入口
\details 子类通过覆盖此函数实现绘制。
</member>
        <member name="F:GeoStar.Kernel.GsMultiLayer.m_lstLayers">
\brief 图形列表
</member>
        <member name="T:GeoStar.Kernel.GsMultiLayer">
\brief 复合图层
</member>
        <member name="D:GeoStar.Kernel.GsLayerPtr">
\brief GsLayerPtr
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Draw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 图形绘制入口
\param pDislay 绘制对象
\param pCancel 绘制取消对象
</member>
        <member name="M:GeoStar.Kernel.GsLayer.SpatialReference">
\brief 图层的空间参考
</member>
        <member name="M:GeoStar.Kernel.GsLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的最大范围,以图层的空间参考显示
</member>
        <member name="M:GeoStar.Kernel.GsLayer.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Tag(GeoStar.Utility.GsAny!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置图层的名称
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Tag">
\brief 图层的名称
</member>
        <member name="M:GeoStar.Kernel.GsLayer.MaxScale(System.Double)">
\brief 设置图层最大可见比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.MaxScale">
\brief 图层最大可见比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.MinScale(System.Double)">
\brief 设置图层最小可见比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.MinScale">
\brief 图层最小可见比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.ReferenceScale(System.Double)">
\brief 参考比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.ReferenceScale">
\brief 参考比例尺
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Visible(System.Boolean)">
\brief 设置图层是否可见
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Visible">
\brief 图层是否可见
</member>
        <member name="M:GeoStar.Kernel.GsLayer.AliasName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置图层的别名
</member>
        <member name="M:GeoStar.Kernel.GsLayer.AliasName">
\brief 图层的别名
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置图层的名称
</member>
        <member name="M:GeoStar.Kernel.GsLayer.Name">
\brief 图层的名称
</member>
        <member name="M:GeoStar.Kernel.GsLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 内部绘制入口
\details 子类通过覆盖此函数实现绘制。
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_Tag">
\brief 用户附加数据。
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_dblReferenceScale">
\brief 参考比例尺
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_dblMaxScale">
\brief 最大可见比例尺
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_dblMinScale">
\brief 最小可见比例尺
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_bVisible">
\brief 图层是否可见
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_strAliasName">
\brief 图层的别名
</member>
        <member name="F:GeoStar.Kernel.GsLayer.m_strName">
\brief 图层的名称
</member>
        <member name="T:GeoStar.Kernel.GsLayer">
\brief 图形的抽象基类
</member>
        <member name="T:GeoStar.Kernel.GsDrawPhase">
\brief 绘制的阶段
</member>
        <member name="F:eDrawSelectionSet">
\brief 绘制选择集
</member>
        <member name="F:eDrawNormal">
\brief 通用绘制
</member>
        <member name="D:GeoStar.Kernel.GsScreenDisplayPtr">
\brief GsScreenDisplayPtr
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.Flush">
\brief 提交绘制结果到屏幕
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.EndDrawing">
\brief 结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.StartDrawing">
\brief 开始绘制
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.OnSizeChanged">
\brief 当绘制设备发生变化时
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.Paint(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 将缓存的内容绘制到设备上
\param  pt 绘制偏移的像素坐标
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.PanStop">
\brief 停止漫游
\return 返回漫游结束时应该实现的地理范围
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.PanMoveTo(System.Double,System.Double)">
\brief 漫游到地理坐标
\param  x 地理x坐标
\param  y 地理y坐标
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.PanStart(System.Double,System.Double)">
\brief 从地理坐标开始漫游
\param  x 地理x坐标
\param  y 地理y坐标
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.EndRecording">
\brief 结束记录
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.RecordingCanvas">
\brief 正用于记录的画布
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.BeginRecording">
\brief 开始记录。
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.BindDevice(GeoStar.Kernel.GsPaintDevice*)">
\brief 绑定设备
</member>
        <member name="M:GeoStar.Kernel.GsScreenDisplay.#ctor(GeoStar.Kernel.GsPaintDevice*,GeoStar.Kernel.GsDisplayTransformation*)">
\brief 根据可绘制设备以及坐标转换对象构造
\param  pDevice 可绘制对象
\param  pDT 设备坐标转换对象
</member>
        <member name="F:GeoStar.Kernel.GsScreenDisplay.m_RecordingQueue">
\brief 记录队列。
</member>
        <member name="F:GeoStar.Kernel.GsScreenDisplay.m_PanStartPt">
\brief 漫游的开始位置和正在漫游的位置。
</member>
        <member name="F:GeoStar.Kernel.GsScreenDisplay.m_PanStart">
\brief 漫游的开始位置和正在漫游的位置。
</member>
        <member name="F:GeoStar.Kernel.GsScreenDisplay.m_bPaning">
\brief 是否处于漫游状态
</member>
        <member name="F:GeoStar.Kernel.GsScreenDisplay.m_bRecording">
\brief 是否处于记录状态
</member>
        <member name="T:GeoStar.Kernel.GsScreenDisplay">
\brief 屏幕显示对象
\details 将可绘制设备封装成为屏幕绘制显示对象
</member>
        <member name="D:GeoStar.Kernel.GsTrackCancelPtr">
\brief GsTrackCancelPtr
</member>
        <member name="F:GeoStar.Kernel.GsTrackCancel.OnFinishTimer">
\brief 事件，FinishTimer时发生
</member>
        <member name="F:GeoStar.Kernel.GsTrackCancel.OnStartTimer">
\brief 事件，当调用StartTimer时发生
</member>
        <member name="F:GeoStar.Kernel.GsTrackCancel.OnCancel">
\brief 事件，当外部调用Cancel方法时发生
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.FireTimer">
\brief 导致计时器立刻被激发
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.Continue">
\brief 可否继续
\details 是否调用Cancel进行取消
\return 返回是否处于取消状态
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.Cancel">
\brief 取消
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.Reset">
\brief 重置取消状态
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.TimerFired">
\brief 是否到达一个计时周期
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.FinishTimer">
\brief 结束计时
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.StartTimer(System.UInt32)">
\brief 开始计时
\param  nMilliseconds 计时周期，单位毫秒，缺省200毫秒
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置名称
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.Name">
\brief 获取名称
</member>
        <member name="M:GeoStar.Kernel.GsTrackCancel.#ctor">
\brief 缺省构造
</member>
        <member name="T:GeoStar.Kernel.GsTrackCancel">
\brief 取消追踪
</member>
        <member name="D:GeoStar.Kernel.GsDisplayPtr">
\brief GsDisplayPtr
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.DisplayTransformation">
\brief 获取坐标转换对象
\return 返回坐标转换对象指针
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.Canvas">
\brief 获取绘制用的画布
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.Flush">
\brief 提交绘制内容
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.EndDrawing">
\brief 结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.StartDrawing">
\brief 开始绘制
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.BackColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置绘制的背景颜色
\param c 背景颜色
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.BackColor">
\brief 获取绘制的背景颜色
\return 返回背景颜色
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.ClipEnvelope">
\brief 当前显示的地理范围
\return 返回显示地物范围的Box 
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.LabelContainer(GeoStar.Kernel.GsLabelContainer*)">
\brief 获取自动标注避让容器
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.LabelContainer">
\brief 获取自动标注避让容器
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.OnAfterEndDrawing">
\brief 在Display结束之前激发
\details 响应此事件向Display上绘制数据不会记录到Cache中
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.OnBeforeEndDrawing">
\brief 在Display结束之前激发
\details 响应此事件向Display上绘制数据不会记录到Cache中
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.OnAfterStartDrawing">
\brief 事件，在Display的StartDrawing方法之后激发
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.FireAfterEndDrawing">
\brief 激发OnAfterEndDrawing事件
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.FireBeforeEndDrawing">
\brief 激发OnBeforeEndDrawing事件
</member>
        <member name="M:GeoStar.Kernel.GsDisplay.FireAfterStartDrawing">
\brief 激发OnAfterStartDrawing事件
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.m_ptrLabelContainer">
\brief 标注避让容器
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.m_ptrCanvas">
\brief 绘制的画布
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.m_ptrDT">
\brief 显示坐标转换
</member>
        <member name="F:GeoStar.Kernel.GsDisplay.m_BackGroundColor">
\brief 背景颜色
</member>
        <member name="T:GeoStar.Kernel.GsDisplay">
\brief 显示对象
\details 代表地图的显示设备
</member>
        <member name="D:GeoStar.Kernel.GsGeoPackageGeoDatabaseFactoryPtr">
\brief GsGeoPackageGeoDatabaseFactoryPtr
</member>
        <member name="M:GeoStar.Kernel.GsGeoPackageGeoDatabaseFactory.Open(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据数据库连接信息打开一个空间数据库
\param connProperty 数据库连接信息
\return 返回空间数据库对象实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsGeoPackageGeoDatabaseFactory">
\brief OGC GeoPackage标准数据库工厂
\details 基于OGC GeoPackage标准文件格式http://www.geopackage.org/
</member>
        <member name="M:GeoStar.Kernel.GsFileGeoDatabaseFactory.Open(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据数据库连接信息打开一个空间数据库
\param connProperty 数据库连接信息
\return 返回空间数据库对象实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsFileGeoDatabaseFactory">
\brief 文件类型数据库工厂
\details 包含Sqlite，SHP，GeoPackage以及文件栅格数据的类型识别。
</member>
        <member name="D:GeoStar.Kernel.GsShpGeoDatabaseFactoryPtr">
\brief GsShpGeoDatabaseFactoryPtr

\brief GsShpGeoDatabaseFactoryPtr
</member>
        <member name="M:GeoStar.Kernel.GsShpGeoDatabaseFactory.Open(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据数据库连接信息打开一个空间数据库
\param connProperty 数据库连接信息
\return 返回空间数据库对象实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsShpGeoDatabaseFactory">
\brief ShapeFile数据库工厂
\details ESRI ShapeFile文件格式
</member>
        <member name="D:GeoStar.Kernel.GsSqliteGeoDatabaseFactoryPtr">
\brief GsSqliteGeoDatabaseFactoryPtr
</member>
        <member name="M:GeoStar.Kernel.GsSqliteGeoDatabaseFactory.Open(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据数据库连接信息打开一个空间数据库
\code{.cpp}
GeoStar::Kernel::GsSqliteGeoDatabaseFactory vFac;
GeoStar::Kernel::GsConnectProperty vConn;
vConn.Server = GeoStar::Utility::GsFileSystem::Combine(CurrentFolder().c_str(),strpath)
GeoStar::Kernel::GsGeoDatabasePtr ptrGDB = vFac.Open(vConn);
\endcode
\param connProperty 数据库连接信息
\return 返回空间数据库对象实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsSqliteGeoDatabaseFactory">
\brief Sqlite数据库工厂
\details GeoStar文件格式
</member>
        <member name="D:GeoStar.Kernel.GsGeoDatabaseFactoryPtr">
\brief GsGeoDatabaseFactoryPtr
</member>
        <member name="M:GeoStar.Kernel.GsGeoDatabaseFactory.Open(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据数据库连接信息打开一个空间数据库
\param connProperty 数据库连接信息
\return 返回空间数据库对象实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsGeoDatabaseFactory">
\brief 空间数据库类厂
\details 通过空间数据库类厂创建空间数据库对象实例。
\code{.cpp}
GsOracleSpatialGeoDatabaseFactory fac;
GsGeoDatabasePtr ptrGDB = fac.Open(connProperty);
\endcode
</member>
        <member name="D:GeoStar.Kernel.GsGeoDatabasePtr">
\brief GsGeoDatabasePtr
</member>
        <member name="M:GeoStar.Kernel.GsGeoDatabase.TestCapbility(GeoStar.Kernel.GsGeoDatabaseCapbility)">
\brief 测试数据库能力
\param eCap 数据库能力类型
\return 能力类型的值，通常情况下1为支持能力，0为不支持。
</member>
        <member name="M:GeoStar.Kernel.GsGeoDatabase.ConnectProperty">
\brief 数据库连接属性 
\return 返回数据库连接属性 
</member>
        <member name="F:GeoStar.Kernel.GsGeoDatabase.m_ConnectProperty">
\brief 数据库的连接信息
</member>
        <member name="T:GeoStar.Kernel.GsGeoDatabase">
\brief 空间数据库对象
\details 代表一个能够存储GIS空间数据的数据库、文件（数据源）实体。
</member>
        <member name="D:GeoStar.Kernel.GsDataRoomFolderPtr">
\brief GsDataRoomFolderPtr
</member>
        <member name="M:GeoStar.Kernel.GsDataRoomFolder.Type">
\brief 数据集类型
\return 返回数据集对象的类型
</member>
        <member name="T:GeoStar.Kernel.GsDataRoomFolder">
\brief 数据集目录
</member>
        <member name="D:GeoStar.Kernel.GsRasterClassPtr">
\brief GsRasterClassPtr
</member>
        <member name="F:GeoStar.Kernel.GsRasterClass.OnProgress">
\brief 发生长事务执行的时候进度信息，例如创建金字塔
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.RasterColumnInfo">
\brief 获取基本几何信息
\return 返回基本几何信息对象
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.MetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置某个分类下的元数据值
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.MetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取某个分类下的元数据值
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.MetadataName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取元数据分类下的元数据名称
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.MetadataDomain">
\brief 元数据的分类名称
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.CreatePyramid(GeoStar.Kernel.GsRasterResampleAlg,System.Int32,System.Int32*)">
\brief 创建金字塔
\param alg 采样算法
\param nCount
\param pLevels
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.CreatePyramid(GeoStar.Kernel.GsRasterResampleAlg,System.Int32)">
\brief 创建金字塔
\param alg 采样算法
\param nLevel 创建金字塔的级别，金字塔级别以1/2,1/4,1/8 ...递增
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.ExistsPyramid">
\brief 是否存在金字塔
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.WriteRaster(GeoStar.Kernel.GsRaster*)">
\brief 将一块栅格数据写入到数据集中
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.Search(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsRasterResampleAlg)">
\brief 采样一块数据。
\param range 要采样的原始数据
\param s 采样后的大小
\param alg 采样算法
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.Search(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 查询一块原始数据。
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.RangeToExtent(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 计算地理范围对应的像素范围
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.ExtentToRange(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 计算地理范围在栅格中的像素范围
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.RasterBand(System.Int32)">
\brief 根据索引获得波段，索引从0开始
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.BandCount">
\brief 获取波段的数量
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.Format">
\brief 栅格的编码格式
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.Height">
\brief 像素高度
</member>
        <member name="M:GeoStar.Kernel.GsRasterClass.Width">
\brief 像素宽度
</member>
        <member name="T:GeoStar.Kernel.GsRasterClass">
\brief 栅格类，存储影像、地形等网格数据
</member>
        <member name="D:GeoStar.Kernel.GsRasterCursorPtr">
\brief GsRasterCursorPtr
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.RasterClass">
\brief 获取关联的栅格类
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.Next(GeoStar.Kernel.GsRaster*)">
\brief 获取下一块栅格对象
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.Reset">
\brief 重置游标位置
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.Y">
\brief 游标数据开始数据Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.X">
\brief 游标数据开始数据X偏移
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.Height">
\brief 游标的数据高度
</member>
        <member name="M:GeoStar.Kernel.GsRasterCursor.Width">
\brief 游标的数据宽度
</member>
        <member name="T:GeoStar.Kernel.GsRasterCursor">
\brief 栅格查询游标
</member>
        <member name="D:GeoStar.Kernel.GsRasterPtr">
\brief GsRasterPtr
</member>
        <member name="M:GeoStar.Kernel.GsRaster.RasterClass(GeoStar.Kernel.GsRasterClass*)">
\brief 关联栅格类
</member>
        <member name="M:GeoStar.Kernel.GsRaster.RasterClass">
\brief 获取关联的栅格类
</member>
        <member name="M:GeoStar.Kernel.GsRaster.OffsetY(System.Int32)">
\brief 设置栅格数据Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsRaster.OffsetY">
\brief 获取栅格数据Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsRaster.OffsetX(System.Int32)">
\brief 设置栅格数据X偏移
</member>
        <member name="M:GeoStar.Kernel.GsRaster.OffsetX">
\brief 获取栅格数据X偏移
</member>
        <member name="M:GeoStar.Kernel.GsRaster.Height(System.Int32)">
\brief 设置栅格数据高度
</member>
        <member name="M:GeoStar.Kernel.GsRaster.Height">
\brief 获取栅格数据高度
</member>
        <member name="M:GeoStar.Kernel.GsRaster.Width(System.Int32)">
\brief 设置栅格数据宽度
</member>
        <member name="M:GeoStar.Kernel.GsRaster.Width">
\brief 获取栅格数据宽度
</member>
        <member name="M:GeoStar.Kernel.GsRaster.DataLength">
\brief 根据栅格类属性计算的栅格数据长度
</member>
        <member name="M:GeoStar.Kernel.GsRaster.DataPtr(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设置栅格数据指针，数据会拷贝一份
</member>
        <member name="M:GeoStar.Kernel.GsRaster.DataPtr(System.Byte*)">
\brief 设置栅格数据指针
</member>
        <member name="M:GeoStar.Kernel.GsRaster.DataPtr">
\brief 获取栅格数据指针
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_ptrRasterClass">
\brief 栅格对象所属于的栅格类
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_nOffsetY">
\brief 数据位置在数据集上的Y偏移
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_nOffsetX">
\brief 数据位置在数据集上的X偏移
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_nHeight">
\brief 栅格数据的高度
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_nWidth">
\brief 栅格数据的宽度
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_pDataPtr">
\brief 栅格数据指针
</member>
        <member name="F:GeoStar.Kernel.GsRaster.m_nLength">
\brief 数据长度
</member>
        <member name="T:GeoStar.Kernel.GsRaster">
\brief 栅格数据块
</member>
        <member name="D:GeoStar.Kernel.GsRasterBandPtr">
\brief GsRasterBandPtr
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.ColorTable">
\brief 获取调色板、颜色表
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.RasterDataTypeBitSize(GeoStar.Kernel.GsRasterDataType)">
\brief 波段的数类型bit位大小
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.BandDataType">
\brief 波段的数据类型
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.Index">
\brief 波段的的索引号
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.NoDataValue">
\brief 无效值
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.Maximum">
\brief 最大值
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.Minimum">
\brief 最小值
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.BandType">
\brief 波段的名称、类型或者为用途
</member>
        <member name="M:GeoStar.Kernel.GsRasterBand.RasterClass">
\brief 波段所属的栅格类
</member>
        <member name="T:GeoStar.Kernel.GsRasterBand">
\brief 栅格波段
</member>
        <member name="M:GeoStar.Kernel.GsRasterColumnInfo.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsRasterColumnInfo.#ctor(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,GeoStar.Kernel.GsRasterDataType,GeoStar.Kernel.GsRasterBandType*,System.Int32)">
\brief 全部构造
</member>
        <member name="M:GeoStar.Kernel.GsRasterColumnInfo.#ctor(GeoStar.Kernel.GsRasterColumnInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
</member>
        <member name="M:GeoStar.Kernel.GsRasterColumnInfo.#ctor">
\brief 缺省构造函数
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.BandTypes">
\brief 波段的名称
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.DataType">
\brief 波段数据类型
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.BlockHeight">
\brief 数据存储块高度大小
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.BlockWidth">
\brief 数据存储块宽度大小
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.Height">
\brief 像素高度
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.Width">
\brief 像素宽度
</member>
        <member name="F:GeoStar.Kernel.GsRasterColumnInfo.XYDomain">
\brief X，Y维度范围
</member>
        <member name="T:GeoStar.Kernel.GsRasterColumnInfo">
\brief 栅格类基本信息
</member>
        <member name="M:GeoStar.Kernel.GsColorTable.IsValid">
\brief 是否是有效的颜色表
</member>
        <member name="F:GeoStar.Kernel.GsColorTable.ColorTable">
\brief 调色板颜色
</member>
        <member name="F:GeoStar.Kernel.GsColorTable.ColorType">
\brief 调色板的颜色类型
</member>
        <member name="T:GeoStar.Kernel.GsColorTable">
\brief 调色板
\details 调色板颜色每2个字节(short)标识一个颜色波段
</member>
        <member name="T:GeoStar.Kernel.GsRasterBandType">
\brief 波段类型
</member>
        <member name="F:eYCbCr_CrBand">
\brief YCbCr Cr红色偏移量波段
</member>
        <member name="F:eYCbCr_CbBand">
\brief YCbCr Cb蓝色偏移量波段
</member>
        <member name="F:eYCbCr_YBand">
\brief YCbCr Y亮度波段
</member>
        <member name="F:eBlackBand">
\brief CMLY Magenta波段
</member>
        <member name="F:eYellowBand">
\brief CMYK Yellow波段
</member>
        <member name="F:eMagentaBand">
\brief CMYK Magenta波段
</member>
        <member name="F:eCyanBand">
\brief CMYK Cyan波段
</member>
        <member name="F:eLightnessBand">
\brief HLS Lightness波段
</member>
        <member name="F:eSaturationBand">
\brief HLS Saturation波段
</member>
        <member name="F:eHueBand">
\brief HLS Hue波段
</member>
        <member name="F:eAlphaBand">
\brief RGBA 透明波段，0标示透明，255标示不透明
</member>
        <member name="F:eBlueBand">
\brief RGBA 蓝色波段
</member>
        <member name="F:eGreenBand">
\brief RGBA 绿色波段
</member>
        <member name="F:eRedBand">
\brief RGBA 红色波段
</member>
        <member name="F:ePaletteIndexBand">
\brief Paletted 调色板索引波段
</member>
        <member name="F:eGrayIndexBand">
\brief Greyscale灰度索引
</member>
        <member name="F:eUndefinedBand">
\brief 未定义波段
</member>
        <member name="D:GeoStar.Kernel.GsFeatureClassPtr">
\brief GsFeatureClassPtr
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.FeatureCount(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据查询条件获取地物的数量
\param pFilter 空间或者属性的查询条件
\return 返回满足查询条件的地物的数量
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.GeometryColumnInfo">
\brief 获取基本几何信息
\return 返回基本几何信息对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Select(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据根据where子句和几何空间范围进行选择
\return 返回删除索引是否成功
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.HasSpatialIndex">
\brief 是否存在空间索引
\return 返回空间索引是否存在
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.DeleteSpatialIndex">
\brief 删除空间索引
\return 返回删除索引是否成功
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.CreateSpatialIndex">
\brief 创建空间索引
\return 返回创建索引是否成功
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.GeometryType">
\brief 地物类的几何类型
\return 返回地物类的几何类型
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Search(GeoStar.Kernel.GsGeometry*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据where子句和几何空间范围进行粗查
\param pGeo 要检索的空间范围
\param strWhere 要检索的where子句
\return 返回检索结果的地物游标对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Search(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据Where子句进行粗查
\param strWhere 要检索的where子句
\return 返回检索结果的地物游标对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Search(GeoStar.Kernel.GsGeometry*)">
\brief 根据几何空间范围进行粗查
\param pGeo 要检索的几何空间范围
\return 返回检索结果的地物游标对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Search(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据查询过滤条件粗查
\param pFilter 检索过滤条件可以是GsSpatialQueryFilter或者GsQueryFilter类型
\return 返回检索结果的地物游标对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Feature(System.Int64,GeoStar.Kernel.GsFeature*)">
\brief 根据输入的oid获取地物对象
\param nOID 输入的OID
\param pFea 传入地物对象指针，用于接收地物数据，不能为空
\return 返回是否成功获取地物对象。
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Feature(System.Int64)">
\brief 根据输入的oid获取地物对象
\return 返回地物对象
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.CreateFeature">
\brief 创建的一个新的地物对象
\return 返回新建的地物对象指针
</member>
        <member name="M:GeoStar.Kernel.GsFeatureClass.Fields">
\brief 获取地物类的字段信息
\return 字段信息
</member>
        <member name="T:GeoStar.Kernel.GsFeatureClass">
\brief 矢量地物类
\details GIS点、线、面、注记类型的矢量数据读写对象
</member>
        <member name="D:GeoStar.Kernel.GsRowClassPtr">
\brief GsRowClassPtr
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.RowCount(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据查询条件获取属性的数量
\param pFilter 空间或者属性的查询条件
\return 返回满足查询条件的属性的数量
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.Row(System.Int64,GeoStar.Kernel.GsRow*)">
\brief 根据输入的oid获取属性对象
\param nOID 输入的OID
\param pRow 传入属性对象指针，用于接收属性数据，不能为空
\return 返回是否成功获取属性对象。
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.Row(System.Int64)">
\brief 根据输入的oid获取属性对象
\return 返回属性对象
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.CreateRow">
\brief 创建的一个新的属性对象
\return 返回新建的属性对象指针
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.Fields">
\brief 获取二维表的字段信息
\return 字段信息
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.Search(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据Where子句进行查询
\param strWhere 要检索的where子句
\return 返回检索结果的行游标对象
</member>
        <member name="M:GeoStar.Kernel.GsRowClass.Search(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据查询过滤条件查询
\param pFilter 检索过滤条件
\return 返回检索结果的行游标对象
</member>
        <member name="T:GeoStar.Kernel.GsRowClass">
\brief 二维表数据集
</member>
        <member name="D:GeoStar.Kernel.GsTileClassPtr">
\brief GsTileClassPtr
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Tile(System.Int32,System.Int32,System.Int32,GeoStar.Kernel.GsTile*)">
\brief 根据瓦片行列号检索一个瓦片
\param nLevel 瓦片的级别
\param nRow 瓦片的行
\param nCol 瓦片的列
\param pTile 瓦片
\return 返回瓦片是否存在
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Tile(System.Int32,System.Int32,System.Int32)">
\brief 根据瓦片行列号检索一个瓦片
\param nLevel 瓦片的级别
\param nRow 瓦片的行
\param nCol 瓦片的列
\return 返回该瓦片或者空
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.TileCount(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 检索某个级别某个行列范围的瓦片
\param nLevel 检索的级别
\param nStartRow 开始行
\param nStartCol 开始列
\param nEndRow 结束行
\param nEndCol 开始列
\return 返回该级别瓦片总数
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.TileCount(System.Int32,System.Int32)">
\brief 获取某个级别瓦片的数量
\param nStartLevel 开始级别
\param nEndLevel 结束级别
\return 返回该级别瓦片总数
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.TileCount">
\brief 获取所有瓦片的数量
\return 返回瓦片总数
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.TileColumnInfo">
\brief 获取瓦片基本元信息
\return 返回原信息对象
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.ChangePyramid(GeoStar.Kernel.GsPyramid*)">
\brief 修改瓦片类的金字塔
\param pPyramid 要修改的金字塔对象
\return 返回修改是否成功
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Pyramid">
\brief 获取瓦片类的金字塔。
\return 返回金字塔对象指针
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Search(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 检索某个级别某个行列范围的瓦片
\param nLevel 检索的级别
\param nStartRow 开始行
\param nStartCol 开始列
\param nEndRow 结束行
\param nEndCol 开始列
\return 返回瓦片游标
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Search(System.Int32,System.Int32)">
\brief 检索某个级别到某个级别的瓦片
\param nStartLevel 开始的级别
\param nEndLevel 结束的级别
\return 返回瓦片游标
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.Search">
\brief 检索所有的瓦片
\return 返回瓦片游标
</member>
        <member name="M:GeoStar.Kernel.GsTileClass.CreateTile">
\brief 创建一个新的Tile对象
\return 返回Tile对象的指针
</member>
        <member name="T:GeoStar.Kernel.GsTileClass">
\brief 瓦片数据集
\code{.cpp}
 GsTilePtr ptrTile = ptrTileClass-&gt;CreateTile();
 ptrTile-&gt;Row(r);
 ptrTile-&gt;Level(l);
 ptrTile-&gt;Col(c);
 ptrTile-&gt;Store();
 GsTileCursorPtr ptrCursor=ptrTileClass-&gt;Search();
 GsTilePtr ptrTile = ptrCursor-&gt;Next();
 do{
    DoSomeThing(ptrTile);
  }while(ptrCursor-&gt;Next(ptrTile.p);
\endcode
</member>
        <member name="D:GeoStar.Kernel.GsSelectionSetPtr">
\brief GsSelectionSetPtr
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Combine(GeoStar.Kernel.GsSelectionSet*,GeoStar.Kernel.GsSelectionSetOperation)">
\brief 根据条件将当前 OID 选择集和另一个 OID 选择集进行集合操作，并得到新的 OID 选择集对象
\param pSrcSet 需要合并操作的选择集
\param eOperation 合并操作类型 
\return 返回新的选择集
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Select(GeoStar.Kernel.GsQueryFilter*)">
\brief 根据过滤条件并且在当前选择集范围里查询选择集对应的地物类,得到一个新的选择集
\param pFilter 检索过滤条件
\return 返回新的选择集
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Target">
\brief 获得选择集所属的地物类
\return 返回地物类
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Search(GeoStar.Kernel.GsQueryFilter*)">
\brief 在选择集中查询地物
\param pFilter 检索过滤条件
\return 返回地物游标
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Remove(System.Int64*,System.UInt32)">
\brief 在选择集中删除多个OID
\param pOID 要删除的多个OID的首地址
\param nOIDCount 要删除的OID的数量
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Clear">
\brief 清除所有的OID
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Add(System.Int64*,System.UInt32)">
\brief 往选择集中添加多个OID
\param pOID 要添加的多个OID的首地址
\param nOIDCount 要添加的OID的数量
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Add(System.Int64)">
\brief 往选择集中添加一个OID
\param OID 要添加的OID值
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.EnumIDs">
\brief 获取地物OID枚举器
\details 获取选择集中地物OID的集合
\return 返回地物OID枚举器
</member>
        <member name="M:GeoStar.Kernel.GsSelectionSet.Count">
\brief 获得选择集中地物的数量
\details 获得选择集中地物的数量
\return 返回包含的地物数量
</member>
        <member name="T:GeoStar.Kernel.GsSelectionSet">
\brief 选择集
</member>
        <member name="D:GeoStar.Kernel.GsEnumIDsPtr">
\brief GsEnumIDsPtr
</member>
        <member name="M:GeoStar.Kernel.GsEnumIDs.Reset">
\brief 重置枚举器
\details 调用Reset后，下次调用Next会得到第一个OID
</member>
        <member name="M:GeoStar.Kernel.GsEnumIDs.Next">
\brief 获取下一个地物的OID
\details 每次得到下一个地物的OID
\return 返回下一个地物的OID
</member>
        <member name="T:GeoStar.Kernel.GsEnumIDs">
\brief 地物类OID枚举器
</member>
        <member name="D:GeoStar.Kernel.GsTileCursorPtr">
\brief GsTileCursorPtr
</member>
        <member name="M:GeoStar.Kernel.GsTileCursor.Next(GeoStar.Kernel.GsTile*)">
\brief 获取下一个瓦片对象数据而不用产生新的对象
\details 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的瓦片对象内部。
\param pFea 一个非空瓦片对象的指针
\return 返回是否存在下一个行，如果传入行对象为空则一定返回false
</member>
        <member name="M:GeoStar.Kernel.GsTileCursor.Next">
\brief 获取下一个瓦片对象
\details 每次回生成一个新的瓦片对象
\return 返回下一个瓦片对象的实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsTileCursor">
\brief 瓦片游标
\code{.cpp}
 GsTilePtr ptrTile = ptrCursor-&gt;Next();
 do{
    DoSomeThing(ptrTile);
  }while(ptrCursor-&gt;Next(ptrTile.p);
\endcode
</member>
        <member name="D:GeoStar.Kernel.GsRowCursorPtr">
\brief GsRowCursorPtr
</member>
        <member name="M:GeoStar.Kernel.GsRowCursor.Next(GeoStar.Kernel.GsRow*)">
\brief 获取下一个行对象数据而不用产生新的对象
\details 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的行对象内部。
\param pFea 一个非空行对象的指针
\return 返回是否存在下一个行，如果传入行对象为空则一定范围false
</member>
        <member name="M:GeoStar.Kernel.GsRowCursor.Next">
\brief 获取下一个行对象
\details 每次回生成一个新的行对象
\return 返回下一个行对象的实例或者空
</member>
        <member name="D:GeoStar.Kernel.GsFeatureCursorPtr">
\brief GsFeatureCursorPtr
</member>
        <member name="M:GeoStar.Kernel.GsFeatureCursor.Next(GeoStar.Kernel.GsFeature*)">
\brief 获取下一个地物对象数据而不用产生新的对象
\details 性能更高的方法，以访问者模式将下一个地物的数据设置到传入的地物对象内部。
\param pFea 一个非空地物对象的指针
\return 返回是否存在下一个地物，如果传入地物对象为空则一定范围false
</member>
        <member name="M:GeoStar.Kernel.GsFeatureCursor.Next">
\brief 获取下一个地物对象
\details 每次回生成一个新的地物对象
\return 返回下一个地物对象的实例或者空
</member>
        <member name="T:GeoStar.Kernel.GsFeatureCursor">
\brief 地物游标
\code{.cpp}
 GsFeaturePtr ptrFea = ptrCursor-&gt;Next();
 do{
    DoSomeThing(ptrFea);
  }while(ptrCursor-&gt;Next(ptrFea.p);
\endcode
</member>
        <member name="D:GeoStar.Kernel.GsFeaturePtr">
\brief GsFeaturePtr
</member>
        <member name="M:GeoStar.Kernel.GsFeature.FeatureClass">
\brief 获取地物所在的地物类
\return 返回所在的地物类指针
</member>
        <member name="M:GeoStar.Kernel.GsFeature.GeometryBlob">
\brief 获得Geometry的Blob数据指针
</member>
        <member name="M:GeoStar.Kernel.GsFeature.Geometry(GeoStar.Kernel.GsGeometryBlob*)">
\brief 设置几何数据
\param Geo 几何Blob数据
</member>
        <member name="M:GeoStar.Kernel.GsFeature.Geometry(GeoStar.Kernel.GsGeometry*)">
\brief 设置几何数据
\param Geo 几何对象指针，内部不会拷贝
</member>
        <member name="M:GeoStar.Kernel.GsFeature.Geometry">
\brief 获取几何数据
\return 返回几何对象的指针
</member>
        <member name="F:GeoStar.Kernel.GsFeature.m_OGS">
\brief 几何对象
</member>
        <member name="F:GeoStar.Kernel.GsFeature.m_ptrFeaClass">
\brief 矢量地物所在的地物类
</member>
        <member name="F:GeoStar.Kernel.GsFeature.m_ptrGeo">
\brief 矢量地物几何数据
</member>
        <member name="T:GeoStar.Kernel.GsFeature">
\brief 矢量地物对象
</member>
        <member name="D:GeoStar.Kernel.GsTilePtr">
\brief GsTilePtr
</member>
        <member name="M:GeoStar.Kernel.GsTile.TileDataLength">
\brief 获取瓦片数据长度。
</member>
        <member name="M:GeoStar.Kernel.GsTile.TileDataPtr">
\brief 获取瓦片数据指针
</member>
        <member name="M:GeoStar.Kernel.GsTile.TileData(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设置瓦片数据
</member>
        <member name="M:GeoStar.Kernel.GsTile.TileType(GeoStar.Kernel.GsTileEncodingType)">
\brief 设置瓦片类型
</member>
        <member name="M:GeoStar.Kernel.GsTile.TileType">
\brief 获取瓦片类型
</member>
        <member name="M:GeoStar.Kernel.GsTile.Col(System.Int32)">
\brief 设置列
</member>
        <member name="M:GeoStar.Kernel.GsTile.Col">
\brief 获取列
</member>
        <member name="M:GeoStar.Kernel.GsTile.Row(System.Int32)">
\brief 设置行
</member>
        <member name="M:GeoStar.Kernel.GsTile.Row">
\brief 获取行
</member>
        <member name="M:GeoStar.Kernel.GsTile.Level(System.Int32)">
\brief 设置级别
</member>
        <member name="M:GeoStar.Kernel.GsTile.Level">
\brief 获取级别
</member>
        <member name="M:GeoStar.Kernel.GsTile.KeyToCol(System.Int64)">
\brief 64位key值获取Col值
</member>
        <member name="M:GeoStar.Kernel.GsTile.KeyToRow(System.Int64)">
\brief 64位key值获取Row值
</member>
        <member name="M:GeoStar.Kernel.GsTile.KeyToLevel(System.Int64)">
\brief 64位key值获取Level值
</member>
        <member name="M:GeoStar.Kernel.GsTile.ToKey(System.Int32,System.Int32,System.Int32)">
\brief 层行列转化为64位Key值，Level占6位，Row占24位，Col占24位
</member>
        <member name="T:GeoStar.Kernel.GsTile">
\brief 瓦片对象
</member>
        <member name="D:GeoStar.Kernel.GsRowPtr">
\brief GsRowPtr
</member>
        <member name="M:GeoStar.Kernel.GsRow.Delete">
\brief 从数据库或者文件删除对象
\return 返回删除是否成功
</member>
        <member name="M:GeoStar.Kernel.GsRow.Store">
\brief 保存对象到数据库或文件
\return 返回保存是否成功
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Utility.Data.GsFieldType)">
\brief 根据字段类型设置任意值
\param nColumn 列索引
\param value 无符号64位整数值
\param nSize 值长度
\param eType 字段类型
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32)">
\brief 设置属性值为空
\param nColumn 列索引
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.UInt64)">
\brief 设置无符号64位整数
\param nColumn 列索引
\param value 无符号64位整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Int64)">
\brief 设置64位整数
\param nColumn 列索引
\param value 64位整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设置二进制值
\param nColumn 列索引
\param value 二进制值
\param nSize 二进制值长度
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Double)">
\brief 设置双精度浮点值
\param nColumn 列索引
\param value 双精度浮点值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Single)">
\brief 设置单精度浮点值
\param nColumn 列索引
\param value 单精度浮点值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置字符串值
\param nColumn 列索引
\param value 字符串值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.UInt32)">
\brief 设置无符号32位整数值
\param nColumn 列索引
\param value 整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.Value(System.Int32,System.Int32)">
\brief 设置32位整数值
\param nColumn 列索引
\param nValue 整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueType(System.Int32)">
\brief 获取列的数据类型
\param nColumn 列索引
\return 返回列的数据类型枚举
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueSize(System.Int32)">
\brief 获取值的字节长度
\param nColumn 列索引
\return 返回值的字节长度
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValuePtr(System.Int32)">
\brief 获取值的指针
\param nColumn 列索引
\return 返回值的指针
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueBlob(System.Int32)">
\brief 获取二进制块
\param nColumn 列索引
\return 返回二进制块
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueString(System.Int32)">
\brief 获取字符串值
\param nColumn 列索引
\return 返回字符串值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueDouble(System.Int32)">
\brief 获取双精度浮点值
\param nColumn 列索引
\return 返回双精度浮点值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueFloat(System.Int32)">
\brief 获取单精度浮点值
\param nColumn 列索引
\return 返回单精度浮点值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueUInt64(System.Int32)">
\brief 获取64位无符号整数值
\param nColumn 列索引
\return 返回64位无符号整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueInt64(System.Int32)">
\brief 获取64位整数值
\param nColumn 列索引
\return 返回64位整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueUInt(System.Int32)">
\brief 获取无符号整形值
\param nColumn 列索引
\return 返回32位无符号整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.ValueInt(System.Int32)">
\brief 获取整形值
\param nColumn 列索引
\return 返回32位整数值
</member>
        <member name="M:GeoStar.Kernel.GsRow.OID(System.Int64)">
\brief 设置对象的id
\details 通过设置地物的id为-1改变对象为新对象
\param oid 对象唯一ID
</member>
        <member name="M:GeoStar.Kernel.GsRow.OID">
\brief 获取对象唯一ID
\return 返回唯一ID，如果ID小于0则表示对象为新的未存储对象
</member>
        <member name="F:GeoStar.Kernel.GsRow.m_nOID">
\brief 矢量地物对象唯一ID
</member>
        <member name="M:GeoStar.Kernel.GsTileColumnInfo.#ctor(GeoStar.Kernel.GsFeatureType,GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从地物类型和范围构造
</member>
        <member name="M:GeoStar.Kernel.GsTileColumnInfo.#ctor(GeoStar.Kernel.GsTileColumnInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造
</member>
        <member name="M:GeoStar.Kernel.GsTileColumnInfo.#ctor">
\brief 缺省构造
</member>
        <member name="F:GeoStar.Kernel.GsTileColumnInfo.ValidBottomLevel">
\brief 有效的底层级别
</member>
        <member name="F:GeoStar.Kernel.GsTileColumnInfo.ValidTopLevel">
\brief 有效的顶层级别
</member>
        <member name="F:GeoStar.Kernel.GsTileColumnInfo.XYDomain">
\brief X，Y维度范围
</member>
        <member name="F:GeoStar.Kernel.GsTileColumnInfo.FeatureType">
\brief 地物类型
</member>
        <member name="T:GeoStar.Kernel.GsTileColumnInfo">
\brief 瓦片类基本信息
</member>
        <member name="M:GeoStar.Kernel.GsGeometryColumnInfo.#ctor(GeoStar.Kernel.GsGeometryType,GeoStar.Kernel.GsFeatureType,GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
\brief 从几何类型，地物类型和xy维度范围，z维度范围构造
</member>
        <member name="M:GeoStar.Kernel.GsGeometryColumnInfo.#ctor(GeoStar.Kernel.GsGeometryType,GeoStar.Kernel.GsFeatureType,GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从几何类型，地物类型和xy维度范围构造
</member>
        <member name="M:GeoStar.Kernel.GsGeometryColumnInfo.#ctor(GeoStar.Kernel.GsGeometryColumnInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造
</member>
        <member name="M:GeoStar.Kernel.GsGeometryColumnInfo.#ctor">
\brief 缺省构造
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.ZMin">
\brief Z维度范围
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.XYDomain">
\brief X，Y维度范围
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.MapScale">
\brief 比例尺
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.FeatureType">
\brief 地物类型
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.GeometryType">
\brief 几何类型
</member>
        <member name="F:GeoStar.Kernel.GsGeometryColumnInfo.HasZ">
\brief 是否存在Z维度
</member>
        <member name="T:GeoStar.Kernel.GsGeometryColumnInfo">
\brief 几何字段信息
</member>
        <member name="M:GeoStar.Kernel.GsFields.ToXml">
\brief 将字段信息序列化为xml字符串
</member>
        <member name="M:GeoStar.Kernel.GsFields.FindField(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 寻找字段的索引
</member>
        <member name="T:GeoStar.Kernel.GsFields">
\brief 字段集合
</member>
        <member name="M:GeoStar.Kernel.GsField.ToXml">
\brief 将字段信息序列化为xml字符串
</member>
        <member name="M:GeoStar.Kernel.GsField.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Utility.Data.GsFieldType,System.Int32,System.Int32)">
\brief 从名称和类型、精度和小数位构造
\param strName 字段名称
\param eType 字段类型
\param nPrecision 字段精度
\param nScale 字段小数位长度
</member>
        <member name="M:GeoStar.Kernel.GsField.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Utility.Data.GsFieldType)">
\brief 从名称和类型构造
\param strName 字段名称
\param eType 字段类型
</member>
        <member name="M:GeoStar.Kernel.GsField.#ctor(GeoStar.Kernel.GsField!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
</member>
        <member name="F:GeoStar.Kernel.GsField.IsNullable">
\brief 是否允许为空
</member>
        <member name="F:GeoStar.Kernel.GsField.Scale">
\brief 小数位
</member>
        <member name="F:GeoStar.Kernel.GsField.Precision">
\brief 字段精度
</member>
        <member name="F:GeoStar.Kernel.GsField.Type">
\brief 字段类型
</member>
        <member name="F:GeoStar.Kernel.GsField.Name">
\brief 字段名称
</member>
        <member name="T:GeoStar.Kernel.GsField">
\brief 字段
</member>
        <member name="D:GeoStar.Kernel.GsSpatialQueryFilterPtr">
\brief GsSpatialQueryFilterPtr
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.Clone">
\brief 复制过滤条件对象
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.Or(GeoStar.Kernel.GsQueryFilter*)">
\brief 以Or合并两个过滤条件
\param pOther 另外一个合并的条件
\return 返回合并是否成功
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.And(GeoStar.Kernel.GsQueryFilter*)">
\brief 以And合并两个过滤条件
\param pOther 另外一个合并的条件
\return 返回合并是否成功
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.IsMatch(GeoStar.Kernel.GsGeometryBlob*)">
\brief 判断一个传入的Geometry是否符合几何过滤条件。
\param pGeo 要判断的几何对象
\return 返回是否匹配几何过滤条件。
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.IsMatch(GeoStar.Kernel.GsGeometry*)">
\brief 判断一个传入的Geometry是否符合几何过滤条件。
\param pGeo 要判断的几何对象
\return 返回是否匹配几何过滤条件。
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.FilterType(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置查询方式
\param strFilterType 查询方式字符串表达式
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.FilterType">
\brief 获取查询方式
\return 返回查询方式字符串
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.Geometry(GeoStar.Kernel.GsGeometry*)">
\brief 设置空间查询几何对象
\param pGeo 查询的几何对象指针
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.Geometry">
\brief 获取空间查询几何对象
\return 返回查询的几何对象指针
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.#ctor(GeoStar.Kernel.GsGeometry*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从几何对象,where子句和查询方式字符串构造
\param pGeo 查询的几何对象指针
\param strWhere 查询SQL语句where子句
\param strFilterType 查询方式
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.#ctor(GeoStar.Kernel.GsGeometry*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从几何对象和where子句构造
\param pGeo 查询的几何对象指针
\param strWhere 查询SQL语句where子句
</member>
        <member name="M:GeoStar.Kernel.GsSpatialQueryFilter.#ctor(GeoStar.Kernel.GsGeometry*)">
\brief 从几何对象构造
\param pGeo 查询的几何对象指针
</member>
        <member name="F:GeoStar.Kernel.GsSpatialQueryFilter.m_pFilterIndex">
\brief 过滤索引对象，
</member>
        <member name="F:GeoStar.Kernel.GsSpatialQueryFilter.m_strFilterType">
\brief 过滤方式
</member>
        <member name="F:GeoStar.Kernel.GsSpatialQueryFilter.m_ptrGeo">
\brief 空间查询几何对象
</member>
        <member name="T:GeoStar.Kernel.GsSpatialQueryFilter">
\brief 空间属性查询条件
</member>
        <member name="D:GeoStar.Kernel.GsQueryFilterPtr">
\brief GsQueryFilterPtr
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.Clone">
\brief 复制过滤条件对象
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.Or(GeoStar.Kernel.GsQueryFilter*)">
\brief 以Or合并两个过滤条件
\param pOther 另外一个合并的条件
\return 返回合并是否成功
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.And(GeoStar.Kernel.GsQueryFilter*)">
\brief 以And合并两个过滤条件
\param pOther 另外一个合并的条件
\return 返回合并是否成功
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.WhereClause(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置where子句查询条件
\param strWhere SQL查询的where子句
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.WhereClause">
\brief 获取where子句
\return 返回where子句字符串
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.Simplifier">
\brief 获取几何简化的方法
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.Simplifier(GeoStar.Kernel.GsGeometrySimplifier*)">
\brief 设置几何简化的方法
</member>
        <member name="M:GeoStar.Kernel.GsQueryFilter.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从where子句构造
\param strWhere SQL查询的where子句
</member>
        <member name="F:GeoStar.Kernel.GsQueryFilter.m_strWhereClause">
\brief where子句
</member>
        <member name="T:GeoStar.Kernel.GsQueryFilter">
\brief 属性条件查询
</member>
        <member name="D:GeoStar.Kernel.GsGeoDataRoomPtr">
\brief GsGeoDataRoomPtr
</member>
        <member name="M:GeoStar.Kernel.GsGeoDataRoom.ChangeSpatialReference(GeoStar.Kernel.GsSpatialReference*)">
\brief 修改数据集的空间参考
\return 返回修改是否成功
</member>
        <member name="M:GeoStar.Kernel.GsGeoDataRoom.SpatialReference">
\brief 获取数据集的空间参考
\return 返回空间参考对象的指针
</member>
        <member name="M:GeoStar.Kernel.GsGeoDataRoom.Extent(System.Boolean)">
\brief 获取最大外接矩形范围
\param bForce 是否强制获取，强制获取将会从数据表中统计最大范围
\return 返回矩形对象
</member>
        <member name="T:GeoStar.Kernel.GsGeoDataRoom">
\brief 具备地理特性的数据集对象抽象基类
</member>
        <member name="D:GeoStar.Kernel.GsDataRoomPtr">
\brief  声明GsDataRoomPtr智能指针
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.RollbackTransaction">
\brief 取消事务
\return 返回是否取消成功
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.CommitTransaction">
\brief 提交事务
\return 返回是否提交成功
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.StartTransaction">
\brief 启动事务
\return 返回是否成功启动
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.IsTransaction">
\brief 是否处于事务中
\return 返回是否处于事务中
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.Delete">
\brief 删除
\return 返回是否删除成功
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.GeoDatabase">
\brief 数据集所在的数据库对象
\return 返回数据库对象指针
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.Type">
\brief 数据集类型
\return 返回数据集对象的类型
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.Name">
\brief 数据集名称
\return 返回数据集对象的名称
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.Folder">
\brief 数据集所在的目录
\return 返回数据集所在的目录，如果为空则标识数据集在GeoDatabase下
</member>
        <member name="M:GeoStar.Kernel.GsDataRoom.Interrupt">
\brief 打断正在运行中的操作
\return 不支持打断操作的能力则返回false，成功打断或者无须打断都返回true
</member>
        <member name="T:GeoStar.Kernel.GsDataRoom">
\brief 数据集对象基类
</member>
        <member name="T:GeoStar.Kernel.GsSelectionSetOperation">
\brief 选择集操作类型
</member>
        <member name="F:eSelectionSetSymDifference">
\brief 选择集求对称差
</member>
        <member name="F:eSelectionSetDifference">
\brief 选择集求差
</member>
        <member name="F:eSelectionSetIntersection">
\brief 选择集求交
</member>
        <member name="F:eSelectionSetUnion">
\brief 选择集求并
</member>
        <member name="T:GeoStar.Kernel.GsDataRoomType">
\brief 数据集对象类型
</member>
        <member name="F:eRasterClass">
\brief 栅格类
</member>
        <member name="F:eDataRoomFolder">
\brief 数据集的集合
</member>
        <member name="F:eRowClass">
\brief 二维表
</member>
        <member name="F:eTileClass">
\brief 瓦片类
</member>
        <member name="F:eFeatureClass">
\brief 矢量地物类
</member>
        <member name="T:GeoStar.Kernel.GsFeatureType">
\brief 数据集对象类型
</member>
        <member name="F:eTemporalImageTileFeature">
\brief 实现多时相瓦片数据集将级扩充的
</member>
        <member name="F:eDlgTileFeature">
\brief 矢量
</member>
        <member name="F:eHypsographyTileFeature">
\brief 地势
</member>
        <member name="F:ePlaceNameTileFeature">
\brief 地名
</member>
        <member name="F:eDynvectorTileFeature">
\brief 动态矢量
</member>
        <member name="F:ePrevectorTileFeature">
\brief 静态矢量
</member>
        <member name="F:eModeTileFeature">
\brief 模型
</member>
        <member name="F:eTerrainTileFeature">
\brief 地形瓦片
</member>
        <member name="F:eImageTileFeature">
\brief 影像瓦片
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Kernel.GsDataSourceType)">
\brief 根据服务器地址、数据库和用户名密码、端口、数据源类型构造
\param strServer 服务、文件、url地址
\param strDatabase 数据库名称
\param strUser 用户名
\param strPwd 密码
\param nPort 端口
\param sourceType 数据源类型
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 根据服务器地址、数据库和用户名密码、端口构造
\param strServer 服务、文件、url地址
\param strDatabase 数据库名称
\param strUser 用户名
\param strPwd 密码
\param nPort 端口
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据服务器地址、数据库和用户名密码构造
\param strServer 服务、文件、url地址
\param strDatabase 数据库名称
\param strUser 用户名
\param strPwd 密码
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据服务地址、文件路径、url地址和数据库名称构造
\param strServer 服务、文件、url地址
\param strDatabase 数据库名称
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据服务地址、文件路径、url地址构造
\param strServer 服务、文件、url地址
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor(GeoStar.Kernel.GsConnectProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
\param other 需要拷贝的对象
</member>
        <member name="M:GeoStar.Kernel.GsConnectProperty.#ctor">
\brief 缺省构造函数. 
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.DataSourceType">
\brief 数据源类型
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.Port">
\brief 端口号
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.Password">
\brief 密码
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.User">
\brief 用户名
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.Database">
\brief 数据库名称
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.Server">
\brief 数据服务地址或者文件路径
</member>
        <member name="F:GeoStar.Kernel.GsConnectProperty.Version">
\brief 数据库连接信息版本。
</member>
        <member name="T:GeoStar.Kernel.GsConnectProperty">
\brief 数据库连接信息
\details 定义数据库连接的各类信息以及数据库类型等
</member>
        <member name="T:GeoStar.Kernel.GsGeoDatabaseCapbility">
\brief 空间数据库支持的能力
</member>
        <member name="F:eSupportStoreMosaicRasterClass">
\brief 数据源是否支持镶嵌栅格数据存储
</member>
        <member name="F:eSupportStoreRasterClass">
\brief 数据源是否支持栅格数据存储
</member>
        <member name="F:eSupportRecursiveDataRoomFolder">
\brief 数据库是数据集目录多级递归
\details 数据集目录下是否还可以支持数据集目录。
</member>
        <member name="F:eSupportDataRoomFolder">
\brief 数据库是数据集目录
</member>
        <member name="F:eSupportStoreTileClass">
\brief 数据库是否支持瓦片类的存储
</member>
        <member name="F:eSupportStoreRowClass">
\brief 数据库是否支持普通二维表的存储
</member>
        <member name="F:eSupportStoreFeatureClass">
\brief 数据库是否支持矢量地物类的存储
</member>
        <member name="F:eSupportTransaction">
\brief 数据库是否支持事务
</member>
        <member name="T:GeoStar.Kernel.GsDataSourceType">
\brief 数据源类型
</member>
        <member name="F:eDameng">
\brief 达梦数据源
</member>
        <member name="F:eFile">
\brief 所有文件类型的数据源
</member>
        <member name="F:ePostgreSQL">
\brief PostgreSQL数据源
</member>
        <member name="F:eMySQL">
\brief MySQL数据源
</member>
        <member name="F:eOracleSpatial">
\brief OracleSpatial数据源
</member>
        <member name="F:eGeoPackage">
\brief OGC GeoPakcage数据源
</member>
        <member name="F:eShapeFile">
\brief ESRI Shape文件数据源
</member>
        <member name="F:eSqliteFile">
\brief Sqlite文件数据源
</member>
        <member name="F:eUnknownDataSource">
\brief 未知数据源类型
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.OnEndDrawing">
\brief 当结束绘制时发生
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.DrawTop(GeoStar.Kernel.GsGeometry*)">
\brief 绘制顶部
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.Style(GeoStar.Kernel.GsBrushStyle)">
\brief 画笔的式样
</member>
        <member name="M:GeoStar.Kernel.GsBuildingFillSymbol.Style">
\brief 画笔的式样
</member>
        <member name="T:GeoStar.Kernel.GsBuildingFillSymbol">
\brief 建筑符号
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.OnEndDrawing">
\brief 当结束绘制时发生
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 当绘制的时候发生
\details 子类通过覆盖此方法实现实际的绘制
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.GradsColor(GeoStar.Kernel.GsGradsColor*)">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.GradsColor">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.EndColor(GeoStar.Kernel.GsColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.EndColor">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.StartColor(GeoStar.Kernel.GsColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.StartColor">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Interval(System.Int32)">
\brief 渐变色填充的间隔
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Interval">
\brief 渐变色填充的间隔
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Percentage(System.Double)">
\brief 渐变色填充的比率
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Percentage">
\brief 渐变色填充的比率
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Style(GeoStar.Kernel.GsGradsFillStyle)">
\brief 渐变色填充的式样
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.Style">
\brief 渐变色填充的式样
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.GradsAngle">
\brief 渐变色填充的角度
</member>
        <member name="M:GeoStar.Kernel.GsGradsFillSymbol.GradsAngle(System.Double)">
\brief 渐变色填充的角度
</member>
        <member name="T:GeoStar.Kernel.GsGradsFillSymbol">
\brief 渐变填充符号
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.OnEndDrawing">
\brief 当结束绘制时发生
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.YSeparation(System.Double)">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.YSeparation">
\brief y方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.XSeparation(System.Double)">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.XSeparation">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Offset(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Offset">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Tile(System.Boolean)">
\brief 是否平铺
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Tile">
\brief 是否平铺
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.LoadPicture(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存载入图片
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.LoadPicture(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件载入图片
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.YScale(System.Double)">
\brief y方向上的缩放比率
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.YScale">
\brief y方向上的缩放比率
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.XScale(System.Double)">
\brief x方向上的缩放比率
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.XScale">
\brief x方向上的缩放比率
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.TransparentColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置线填充的间隔
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.TransparentColor">
\brief 透明色
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.BackColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 透明色
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.BackColor">
\brief 背景色
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Picture(GeoStar.Utility.GsImage*)">
\brief 设置图片
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Picture">
\brief 获取图片
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Angle(System.Double)">
\brief 设置图片的旋转
</member>
        <member name="M:GeoStar.Kernel.GsPictureFillSymbol.Angle">
\brief 获取图片的旋转
</member>
        <member name="T:GeoStar.Kernel.GsPictureFillSymbol">
\brief 图片填充符号
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Offset(System.Double)">
\brief 线的偏移
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Offset">
\brief 线的偏移
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Separation(System.Double)">
\brief 设置线填充的间隔
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Separation">
\brief 获取线填充的间隔
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.LineSymbol(GeoStar.Kernel.GsLineSymbol*)">
\brief 设置线符号
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.LineSymbol">
\brief 获取线符号
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Angle(System.Double)">
\brief 设置线填充的角度
</member>
        <member name="M:GeoStar.Kernel.GsLineFillSymbol.Angle">
\brief 获取线填充的角度
</member>
        <member name="T:GeoStar.Kernel.GsLineFillSymbol">
\brief 线填充符号
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.YSeparation(System.Double)">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.YSeparation">
\brief y方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.XSeparation(System.Double)">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.XSeparation">
\brief x方向上间隔
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.Offset(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.Offset">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.GridAngle(System.Double)">
\brief 获取格网角度
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.GridAngle">
\brief 获取格网填充时格网的角度
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.Style(GeoStar.Kernel.GsPointFillStyle)">
\brief 设置点符号填充式样
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.Style">
\brief 获取点符号填充式样
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.PointSymbol(GeoStar.Kernel.GsPointSymbol*)">
\brief 设置点符号
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.PointSymbol">
\brief 获取点符号
</member>
        <member name="M:GeoStar.Kernel.GsPointFillSymbol.CreateBitmap">
\brief 点符号生成位图
</member>
        <member name="T:GeoStar.Kernel.GsPointFillSymbol">
\brief 点填充符号
</member>
        <member name="T:GeoStar.Kernel.GsPointFillStyle">
\brief 点符号填充式样
</member>
        <member name="F:ePFS_LabelPoint">
\brief Label点填充
</member>
        <member name="F:ePFS_Random">
\brief 随机填充
</member>
        <member name="F:ePFS_Triangle">
\brief 品形填充
</member>
        <member name="F:ePFS_Grid">
\brief 格网填充
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFillSymbol.Style(GeoStar.Kernel.GsBrushStyle)">
\brief 画笔的式样
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFillSymbol.Style">
\brief 画笔的式样
</member>
        <member name="M:GeoStar.Kernel.GsSimpleFillSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="T:GeoStar.Kernel.GsSimpleFillSymbol">
\brief 简单面符号
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.SplitPath(GeoStar.Kernel.SpatialAnalysis.path*,GeoStar.Kernel.SpatialAnalysis.multi_path*)">
\brief 根据间隔处理单条path（直线或弧线）
\param ptrPath 需要使用Interval间隔打断的path
\return 返回劈裂的path集合
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.OnEndDrawing">
\brief 当结束绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据回收过程
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据准备
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.OnDraw(GeoStar.Kernel.GsGeometryBlob*)">
\brief 当绘制的时候发生
\details 子类通过覆盖此方法实现实际的绘制
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重写父类方法。设置线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Color">
\brief 重写父类方法。获取线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Width(System.Double)">
\brief 重写父类方法。设置线符号的宽度,单位毫米
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Width">
\brief 重写父类方法。获取线符号的宽度,单位毫米
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.LineSymbol(GeoStar.Kernel.GsLineSymbol*)">
\brief 设置线型符号
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.LineSymbol">
\berif 获取线型符号
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Interval(System.Double)">
\brief 设置单线之间的间隔
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Interval">
\brief 获取单线之间的间隔
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.#ctor(GeoStar.Kernel.GsLineSymbol*)">
\brief 构造函数，使用给定的线符号进行导线的绘制
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\brief 构造函数，使用给定的颜色和宽度构造简单线符号进行导线的绘制
</member>
        <member name="M:GeoStar.Kernel.GsLeadConnectedLineSymbol.#ctor">
\brief 构造函数，无参构造函数使用简单线符号进行导线的绘制
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.MiterLimit(System.Double)">
\brief 设置制图线的线端斜面接合限值
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.MiterLimit">
\brief 获取制图线的线端斜面接合限值
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.JoinStyle(GeoStar.Kernel.GsLineJoinStyle)">
\brief 设置接头类型
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.JoinStyle">
\brief 获取接头类型
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.CapStyle(GeoStar.Kernel.GsLineCapStyle)">
\brief 设置端套类型
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.CapStyle">
\brief 获取端套类型
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.OnDraw(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 绘制Canvas的path
</member>
        <member name="M:GeoStar.Kernel.GsCartographicLineSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\details 线、或者面的子类符号可以覆盖此方法进行绘制。此方法在GeometryOperator方法之后被调用
</member>
        <member name="T:GeoStar.Kernel.GsCartographicLineSymbol">
\brief 制图线符号
</member>
        <member name="T:GeoStar.Kernel.GsLineJoinStyle">
\brief 制图线接合类型
</member>
        <member name="T:GeoStar.Kernel.GsLineCapStyle">
\brief 制图线端套类型
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.Angle(System.Double)">
\brief 设置子线和原线的夹角
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.Angle">
\brief 获取子线和原线的夹角
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.LineSymbol(GeoStar.Kernel.GsLineSymbol*)">
\brief 设置线符号
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.LineSymbol">
\brief 返回线符号
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.OnDrawSub(GeoStar.Kernel.GsPoint*,System.Double)">
\brief 根据点位置和角度来做实际绘制
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.OnEndDrawing">
\brief 结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsHashLineSymbol.OnStartDrawing">
\brief 开始绘制
</member>
        <member name="T:GeoStar.Kernel.GsHashLineSymbol">
\brief 图框线符号
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.CalcuBitmapPosition(GeoStar.Kernel.SpatialAnalysis.path*,GeoStar.Kernel.GsSymbolLocateDirectionType)">
\brief 根据屏幕坐标计算贴图坐标
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.DrawBitmap(System.Single,System.Single)">
\brief 绘制图片
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.FilterVertex">
\brief 根据GsSymbolLocateEndsType过滤顶点
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.InitProp">
\brief 初始化成员
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.CreateSymbolBitmap">
\brief 点符号生成位图
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 以Geomathd的path进行绘制
\details 线、或者面的子类符号可以覆盖此方法进行绘制。此方法在GeometryOperator方法之后被调用
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.LocateEnds">
\brief 获取端点绘制方式
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.LocateEnds(GeoStar.Kernel.GsSymbolLocateEndsType)">
\brief 设置端点绘制方式
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.LocateDirection">
\brief 获取点符号方向
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.LocateDirection(GeoStar.Kernel.GsSymbolLocateDirectionType)">
\brief 设置点符号方向
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.PointSymbol">
\brief 获得点符号
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.PointSymbol(GeoStar.Utility.GsSmarterPtr&lt;GeoStar.Kernel.GsPointSymbol&gt;)">
\brief 设置点符号
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.#ctor(GeoStar.Utility.GsSmarterPtr&lt;GeoStar.Kernel.GsPointSymbol&gt;)">
\brief 通过点符号构造
</member>
        <member name="M:GeoStar.Kernel.GsLocatePointLineSymbol.#ctor">
\brief 默认构造
</member>
        <member name="T:GeoStar.Kernel.GsLocatePointLineSymbol">
\brief 定位点线符号
</member>
        <member name="T:GeoStar.Kernel.GsSymbolLocateEndsType">
\brief 端点类型
</member>
        <member name="F:eLocateBoth">
\brief 绘两端点
</member>
        <member name="F:eLocateEnd">
\brief 仅绘终点
</member>
        <member name="F:eLocateBegin">
\brief 仅绘起点
</member>
        <member name="F:eLocateNone">
\brief 不绘端点
</member>
        <member name="T:GeoStar.Kernel.GsSymbolLocateDirectionType">
\brief 点符号方向
</member>
        <member name="F:eDirectionBisector">
\brief 角平分线
</member>
        <member name="F:eDirectionBidirectional">
\brief 双侧
</member>
        <member name="F:eDirectionRight">
\brief 右侧
</member>
        <member name="F:eDirectionLeft">
\brief 左侧
</member>
        <member name="F:eDirectionNorth">
\brief 正北方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LoadSidePicture(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 加载四边图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LoadCornerPicture(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 加载四角图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.BottomSideDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置下边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.BottomSideDirection">
\brief 获取下边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightSideDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置右边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightSideDirection">
\brief 获取右边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.TopSideDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置上边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.TopSideDirection">
\brief 获取上边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftSideDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置左边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftSideDirection">
\brief 获取左边图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightBottomDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置右下角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightBottomDirection">
\brief 获取右下角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftBottomDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置左下角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftBottomDirection">
\brief 获取左下角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightTopDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置右上角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.RightTopDirection">
\brief 获取右上角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftTopDirection(GeoStar.Kernel.GsFramePicDirection)">
\brief 设置左上角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.LeftTopDirection">
\brief 获取左上角图片方向
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.UseWidth">
\brief 获取是否使用线宽属性
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.UseWidth(System.Boolean)">
\brief 设置是否使用线宽属性
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.YScale">
\brief 获取Y方向比例因子
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.YScale(System.Double)">
\brief 设置Y方向比例因子
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.XScale">
\brief 获取X方向比例因子
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.XScale(System.Double)">
\brief 设置X方向比例因子
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.BackColor">
\brief 获取背景色
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.BackColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置背景色
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.TransparentColor">
\brief 获取透明色
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.TransparentColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置透明色
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.Offset(System.Double)">
\brief 线的偏移
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.Offset">
\brief 线的偏移
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.SidePicture">
\brief 获取四边的图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.SidePicture(GeoStar.Utility.GsSmarterPtr&lt;GeoStar.Utility.GsImage&gt;)">
\brief 设置四边的图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.CornerPicture">
\brief 获取四角的图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.CornerPicture(GeoStar.Utility.GsSmarterPtr&lt;GeoStar.Utility.GsImage&gt;)">
\brief 设置四角的图片
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.GeometryOperator(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 几何数据操作
\details 子类通过覆盖此函数实现绘制前对几何数据的处理，例如计算平行线
</member>
        <member name="M:GeoStar.Kernel.GsFrameLineSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 以Geomathd的path进行绘制
\details 线、或者面的子类符号可以覆盖此方法进行绘制。此方法在GeometryOperator方法之后被调用
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_XScale">
\brief X、Y方向比例因子
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_bUseWidth">
\brief 是否使用线宽属性
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_pTransparentColor">
\brief 透明色，背景色
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_ptrCorner">
\brief 角落和边的的图片。
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_CornerImage">
\brief 角落的图片和边上的图片内存块
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_dblOffset">
\brief 线的偏移
</member>
        <member name="F:GeoStar.Kernel.GsFrameLineSymbol.m_ElementDirection">
\brief 记录8个元素位置的方向
</member>
        <member name="T:GeoStar.Kernel.GsFrameLineSymbol.GsFrameElement">
\brief 定义图框线的8个位置
</member>
        <member name="T:GeoStar.Kernel.GsFrameLineSymbol">
\brief 图框线符号
</member>
        <member name="T:GeoStar.Kernel.GsFramePicDirection">
\brief 图框线图片方向
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.PointSymbol">
\brief 获取点线符号中的点符号
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.PointSymbol(GeoStar.Kernel.GsPointSymbol*)">
\brief 设置点线符号中的点符号
\param pPointSymbol 点符号的指针
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.#ctor(GeoStar.Kernel.GsPointSymbol*,GeoStar.Kernel.GsSymbolTemplate)">
\brief 传入点符号和模板构建
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.#ctor(GeoStar.Kernel.GsPointSymbol*)">
\brief 传入点符号构建
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.#ctor">
\brief 默认构造函数
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.IsValid">
\brief 判断是否可以绘制，SymbolTemplate和PointSymbol非空
</member>
        <member name="M:GeoStar.Kernel.GsPointLineSymbol.OnDrawSub(GeoStar.Kernel.GsPoint*,System.Double)">
\brief 绘制点
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.Offset">
\brief 获取线模板的偏移量
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.Offset(System.Double)">
\brief 设置线模板的偏移量
\param offset 线模板的偏移量
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.SymbolTemplate(GeoStar.Kernel.GsSymbolTemplate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置线符号模版属性
\param pTemplate 模版对象的指针
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.SymbolTemplatePtr">
\brief 获取线符号模版的指针
\return 返回线符号模版的指针
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.SymbolTemplate">
\brief 获取线符号模版属性
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 以Geomathd的path进行绘制
\details 线、或者面的子类符号可以覆盖此方法进行绘制。此方法在GeometryOperator方法之后被调用
</member>
        <member name="M:GeoStar.Kernel.GsTemplateLineSymbol.GeometryOperator(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 几何数据操作
\details 子类通过覆盖此函数实现绘制前对几何数据的处理，例如计算平行线
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.MakePattern">
\brief 返回模板序列的首地址
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Reset">
\brief 重置线模板
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Add(System.Single,System.Single)">
\brief 加入一个线模板
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Add(GeoStar.Kernel.GsPattern!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 加入一个线模板
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Interval(System.Single)">
\brief 设置线的倍率
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Interval">
\brief 获得线的倍率
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Offset(System.Single)">
\brief 设置线的偏移量
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Offset">
\brief 获得线的偏移量
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Kernel.GsSymbolTemplate.#ctor">
\brief 构造函数  
</member>
        <member name="F:GeoStar.Kernel.GsSymbolTemplate.m_fOffset">
\brief 线头方向的偏移量
</member>
        <member name="T:GeoStar.Kernel.GsSymbolTemplate">
\brief 
</member>
        <member name="M:GeoStar.Kernel.GsSimpleLineSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsSimpleLineSymbol.LineStyle(GeoStar.Kernel.GsPenStyle)">
\brief 设置线的类型
</member>
        <member name="M:GeoStar.Kernel.GsSimpleLineSymbol.LineStyle">
\brief 获取线的类型
</member>
        <member name="M:GeoStar.Kernel.GsSimpleLineSymbol.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\brief 从颜色和线宽构造
</member>
        <member name="M:GeoStar.Kernel.GsSimpleLineSymbol.OnDraw(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 绘制Canvas的path
</member>
        <member name="T:GeoStar.Kernel.GsSimpleLineSymbol">
\brief 简单线符号
</member>
        <member name="D:GeoStar.Kernel.GsMultiPointSymbolPtr">
\brief GsMultiPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.MultiSize">
\brief Multi符号外框的大小
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Envelope">
\brief 点符号的矩形范围
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Offset(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.OffsetY(System.Double)">
\brief y偏移
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.OffsetX(System.Double)">
\brief x偏移
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Angle(System.Double)">
\brief 设置旋转角
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Angle">
\brief 获取旋转角
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置颜色
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Color">
\brief 颜色
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Size(System.Double)">
\brief 设置符号大小
</member>
        <member name="M:GeoStar.Kernel.GsMultiPointSymbol.Size">
\brief 符号大小
</member>
        <member name="T:GeoStar.Kernel.GsMultiPointSymbol">
\brief 复合点符号
</member>
        <member name="D:GeoStar.Kernel.GsQRCodePointSymbolPtr">
\brief GsQRCodePointSymbol
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.DataType">
\brief 获取数据的类型
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.QRData(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置字符串的数据
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.QRData(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设置任意二进制的数据
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.QRData">
\brief 二维码显示的原始数据
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.LogoPictureData">
\brief 置于二维码中心的图片数据
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.BackColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 背景颜色
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.BackColor">
\brief 背景颜色
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.LogoPictureRatio(System.Double)">
\brief 二维码中心图片占用的比率
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.LogoPictureRatio">
\brief 二维码中心图片占用的比率
\details 介于0.1~0.3之间，过大会遮挡过多二维码导致无法识别，过小中心图片看不清
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.LogoPicture">
\brief 置于二维码中心的标示图片
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.PageIndex(System.Int32)">
\brief 多个二维码编码对象时编码某个页面
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.PageIndex">
\brief 多个二维码编码对象时编码某个页面
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.QRCodePtr">
\brief 获取二维码编码对象
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.BorderSize(System.Double)">
\brief 二维码边框留白的大小
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.BorderSize">
\brief 二维码边框留白的大小
</member>
        <member name="M:GeoStar.Kernel.GsQRCodePointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsQRCodePointSymbol">
\brief 二维码点符号
</member>
        <member name="D:GeoStar.Kernel.GsTextPointSymbolPtr">
\brief GsTextPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Italic">
\brief 获取倾斜类型
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Italic(GeoStar.Kernel.GsItalic)">
\brief 设置倾斜类型
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Stroke">
\brief 获取空心标识
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Stroke(System.Boolean)">
\brief 设置空心标识
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Bold">
\brief 获取加粗标识
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Bold(System.Boolean)">
\brief 设置加粗标识
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Text(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置字符内容
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Text">
\brief 获取字符内容
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Font(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置字体
</member>
        <member name="M:GeoStar.Kernel.GsTextPointSymbol.Font">
\brief 获取字体
</member>
        <member name="T:GeoStar.Kernel.GsTextPointSymbol">
\brief 文本点符号
</member>
        <member name="D:GeoStar.Kernel.GsRectanglePointSymbolPtr">
\brief GsRectanglePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsRectanglePointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsRectanglePointSymbol">
\brief 矩形点符号
</member>
        <member name="D:GeoStar.Kernel.GsPolylinePointSymbolPtr">
\brief GsPolylinePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsPolylinePointSymbol.Width(System.Double)">
\brief 设置折线点的宽度
</member>
        <member name="M:GeoStar.Kernel.GsPolylinePointSymbol.Width">
\brief 获取折线点的宽度
</member>
        <member name="M:GeoStar.Kernel.GsPolylinePointSymbol.#ctor(std.vector&lt;GeoStar.Kernel.GsRawPoint&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从颜色和size构造
</member>
        <member name="T:GeoStar.Kernel.GsPolylinePointSymbol">
\brief 折线点符号
</member>
        <member name="D:GeoStar.Kernel.GsPicturePointSymbolPtr">
\brief GsPicturePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.LoadPicture(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存块载入图片。
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.LoadPicture(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件载入图片
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.OriginalState(GeoStar.Kernel.GsPictureKeepOrigin)">
\brief 设置图片锁定状态
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.OriginalState">
\brief 获取图片锁定状态
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Height(System.Double)">
\brief 设置图片高度(单位毫米)
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Height">
\brief 获取图片高度(单位毫米)
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Width(System.Double)">
\brief 设置图片宽度(单位毫米)
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Width">
\brief 获取图片宽度(单位毫米)
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Picture(GeoStar.Utility.GsImage*)">
\brief 设置图片对象
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.PictureData">
\brief 获取图片的数据
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Picture">
\brief 获取图片对象
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.BackColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置背景色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.BackColor">
\brief 获取背景色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.UseBackColor(System.Boolean)">
\brief 设置是否使用背景色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.UseBackColor">
\brief 获取是否使用背景色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.TransparentColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置要透明的颜色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.TransparentColor">
\brief 获取要透明的颜色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Transparent(System.Boolean)">
\brief 设置是否使用透明色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Transparent">
\brief 获取是否使用透明色
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 路径导入图片构造函数
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.#ctor">
\brief 无参构造函数
</member>
        <member name="M:GeoStar.Kernel.GsPicturePointSymbol.Envelope">
\brief 点符号的矩形范围
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_ptrBrush">
\brief 画刷
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_ImageData">
\brief 图片的真实数据
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_ptrImage">
\brief 图片对象
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_OriginalState">
\brief 锁定类型
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_Rect">
\brief 矩形框
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_dblHeight">
\brief 高度
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_dblWidth">
\brief 宽度
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_BackColor">
\brief 背景色
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_bUseBackColor">
\brief 是否使用背景色
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_TransColor">
\brief 要透明的颜色
</member>
        <member name="F:GeoStar.Kernel.GsPicturePointSymbol.m_bTrans">
\brief 是否使用透明色
</member>
        <member name="T:GeoStar.Kernel.GsPicturePointSymbol">
\brief 图片点符号
</member>
        <member name="T:GeoStar.Kernel.GsPictureKeepOrigin">
\brief 锁定类型
</member>
        <member name="D:GeoStar.Kernel.GsCurvegonPointSymbolPtr">
\brief GsCurvegonPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsCurvegonPointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsCurvegonPointSymbol">
\brief 由贝塞尔曲线构成的面点符号
</member>
        <member name="D:GeoStar.Kernel.GsChordPointSymbolPtr">
\brief GsChordPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.Size(System.Double)">
\brief 设置符号大小,跟据设置的大小，调整长短轴
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.EndAngle(System.Double)">
\brief 设置结束角度
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.EndAngle">
\brief 获取结束角度
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.StartAngle(System.Double)">
\brief 设置开始角度
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.StartAngle">
\brief 截取圆中arc的起始角度
</member>
        <member name="M:GeoStar.Kernel.GsChordPointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsChordPointSymbol">
\brief 弦点符号
</member>
        <member name="D:GeoStar.Kernel.GsAsteriskPointSymbolPtr">
\brief GsAsteriskPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.InnerStartAngle(System.Double)">
\brief 设置内角的开始角度
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.InnerStartAngle">
\brief 获取内角的开始角度
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.InterStartAngle(System.Double)">
\brief 设置外角的开始角度
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.InterStartAngle">
\brief 获取外角的开始角度
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.Corners(System.Int32)">
\brief 设置星型角的数量
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.Corners">
\brief 获取星型角的数量
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.AsterType(GeoStar.Kernel.GsAsteriskType)">
\brief 设置星型的类型
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.AsterType">
\brief 获取星型的类型
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.Rate(System.Double)">
\brief 设置比例
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.Rate">
\brief 比例
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.OnEndDrawing">
\brief 符号结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.OnStartDrawing">
\brief 符号开始绘制
</member>
        <member name="M:GeoStar.Kernel.GsAsteriskPointSymbol.OnPointDraw">
\brief 绘制点
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_ptrPath">
\brief 星形路径
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_InnerStartAngle">
\brief 开始内角
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_InterStartAngle">
\brief 开始外交
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_rate">
\brief 比例
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_nCorners">
\brief 角数量
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_Asterisk">
\brief 类型
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_ptrBrush">
\brief 填充
</member>
        <member name="F:GeoStar.Kernel.GsAsteriskPointSymbol.m_ptrPen">
\brief 边线
</member>
        <member name="T:GeoStar.Kernel.GsAsteriskPointSymbol">
\brief 星形点符号
</member>
        <member name="T:GeoStar.Kernel.GsAsteriskType">
\brief 星形的类型
</member>
        <member name="F:eAsteristkRadiation">
\brief 辐射型
</member>
        <member name="F:eAsteristkInternal">
\brief 内接型
</member>
        <member name="F:eAsteristkCross">
\brief 交叉型
</member>
        <member name="F:eAsteristkOrdination">
\brief 普通型
</member>
        <member name="D:GeoStar.Kernel.GsArcPointSymbolPtr">
\brief GsArcPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.LineWidth(System.Single)">
\brief 设置符号的线宽
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.LineWidth">
\brief 符号的线宽
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.EndAngle(System.Double)">
\brief 设置截取圆中arc的终止角度
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.StartAngle(System.Double)">
\brief 设置截取圆中arc的起始角度
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.EndAngle">
\brief 截取圆中arc的终止角度
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.StartAngle">
\brief 截取圆中arc的起始角度
</member>
        <member name="M:GeoStar.Kernel.GsArcPointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsArcPointSymbol">
\brief 圆弧点符号
</member>
        <member name="M:GeoStar.Kernel.GsPolygonPointSymbol.#ctor(std.vector&lt;GeoStar.Kernel.GsRawPoint&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从颜色和size构造
</member>
        <member name="T:GeoStar.Kernel.GsPolygonPointSymbol">
\brief 面点符号
</member>
        <member name="M:GeoStar.Kernel.GsCurvelinePointSymbol.Width(System.Double)">
\brief 设置线宽度
</member>
        <member name="M:GeoStar.Kernel.GsCurvelinePointSymbol.Width">
\brief 获取线宽度
</member>
        <member name="T:GeoStar.Kernel.GsCurvelinePointSymbol">
\brief 曲线点符号
</member>
        <member name="D:GeoStar.Kernel.GsLinePointSymbolPtr">
\brief GsLinePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.Envelope">
\brief 点符号的矩形范围
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.Size(System.Double)">
\brief 设置符号大小
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.Size">
\brief 符号大小
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.Width">
\brief 获取线宽度
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.Width(System.Double)">
\brief 设置线宽度
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.EndPoint">
\brief 获取LinePoint的终点
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.EndPoint(System.Double,System.Double)">
\brief 设置LinePoint的终点坐标
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.StartPoint">
\brief 获取LinePoint的起点
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.StartPoint(System.Double,System.Double)">
\brief 设置LinePoint的起点坐标
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\brief 从颜色和线宽构造
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.#ctor">
\brief 默认构造函数
</member>
        <member name="M:GeoStar.Kernel.GsLinePointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsLinePointSymbol">
\brief 线的点符号。
</member>
        <member name="D:GeoStar.Kernel.GsPiePointSymbolPtr">
\brief GsPiePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsPiePointSymbol.EndAngle">
\brief 获取Pie结束角度
</member>
        <member name="M:GeoStar.Kernel.GsPiePointSymbol.EndAngle(System.Double)">
\brief 设置Pie结束角度
</member>
        <member name="M:GeoStar.Kernel.GsPiePointSymbol.StartAngle">
\brief 获取Pie开始角度
</member>
        <member name="M:GeoStar.Kernel.GsPiePointSymbol.StartAngle(System.Double)">
\brief 设置Pie开始角度
</member>
        <member name="T:GeoStar.Kernel.GsPiePointSymbol">
\brief pie符号
</member>
        <member name="D:GeoStar.Kernel.GsEllipsePointSymbolPtr">
\brief GsEllipsePointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsEllipsePointSymbol.OnPointDraw">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="T:GeoStar.Kernel.GsEllipsePointSymbol">
\brief 椭圆的点符号。
</member>
        <member name="M:GeoStar.Kernel.GsSurfacePointSymbol.LineWidth">
\brief 线的宽度
</member>
        <member name="M:GeoStar.Kernel.GsSurfacePointSymbol.FillColor(GeoStar.Kernel.GsColor)">
\brief 填充的画笔类
</member>
        <member name="M:GeoStar.Kernel.GsSurfacePointSymbol.FillColor">
\brief 填充的画笔类
</member>
        <member name="M:GeoStar.Kernel.GsSurfacePointSymbol.FillType(GeoStar.Kernel.GsBrushStyle)">
\brief 填充的画笔类
</member>
        <member name="M:GeoStar.Kernel.GsSurfacePointSymbol.FillType">
\brief 填充的画笔类
</member>
        <member name="T:GeoStar.Kernel.GsSurfacePointSymbol">
\brief 面类型的点符号抽象基类
</member>
        <member name="M:GeoStar.Kernel.GsSimplePointSymbol.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\brief 从颜色和size构造
</member>
        <member name="T:GeoStar.Kernel.GsSimplePointSymbol">
\brief 简单点符号
</member>
        <member name="D:GeoStar.Kernel.GsPointSymbolPtr">
\brief GsPointSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Envelope">
\brief 点符号的矩形范围
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Offset(System.Double,System.Double)">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Offset(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Offset">
\brief 偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OffsetY(System.Double)">
\brief y偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OffsetX(System.Double)">
\brief x偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OffsetY">
\brief y偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OffsetX">
\brief x偏移
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Angle(System.Double)">
\brief 设置旋转角
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Angle">
\brief 获取旋转角
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置颜色
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Color">
\brief 颜色
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.DesignSize">
\brief 符号大小
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Size(System.Double)">
\brief 设置符号大小
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Size">
\brief 符号大小
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.Type">
\brief 符号类型
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.RecalculateSize">
\brief 重新计算符号的Size
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OnPointDraw(System.Single!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 当绘制点的时候发生
\details 子类通过覆盖此函数实现点的绘制。基类已经实现了地理坐标到屏幕坐标的转换
</member>
        <member name="M:GeoStar.Kernel.GsPointSymbol.OnDraw(GeoStar.Kernel.GsGeometryBlob*)">
\brief 当绘制的时候发生
\details 子类通过覆盖此方法实现实际的绘制
</member>
        <member name="F:GeoStar.Kernel.GsPointSymbol.m_Offset">
\brief xy的偏移
</member>
        <member name="F:GeoStar.Kernel.GsPointSymbol.m_dblAngle">
\brief 旋转角
</member>
        <member name="F:GeoStar.Kernel.GsPointSymbol.m_Color">
\brief 颜色
</member>
        <member name="F:GeoStar.Kernel.GsPointSymbol.m_dblSize">
\brief 大小
</member>
        <member name="T:GeoStar.Kernel.GsPointSymbol">
\brief 点符号
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Assign(GeoStar.Kernel.GsSymbol*,tinyxml2.XMLElement*)">
\brief 为特定的符号解析并配置属性
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Assign(GeoStar.Kernel.GsSymbol*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 为特定的符号解析并配置属性
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.ParserSymbol(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从字符串解析生成符号对象
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.ToString(GeoStar.Kernel.GsSymbol*,GeoStar.Kernel.GsSymbolLibraryFormat)">
\brief 将符号序列化为字符串。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Description(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号库的描述信息。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Description">
\brief 符号库的名称
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号库的名称
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Name">
\brief 符号库的名称
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Save(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存符号库到新的文件。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.SaveToString(GeoStar.Kernel.GsSymbolLibraryFormat)">
\brief 保存符号库到字符串
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Save">
\brief 保存符号库到文件
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Symbols(GeoStar.Kernel.GsSymbolType)">
\brief 返回特定类型的符号。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.SymbolBySchemaCode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据字符串的图式编号查找Code
\details 支持统配查找
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.SymbolByName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据符号的名称查找符号
\details 支持统配查找
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.SymbolByCode(System.Int64)">
\brief 根据符号的Code查找符号
\details 如果存在多个相同的code则返回第一个符号。
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.Symbols">
\brief 保存符号的集合
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.#ctor">
\brief 构造一个空的符号库对象
</member>
        <member name="M:GeoStar.Kernel.GsSymbolLibrary.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 从符号库文件或者符号库xml字符串实例化对象
</member>
        <member name="T:GeoStar.Kernel.GsSymbolLibrary">
\brief 符号库对象。
\details 用于实例化符号库的符号或者生成符号库文件。
</member>
        <member name="T:GeoStar.Kernel.GsSymbolLibraryFormat">
\brief 符号库的格式
</member>
        <member name="F:eGenernalFormat">
\brief 跨平台符号的符号存储格式。
</member>
        <member name="F:eGeoMapDefineFormat">
\brief 地图定义文件的符号存储格式
</member>
        <member name="D:GeoStar.Kernel.GsMultiFillSymbolPtr">
\brief GsMultiFillSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsMultiFillSymbol.FillColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置填充的颜色
</member>
        <member name="M:GeoStar.Kernel.GsMultiFillSymbol.FillColor">
\brief 获取填充的颜色
</member>
        <member name="T:GeoStar.Kernel.GsMultiFillSymbol">
\brief 复合面符号
</member>
        <member name="D:GeoStar.Kernel.GsMultiLineSymbolPtr">
\brief GsMultiLineSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsMultiLineSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsMultiLineSymbol.Color">
\brief 获取线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsMultiLineSymbol.Width(System.Double)">
\brief 设置线符号的宽度,单位毫米
</member>
        <member name="M:GeoStar.Kernel.GsMultiLineSymbol.Width">
\brief 获取线符号的宽度,单位毫米
</member>
        <member name="T:GeoStar.Kernel.GsMultiLineSymbol">
\brief 复合线符号
</member>
        <member name="D:GeoStar.Kernel.GsTextSymbolPtr">
\brief GsTextSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Type">
\brief 返回符号的类型
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowOffsetY(System.Double)">
\brief 设置注记阴影的Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowOffsetY">
\brief 返回注记阴影的Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowOffsetX(System.Double)">
\brief 设置注记阴影的X偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowOffsetX">
\brief 返回注记阴影的X偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置注记阴影的颜色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.ShadowColor">
\brief 返回注记阴影的颜色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.BackgroundColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置注记的背景色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.BackgroundColor">
\brief 返回注记的背景色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.VerticalExtra(System.Double)">
\brief 设置垂直水平间距
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.VerticalExtra">
\brief 获取注记垂直间距
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.HorizonExtra(System.Double)">
\brief 设置注记水平间距
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.HorizonExtra">
\brief 获取注记水平间距
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OffsetY(System.Double)">
\brief 设置注记Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OffsetY">
\brief 获取注记Y偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OffsetX(System.Double)">
\brief 设置注记X偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OffsetX">
\brief 获取注记X偏移
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Angle(System.Double)">
\brief 设置注记旋转角度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Angle">
\brief 获取注记旋转角度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.StyleAngle(System.Double)">
\brief 设置字体风格的倾斜角度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.StyleAngle">
\brief 获取字体风格的倾斜角度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Height(System.Double)">
\brief 设置注记高度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Height">
\brief 获取注记高度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Width(System.Double)">
\brief 设置注记高度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Width">
\brief 获取注记宽度
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.VerticalAlign(GeoStar.Kernel.GsStringAlignment)">
\brief 设置垂直对齐方式
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.VerticalAlign">
\brief 获取垂直对齐方式
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.HorizonAlign(GeoStar.Kernel.GsStringAlignment)">
\brief 设置水平对齐方式
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.HorizonAlign">
\brief 获取水平对齐方式
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Text(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号的文本
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Text">
\brief 返回符号的文本
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Size(System.Single)">
\brief 设置符号的大小
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Size">
\brief 返回符号的大小
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Font(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号的字体
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Font">
\brief 返回符号的字体
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置符号的颜色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Color">
\brief 返回符号的颜色
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.StrikeOut">
\brief 获取删除线标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.StrikeOut(System.Boolean)">
\brief 设置删除线标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.UnderLine">
\brief 获取下划线标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.UnderLine(System.Boolean)">
\brief 设置下划线标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Hollow">
\brief 获取空心标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Hollow(System.Boolean)">
\brief 设置空心标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Bold">
\brief 获取加粗标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Bold(System.Boolean)">
\brief 设置加粗标识
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.TextStyle">
\brief 获取倾斜类型
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.TextStyle(GeoStar.Kernel.GsTextStyle)">
\brief 设置倾斜类型
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.#ctor">
\brief 默认构造函数
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OnEndDrawing">
\brief 当结束绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据回收过程
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据准备
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.OnDraw(GeoStar.Kernel.GsGeometryBlob*)">
\brief 当绘制的时候发生
\details 子类通过覆盖此方法实现实际的绘制
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.CanSimpleDraw">
\brief 符号是否可以用简单绘制实现
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.DrawText(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 将字符串进行整体的绘制
</member>
        <member name="M:GeoStar.Kernel.GsTextSymbol.DrawText(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 绘制一个文本单元
</member>
        <member name="T:GeoStar.Kernel.GsTextSymbol">
\brief 文本符号
</member>
        <member name="T:GeoStar.Kernel.GsTextStyle">
\brief 文本风格（左倾、右倾、左耸、右耸）
</member>
        <member name="F:eTextStyleRightShrug">
\brief 右耸
\details    ╱┃   
\details  ╱  ┃  
\details ┃  ╱
\details ┃╱
</member>
        <member name="F:eTextStyleLeftShrug">
\brief 右耸
\details ┃╲    
\details ┃  ╲  
\details  ╲   ┃
\details     ╲┃
</member>
        <member name="F:eTextStyleRightItalic">
\brief 右倾
\details        ━━
\details      ╱  ╱
\details    ╱  ╱
\details   ━━
</member>
        <member name="F:eTextStyleLeftItalic">
\brief 左倾
\details  ━━
\details  ╲   ╲
\details    ╲   ╲
\details       ━━
</member>
        <member name="F:eTextStyleNormal">
\brief 无倾斜
\details  ━━
\details ┃  ┃
\details ┃  ┃
\details  ━━
\details 
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.Outline(GeoStar.Kernel.GsLineSymbol*)">
\brief 设置边线符号
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.Outline">
\brief 边线符号
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.FillColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置填充的颜色
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.FillColor">
\brief 填充的颜色
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.Type">
\brief 符号类型
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.DrawBlob(GeoStar.Kernel.GsGeometryBlob*)">
\brief 绘制几何对象
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.OnEndDrawing">
\brief 当结束绘制时发生
</member>
        <member name="M:GeoStar.Kernel.GsFillSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
</member>
        <member name="F:GeoStar.Kernel.GsFillSymbol.m_ptrLineSymbol">
\brief 面的边线符号
</member>
        <member name="F:GeoStar.Kernel.GsFillSymbol.m_Color">
\brief 填充颜色
</member>
        <member name="T:GeoStar.Kernel.GsFillSymbol">
\brief 面符号基类
</member>
        <member name="M:GeoStar.Kernel.GsLineSymbol.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsLineSymbol.Color">
\brief 线符号颜色
</member>
        <member name="M:GeoStar.Kernel.GsLineSymbol.Width(System.Double)">
\brief 设置线符号的宽度,单位毫米
</member>
        <member name="M:GeoStar.Kernel.GsLineSymbol.Width">
\brief 线符号的宽度,单位毫米
</member>
        <member name="M:GeoStar.Kernel.GsLineSymbol.Type">
\brief 符号的类型
</member>
        <member name="F:GeoStar.Kernel.GsLineSymbol.m_Color">
\brief 线的颜色
</member>
        <member name="F:GeoStar.Kernel.GsLineSymbol.m_dblWidth">
\brief 线的宽度
</member>
        <member name="T:GeoStar.Kernel.GsLineSymbol">
\brief 线符号基类
</member>
        <member name="D:GeoStar.Kernel.GsSymbolPtr">
\brief GsSymbolPtr
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Clone">
\brief 对符号进行克隆
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Type">
\brief 符号的类型
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.IsValid">
\brief 符号是否有效
\details 符号是否会在画布上绘制内容，如果符号不会在画布上绘制任何的内容则不需要执行绘制过程。
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.DrawBlob(GeoStar.Kernel.GsGeometryBlob*)">
\brief 绘制几何内存块
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Draw(GeoStar.Kernel.GsGeometry*)">
\brief 绘制几何对象
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.EndDrawing">
\brief 结束绘制
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.StartDrawing(GeoStar.Kernel.GsCanvas*,GeoStar.Kernel.GsDisplayTransformation*)">
\brief 开始绘制
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.HasStartDrawing">
\brief 是否已经调用了StartDrawing方法
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.SchemaCode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置图式编号
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.SchemaCode">
\brief 图式编号
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Code(System.Int64)">
\brief 设置符号编码
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Code">
\brief 符号编码
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Description(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号描述
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Description">
\brief 符号描述
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Version(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号版本
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Version">
\brief 符号版本
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置符号名称
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.Name">
\brief 符号名称
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.#ctor">
\brief 缺省构造
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.GeometryOperator(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 几何数据操作
\details 子类通过覆盖此函数实现绘制前对几何数据的处理，例如计算平行线
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.OnDraw(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 绘制Canvas的path
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.OnDraw(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 以Geomathd的path进行绘制
\details 线、或者面的子类符号可以覆盖此方法进行绘制。此方法在GeometryOperator方法之后被调用
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.OnDraw(GeoStar.Kernel.GsGeometryBlob*)">
\brief 当绘制的时候发生
\details 子类通过覆盖此方法实现实际的绘制
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.OnEndDrawing">
\brief 当结束绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据回收过程
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.OnStartDrawing">
\brief 当开始绘制的时候发生
\details 子类通过覆盖此方法实现自定义的数据准备
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.ToDegree(System.Double)">
\brief 弧度转换为度
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.ToRadian(System.Double)">
\brief 度转换为弧度
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.PixelToMap(System.Double)">
\brief 像素长度到地图长度
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.MapToMM(System.Double)">
\brief 地图长度到毫米
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.MMToMap(System.Double)">
\brief 毫米单位到地图长度
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.PixelToMM(System.Double)">
\brief 像素到毫米
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.MMToPoint(System.Double)">
\brief 毫米单位转换为字体的单位磅（point)
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.MMToPixel(System.Double)">
\brief 转换毫米单位长度为像素单位长度
</member>
        <member name="M:GeoStar.Kernel.GsSymbol.CreateGraphicsPath(GeoStar.Kernel.SpatialAnalysis.path*)">
\brief 由空间分析的path构建成可绘制的path
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_ScreenBuff">
\brief 转换显示用的屏幕坐标
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_strCode">
\brief 图示编号，字符串的编码
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_nCode">
\brief 符号编码
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_strDesc">
\brief 符号描述
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_strVersion">
\brief 符号版本
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_strName">
\brief 符号名称
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_ptrDT">
\brief 坐标转换
</member>
        <member name="F:GeoStar.Kernel.GsSymbol.m_ptrCanvas">
\brief 绘制的画布
</member>
        <member name="T:GeoStar.Kernel.GsSymbol">
\brief 符号对象基类
</member>
        <member name="D:GeoStar.Kernel.GsDisplayTransformationPtr">
\brief GsDisplayTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.Matrix">
\brief 地图到屏幕的转换矩阵
\details 屏幕到地图的转换矩阵可以通过矩阵Invert获得。
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.ReferenceScale">
\brief 获取参考比例尺
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.Scale(System.Double)">
\brief 设置比例尺的值
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.Scale">
\brief 获取比例尺分母的值
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.FromPageMeasure(GeoStar.Kernel.GsUnits,System.Double)">
\brief 从纸面单位长度转换为像素单位长度
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.FromMap(System.Double*,System.Int32,System.Int32,System.Int32*)">
\brief 转换地图坐标到设备坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.FromMap(System.Double*,System.Int32,System.Int32,System.Single*)">
\brief 转换地图坐标到设备坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.FromMap(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 转换地图坐标到设备坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.FromMap(System.Double,System.Double,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 转换地图坐标到设备坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.ToMap(System.Int32*,System.Int32,System.Int32,System.Double*)">
\brief 转换设备坐标到地图坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.ToMap(System.Single*,System.Int32,System.Int32,System.Double*)">
\brief 转换设备坐标到地图坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.ToMap(System.Int32,System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 转换设备坐标到地图坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.ToMap(System.Single,System.Single,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 转换设备坐标到地图坐标
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.DeviceExtent(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置范围
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.DeviceExtent">
\brief 设备范围
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.Resolution(System.Double)">
\brief 设置地图分辨率
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.Resolution">
\brief 地图分辨率
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.DPI(System.Single)">
\brief 设置设备分辨率
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.DPI">
\brief 设备分辨率
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.MapExtent(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置地图范围
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.MapExtent">
\brief 地图范围
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.SpatialReference(GeoStar.Kernel.GsSpatialReference*)">
\brief 设置当前空间参考
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.SpatialReference">
\brief 当前空间参考
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.#ctor(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从设备范围和地图范围构造
</member>
        <member name="M:GeoStar.Kernel.GsDisplayTransformation.UnitScale(GeoStar.Kernel.GsUnits)">
\brief 计算单位相对于米的比例。
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_ptrSR">
\brief 设备空间参考
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_fDPI">
\brief 设备分辨率，缺省为96
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_dblScale">
\brief 地图比例尺。
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_dblResolution">
\brief 分辨率，每个像素代表多少地理长度
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_deviceExtent">
\brief 设备范围
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_mapExtent">
\brief 地图范围
</member>
        <member name="F:GeoStar.Kernel.GsDisplayTransformation.m_RefScale">
\brief 参考比例尺
</member>
        <member name="T:GeoStar.Kernel.GsDisplayTransformation">
\brief 显示坐标转换对象
\details 用于实现设备和地图之间的坐标以及长度单位的转换
</member>
        <member name="T:GeoStar.Kernel.GsSymbolType">
\brief 符号的类型
</member>
        <member name="F:eTextSymbol">
\brief 文本符号
</member>
        <member name="F:eFillExtrusionSymbol">
\brief 拔起符号
</member>
        <member name="F:eFillSymbol">
\brief 面符号
</member>
        <member name="F:eLineSymbol">
\brief 线符号
</member>
        <member name="F:ePointSymbol">
\brief 点符号
</member>
        <member name="D:GeoStar.Kernel.GsImageCanvasPtr">
\brief GsImageCanvasPtr  
</member>
        <member name="M:GeoStar.Kernel.GsImageCanvas.Image">
\brief 获取绘制的位图
</member>
        <member name="T:GeoStar.Kernel.GsImageCanvas">
\brief 在位图上会绘制的画布  
</member>
        <member name="D:GeoStar.Kernel.GsCanvasPtr">
\brief GsCanvasPtr  
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.MeasureString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Utility.GsRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsStringFormat*)">
\brief 测试字符串绘制的大小
\returns 返回测试是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Kernel.GsBrush*,GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsStringFormat*)">
\brief 绘制字符串
\returns 返回提交是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Kernel.GsBrush*,GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsStringFormat*)">
\brief 绘制字符串
\returns 返回提交是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Flush">
\brief 提交未提交的绘制数据   
\returns 返回提交是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Clear(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 用特定颜色清空整个画布  
\param color 要清空的颜色  
\returns 返回绘制是否成功 
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawImage(GeoStar.Utility.GsImage*,GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 绘制图片的特定部分到特定范围 
\param pImg 要绘制的图片
\param source 图片要绘制的范围 
\param target 要绘制到的目标范围
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillPath(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.GsBrush*)">
\brief 填充路径 
\param pPath 要填充的路径
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawPath(GeoStar.Kernel.GsGraphicsPath*,GeoStar.Kernel.GsPen*)">
\brief 绘制路径 
\param pPath 要绘制的路径
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillPie(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsBrush*)">
\brief 填充Pie
\param rect Pie所在椭圆的外接矩形范围
\param start_angle 饼的开始角度
\param sweepAngle 饼的旋转角度
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawPie(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\brief 绘制Pie轮廓
\param rect Pie所在椭圆的外接矩形范围
\param start_angle 饼的开始角度
\param sweepAngle 饼的旋转角度
\param pPen 绘制的画笔
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillRectangle(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsBrush*)">
\brief 填充矩形 
\param rect 矩形范围
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillRectangle(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsBrush*)">
\brief 填充矩形 
\param rect 矩形范围
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawRectangle(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsPen*)">
\brief 绘制矩形 
\param rect 矩形范围
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawRectangle(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsPen*)">
\brief 绘制矩形 
\param rect 矩形范围
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillEllipse(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsBrush*)">
\brief 填充椭圆 
\param rect 椭圆的外接矩形范围
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.FillEllipse(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsBrush*)">
\brief 填充椭圆 
\param rect 椭圆的外接矩形范围
\param pBrush 填充的画刷 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawEllipse(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsPen*)">
\brief 绘制椭圆 
\param rect 椭圆的外接矩形范围
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawEllipse(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsPen*)">
\brief 绘制椭圆 
\param rect 椭圆的外接矩形范围
\param pPen 绘制的画笔 
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawArc(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\param rect 圆弧所在椭圆的的矩形范围
\param fStartAngle 圆弧开始的角度（单位度）
\param fSweepAngle 圆弧旋转的角度（单位度）
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawArc(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\param rect 圆弧所在椭圆的的矩形范围
\param fStartAngle 圆弧开始的角度（单位度）
\param fSweepAngle 圆弧旋转的角度（单位度）
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawLine(System.Single*,System.Int32,GeoStar.Kernel.GsPen*)">
\brief 绘制多个点连续的线 
\param pCoord 坐标数组指针，以X，Y坐标连续存储
\param nPointCount 坐标点的数量
\param pPen 绘制的画笔
\returns 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateStringFormat">
\brief 创建字符串格式化话对象
\returns 返回字符串格式化对象
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreatePath">
\brief 创建路径对象 
\returns 返回创建的路径对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateRadialGradientBrush(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 创建颜色辐射渐变画刷
\param StartColor 变化开始的颜色
\param EndColor 变化结束的颜色
\returns 返回创建的画刷对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateLinearGradientBrush(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 创建颜色线性渐变画刷
\param StartColor 变化开始的颜色
\param EndColor 变化结束的颜色
\returns 返回创建的画刷对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateTextureBrush(GeoStar.Utility.GsImage*)">
\brief 创建纹理画刷
\param pImg 画刷使用的纹理
\returns 返回创建的画刷对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateSolidBrush(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 创建颜色画刷
\param color 画刷的颜色 
\returns 返回创建的画刷对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreatePen(GeoStar.Kernel.GsBrush*,System.Single)">
\brief 从画刷创建画笔对象
\param brush 画刷
\param  fWidth 画笔的宽度，像素单位
\returns 返回创建的画笔对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreatePen(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
\brief 创建画笔对象
\param color 画笔的颜色
\param  fWidth 画笔的宽度，像素单位
\returns 返回创建的画笔对象指针
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateCompatibleImageCanvas(System.Int32,System.Int32)">
\brief 创建一个和当前画布兼容的Image画布
\param width　画布的高度
\param height  画布的宽度
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateImage(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存块直接创建图像对象
\param strData　图像的内存块
\param nLen  内存块的长度
\return 返回图像对象
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateImage(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件创建存放于内存中的图像对象
\param strFile　要打开的文件名
\return 返回图像对象
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawImage(GeoStar.Utility.GsImage*,GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 绘制一个位图到指定坐标
\param pImg　要绘制的图片
\param pt　图片左上角对应绘制的坐标y坐标　
\return 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.DrawLine(System.Single,System.Single,System.Single,System.Single,GeoStar.Kernel.GsPen*)">
\brief 绘制一根线段
\param x1　线段的起点x坐标
\param y1　线段的起点y坐标
\param x2　线段的终点x坐标
\param y2　线段的终点y坐标
\param　GsPen　画笔对象
\return 返回绘制是否成功
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Int32*,System.Int32)">
\brief 一段线是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Single*,System.Int32)">
\brief 一个点或者一段线是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 一个线段是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Single,System.Single,System.Single,System.Single)">
\brief 一个线段是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 一个矩形是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 一个矩形是否在画布中可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(GeoStar.Utility.GsPTF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 一个点是否在画布可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(GeoStar.Utility.GsPT*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 一个点是否在画布可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Single,System.Single)">
\brief 一个点是否在画布可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.IsVisible(System.Int32,System.Int32)">
\brief 一个点是否在画布可见
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateRegion(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 创建一个裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.CreateRegion(GeoStar.Kernel.GsGraphicsPath*)">
\brief 创建一个裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Clip">
\brief 获取裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Clip(GeoStar.Kernel.GsRegion*)">
\brief 设置path作为的裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Clip(GeoStar.Kernel.GsGraphicsPath*)">
\brief 设置path作为的裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Clip(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置矩形的裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.ClearClip">
\brief 清除裁切范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.ClipBounds">
\brief 画布裁切的最大矩形范围或者画布的范围
\details 画布如果设置了裁切范围则返回裁切的最大矩形，否则返回画布的范围
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.ResetTransform">
\brief 重置仿射变换矩阵为单位矩阵
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Transform(GeoStar.Kernel.GsMatrixT&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置仿射变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.Transform">
\brief 获取仿射变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.RenderingOrigin(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst)">
\brief 设置绘制起算的原点
</member>
        <member name="M:GeoStar.Kernel.GsCanvas.RenderingOrigin">
\brief 获取绘制起算的原点
</member>
        <member name="F:GeoStar.Kernel.GsCanvas.m_ptrClipRegion">
\brief 裁切范围
</member>
        <member name="F:GeoStar.Kernel.GsCanvas.m_VisibleBound">
\brief 画布的可视范围
</member>
        <member name="F:GeoStar.Kernel.GsCanvas.m_RenderingOrigin">
\brief 绘制起算的原点
</member>
        <member name="F:GeoStar.Kernel.GsCanvas.m_Matrix">
\brief 缺省的矩阵
</member>
        <member name="T:GeoStar.Kernel.GsCanvas">
\brief 画布的抽象基类
\details 通过继承此基类实现不同平台和不同绘制技术的画布。
</member>
        <member name="D:GeoStar.Kernel.GsPenPtr">
\brief GsPenPtr
</member>
        <member name="M:GeoStar.Kernel.GsPen.LineJoin(GeoStar.Kernel.GsPenJoinStyle)">
\brief 设置线衔接类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.LineJoin">
\brief 线衔接类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.EndCap(GeoStar.Kernel.GsPenCapStyle)">
\brief 设置线终点的头类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.EndCap">
\brief 线终点的头类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.StartCap(GeoStar.Kernel.GsPenCapStyle)">
\brief 设置线起点的头类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.StartCap">
\brief 线起点的头类型
</member>
        <member name="M:GeoStar.Kernel.GsPen.MiterLimit(System.Single)">
\brief 设置线衔接尖头限制
</member>
        <member name="M:GeoStar.Kernel.GsPen.MiterLimit">
\brief 线衔接尖头限制
</member>
        <member name="M:GeoStar.Kernel.GsPen.DashPattern">
\brief 自定义点划线的模板
</member>
        <member name="M:GeoStar.Kernel.GsPen.DashPattern(std.vector&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置自定义点划线的模板
</member>
        <member name="M:GeoStar.Kernel.GsPen.DashOffset">
\brief 获取点线、点划线偏移量
</member>
        <member name="M:GeoStar.Kernel.GsPen.DashOffset(System.Single)">
\brief 点线、点划线偏移量
</member>
        <member name="M:GeoStar.Kernel.GsPen.Style(GeoStar.Kernel.GsPenStyle)">
\brief 设置画笔式样
</member>
        <member name="M:GeoStar.Kernel.GsPen.Style">
\brief 画笔式样
</member>
        <member name="M:GeoStar.Kernel.GsPen.Width(System.Single)">
\brief 设置宽度
</member>
        <member name="M:GeoStar.Kernel.GsPen.Width">
\brief 宽度
</member>
        <member name="M:GeoStar.Kernel.GsPen.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置颜色
</member>
        <member name="M:GeoStar.Kernel.GsPen.Color">
\brief 颜色
</member>
        <member name="M:GeoStar.Kernel.GsPen.Brush(GeoStar.Kernel.GsBrush*)">
\brief 设置画刷
</member>
        <member name="M:GeoStar.Kernel.GsPen.Brush">
\brief 获取画刷
</member>
        <member name="M:GeoStar.Kernel.GsPen.#ctor(GeoStar.Kernel.GsBrush*,System.Single)">
\brief 从画刷构建画笔
</member>
        <member name="M:GeoStar.Kernel.GsPen.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
\brief 从颜色和宽度构造画笔
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_ptrBrush">
\brief 画笔使用的画刷。
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_eLineJoin">
\brief 线衔接类型
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_eStartCap">
\brief 线开始和结束头类型
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_fMiterLimit">
\brief 线衔接尖头限制
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_fDashOffset">
\brief 画笔偏移长度
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_vecDashPattern">
\brief 画笔的模板
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_ePenStyle">
\brief 画笔的类型
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_fWidth">
\brief 画笔的宽度
</member>
        <member name="F:GeoStar.Kernel.GsPen.m_Color">
\brief 画笔的颜色
</member>
        <member name="T:GeoStar.Kernel.GsPen">
\brief 画笔对象
</member>
        <member name="D:GeoStar.Kernel.GsRadialGradientBrushPtr">
\brief GsRadialGradientBrushPtr
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.Radius(System.Single!System.Runtime.CompilerServices.IsConst)">
\brief 设置辐射半径
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.Radius">
\brief 辐射半径
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.CenterPoint(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置辐射中心
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.CenterPoint">
\brief 辐射中心
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.EndColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.EndColor">
\brief 画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.StartColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.StartColor">
\brief 画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从颜色和范围构造画刷
</member>
        <member name="M:GeoStar.Kernel.GsRadialGradientBrush.#ctor">
\brief 默认构造画刷
</member>
        <member name="F:GeoStar.Kernel.GsRadialGradientBrush.m_Radius">
\brief 辐射半径
</member>
        <member name="F:GeoStar.Kernel.GsRadialGradientBrush.m_CenterPoint">
\brief 辐射中心
</member>
        <member name="F:GeoStar.Kernel.GsRadialGradientBrush.m_StartColor">
\brief 画刷的开始结束颜色
</member>
        <member name="T:GeoStar.Kernel.GsRadialGradientBrush">
\brief 使用辐射渐变填充的画刷
</member>
        <member name="D:GeoStar.Kernel.GsLinearGradientBrushPtr">
\brief GsLinearGradientBrushPtr
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.EndPoint(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置渐变的结束位置
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.EndPoint">
\brief 渐变的结束位置
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.StartPoint(GeoStar.Kernel.GsRawPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置渐变的开始位置
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.StartPoint">
\brief 渐变的开始位置
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.EndColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.EndColor">
\brief 画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.StartColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.StartColor">
\brief 画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从颜色和区域构造画刷
</member>
        <member name="M:GeoStar.Kernel.GsLinearGradientBrush.#ctor">
\brief 默认构造画刷
</member>
        <member name="F:GeoStar.Kernel.GsLinearGradientBrush.m_StartPoint">
\brief 画刷的开始结束位置
</member>
        <member name="F:GeoStar.Kernel.GsLinearGradientBrush.m_StartColor">
\brief 画刷的开始结束颜色
</member>
        <member name="T:GeoStar.Kernel.GsLinearGradientBrush">
\brief 使用线型渐变填充的画刷
</member>
        <member name="D:GeoStar.Kernel.GsTextureBrushPtr">
\brief GsTextureBrushPtr
</member>
        <member name="M:GeoStar.Kernel.GsTextureBrush.Transform(GeoStar.Kernel.GsMatrixT&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsTextureBrush.Transform">
\brief 获取变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsTextureBrush.Image(GeoStar.Utility.GsImage*)">
\brief 设置画刷的图像
</member>
        <member name="M:GeoStar.Kernel.GsTextureBrush.Image">
\brief 获取画刷的图像
</member>
        <member name="M:GeoStar.Kernel.GsTextureBrush.#ctor(GeoStar.Utility.GsImage*)">
\brief 从图片构造画刷
</member>
        <member name="T:GeoStar.Kernel.GsTextureBrush">
\brief 使用图片填充的画刷
</member>
        <member name="D:GeoStar.Kernel.GsBrushStylePixelsPtr">
\brief GsBrushStylePixels
</member>
        <member name="T:GeoStar.Kernel.GsBrushStylePixels">
\brief 根据刷子样式获得最小范围(8*8)的像素块，用来填充
</member>
        <member name="D:GeoStar.Kernel.GsSolidBrushPtr">
\brief GsSolidBrushPtr
</member>
        <member name="M:GeoStar.Kernel.GsSolidBrush.Style(GeoStar.Kernel.GsBrushStyle)">
\brief 画笔的式样
</member>
        <member name="M:GeoStar.Kernel.GsSolidBrush.Style">
\brief 画笔的式样
</member>
        <member name="M:GeoStar.Kernel.GsSolidBrush.Color(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsSolidBrush.Color">
\brief 画刷的颜色
</member>
        <member name="M:GeoStar.Kernel.GsSolidBrush.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从颜色构造画刷
</member>
        <member name="F:GeoStar.Kernel.GsSolidBrush.m_Color">
\brief 画刷的颜色
</member>
        <member name="T:GeoStar.Kernel.GsSolidBrush">
\brief 颜色填充画刷对象
</member>
        <member name="D:GeoStar.Kernel.GsBrushPtr">
\brief GsBrushPtr
</member>
        <member name="T:GeoStar.Kernel.GsBrush">
\brief 画刷对象基类
</member>
        <member name="D:GeoStar.Kernel.GsRegionPtr">
\brief GsRegionPtr
</member>
        <member name="M:GeoStar.Kernel.GsRegion.Bounds">
\brief 区域的外接矩形范围
</member>
        <member name="T:GeoStar.Kernel.GsRegion">
\brief 区域对象
\details 标示一个范围，可用于裁切
</member>
        <member name="D:GeoStar.Kernel.GsGraphicsPathPtr">
\brief GsGraphicsPathPtr
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.Envelope">
\brief 范围
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.ResetTransform">
\brief 重置仿射变换矩阵为单位矩阵
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.Transform(GeoStar.Kernel.GsMatrixT&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 设置仿射变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.Transform">
\brief 获取仿射变换矩阵
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Kernel.GsStringFormat*,GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 向path中添加一个字符串。
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddQuadraticBezier(System.Int32*,System.Int32)">
\brief 增加二次贝塞尔曲线
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddQuadraticBezier(System.Single*,System.Int32)">
\brief 增加二次贝塞尔曲线
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddBezier(System.Int32*,System.Int32)">
\brief 增加三次贝塞尔曲线
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddBezier(System.Single*,System.Int32)">
\brief 增加三次贝塞尔曲线
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddArc(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single)">
\brief 增加一段圆弧
\param rect 圆弧所在椭圆的的矩形范围
\param fStartAngle 圆弧开始的角度（单位度）
\param fSweepAngle 圆弧旋转的角度（单位度）
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddLines(System.Int32*,System.Int32)">
\brief 增加一段连续的线段
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddLines(System.Single*,System.Int32)">
\brief 增加一段连续的线段
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
\brief 增加一根线段
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 增加一根线段
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.Reset">
\brief 恢复路径对象为初始状态
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.CloseFigure">
\brief 封闭一个子绘制段
</member>
        <member name="M:GeoStar.Kernel.GsGraphicsPath.StartFigure">
\brief 开始一个子绘制段
</member>
        <member name="T:GeoStar.Kernel.GsGraphicsPath">
\brief 路径对象
\details 复杂线、面绘制数据对象，从GsCanvas::CreatePath()创建
</member>
        <member name="D:GeoStar.Kernel.GsStringFormatPtr">
\brief GsStringFormatPtr
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.LineAlignment(GeoStar.Kernel.GsStringAlignment)">
\brief 行对齐
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.LineAlignment">
\brief 行对齐
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.Alignment(GeoStar.Kernel.GsStringAlignment)">
\brief 列对齐
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.Alignment">
\brief 列对齐
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.FontStyle(GeoStar.Kernel.GsFontStyle)">
\brief 字体式样
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.FontStyle">
\brief 字体式样
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.FontSize">
\brief 设置字体大小,单位像素
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.FontSize(System.Single)">
\brief 设置字体大小,单位像素
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.Font">
\brief 获取字体名称
</member>
        <member name="M:GeoStar.Kernel.GsStringFormat.Font(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置字体名称
</member>
        <member name="T:GeoStar.Kernel.GsStringFormat">
\brief 字符串格式化对象
</member>
        <member name="T:GeoStar.Kernel.GsStringAlignment">
\brief 字符对齐类型
</member>
        <member name="T:GeoStar.Kernel.GsItalic">
\brief 字体的倾斜
</member>
        <member name="F:eLeftItalic">
\brief 左倾斜
</member>
        <member name="F:eRightItalic">
\brief 右倾斜
</member>
        <member name="F:eNormalItalic">
\brief 不倾斜
</member>
        <member name="T:GeoStar.Kernel.GsFontStyle">
\brief 字体的式样
</member>
        <member name="T:GeoStar.Kernel.GsBrushStyle">
\brief 画笔绘制的类型
</member>
        <member name="T:GeoStar.Kernel.GsPenJoinStyle">
\brief 画笔线段衔接类型
</member>
        <member name="F:eRoundJoin">
\brief 圆头
\image html eRoundJoin.png "RoundJoin"
</member>
        <member name="F:eBevelJoin">
\brief 楔形
\image html eBevelJoin.png "BevelJoin"
</member>
        <member name="F:eMiterJoin">
\brief 尖
\image html eMiterJoin.png "MiterJoin"
</member>
        <member name="T:GeoStar.Kernel.GsPenCapStyle">
\brief 画笔端头类型
</member>
        <member name="F:eRoundCap">
\brief 圆头
\image html eRoundCap.png "RoundCap"
</member>
        <member name="F:eSquareCap">
\brief 方头
\image html eSquareCap.png "SquareCap"
</member>
        <member name="F:eFlatCap">
\brief 平头
\image html eFlatCap.png "FlatCap"
</member>
        <member name="T:GeoStar.Kernel.GsPenStyle">
\brief 画笔的类型
</member>
        <member name="F:eCustomDashLine">
\brief 自定义线
\image html eCustomDashLine.png "SolidLine"
</member>
        <member name="F:eDashDotDotLine">
\brief 点点划线
\image html eDashDotDotLine.png "SolidLine"
</member>
        <member name="F:eDashDotLine">
\brief 点划线
\image html eDashDotLine.png "SolidLine"
</member>
        <member name="F:eDotLine">
\brief 点线
\image html eDotLine.png "SolidLine"
</member>
        <member name="F:eDashLine">
\brief 虚线
\image html eDashLine.png "SolidLine"
</member>
        <member name="F:eSolidLine">
\brief 实线
\image html eSolidLine.png "SolidLine"
</member>
        <member name="M:GeoStar.Kernel.GsFormulaGradsColor.Style(GeoStar.Kernel.GsFormulaGradesColorStyle)">
\brief 变换类型
</member>
        <member name="M:GeoStar.Kernel.GsFormulaGradsColor.Style">
\brief 变换类型
</member>
        <member name="T:GeoStar.Kernel.GsFormulaGradsColor">
\brief 方程式渐变色
</member>
        <member name="T:GeoStar.Kernel.GsFormulaGradesColorStyle">
\brief 方程式渐变色
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.To(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 结束颜色
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.To">
\brief 结束颜色
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.From(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 开始颜色
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.From">
\brief 开始颜色
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.Count(System.Int32)">
\brief 颜色数量
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.Count">
\brief 颜色数量
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置名称
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.Name">
\brief 获取名称
</member>
        <member name="M:GeoStar.Kernel.GsGradsColor.Color(System.Int32)">
\brief 获取渐变色
</member>
        <member name="T:GeoStar.Kernel.GsGradsColor">
\brief 渐变色
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Implicit~System.Int32">
\brief 整数重载操作符
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Implicit~System.UInt32">
\brief 无符号整数重载操作符
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Inequality(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 颜色是否不等
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Equality(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 颜色是否相等
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Assign(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 等号操作符
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Assign(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 等号操作符
</member>
        <member name="M:GeoStar.Kernel.GsColor.op_Assign(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 等号操作符
</member>
        <member name="M:GeoStar.Kernel.GsColor.BlueF">
\brief 浮点数B通道值
\return 返回B通道值[0,1]
</member>
        <member name="M:GeoStar.Kernel.GsColor.AlphaF">
\brief 浮点数A通道值
\return 返回A通道值[0,1]
</member>
        <member name="M:GeoStar.Kernel.GsColor.GreenF">
\brief 浮点数G通道值
\return 返回G通道值[0,1]
</member>
        <member name="M:GeoStar.Kernel.GsColor.RedF">
\brief 浮点数R通道值
\return 返回R通道值[0,1]
</member>
        <member name="M:GeoStar.Kernel.GsColor.SetHSV(System.Single,System.Single,System.Single,System.Byte)">
\brief 从HSV颜色设置
\pram h Hue  色调
\pram s Saturation 饱和度
\pram v Value 亮度
</member>
        <member name="M:GeoStar.Kernel.GsColor.SetARGB(System.UInt32)">
\brief 根据ARGB值设置
</member>
        <member name="M:GeoStar.Kernel.GsColor.SetARGBF(System.Single,System.Single,System.Single,System.Single)">
\brief 根据R，G，B，A通道设置颜色值
</member>
        <member name="M:GeoStar.Kernel.GsColor.SetARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
\brief 根据R，G，B，A通道设置颜色值
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToInt">
\brief 转换为32位符号整数
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToHSV(System.Single*,System.Single*,System.Single*)">
\brief 转换HSV的颜色
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToUInt">
\brief 转换为32位无符号整数
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToHtmlRGBA">
\brief 以html的形式返回颜色值rgba(r,g,b,af);
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToHtml">
\brief 以html的形式返回颜色值#RRGGBB
</member>
        <member name="M:GeoStar.Kernel.GsColor.ToCOLORREF">
\brief 转换为win32 RGB颜色值
</member>
        <member name="M:GeoStar.Kernel.GsColor.SetCOLORREF(System.UInt32,System.Byte)">
\brief 用Win32 RGB颜色设置颜色值
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromHSV(System.Single,System.Single,System.Single,System.Byte)">
\brief 从HSV颜色构造
\pram h Hue  色调
\pram s Saturation 饱和度
\pram v Value 亮度
</member>
        <member name="M:GeoStar.Kernel.GsColor.Random">
\brief 生成一个随机的颜色
</member>
        <member name="M:GeoStar.Kernel.GsColor.IsKnownColor">
\brief 是否是已知的颜色。
</member>
        <member name="M:GeoStar.Kernel.GsColor.Name">
\brief 颜色的名称，如果存在的话
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从颜色名称构造 
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromColorF(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
\brief 改变透明度构造已有颜色
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromColor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
\brief 改变透明度构造已有颜色
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromARGBF(System.Single,System.Single,System.Single,System.Single)">
\brief 从浮点R，G，B，A通道构造
\param r 红色通道[0,1]
\param g 绿色通道[0,1]
\param b 蓝色通道[0,1]
\param a 透明通道[0,1]
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
\brief 根据R，G，B，A通道构造
\param r 红色通道[0,255]
\param g 绿色通道[0,255]
\param b 蓝色通道[0,255]
\param a 透明通道[0,255]
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromCOLORREF(System.UInt32)">
\brief 从Win32的RGB颜色构造
</member>
        <member name="M:GeoStar.Kernel.GsColor.FromCSS(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从CSS颜色描述构造
</member>
        <member name="M:GeoStar.Kernel.GsColor.FlipRGB">
\brief 交换RGB中R和B的通道
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
\brief 改变透明度构造已有颜色
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor(GeoStar.Kernel.GsColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
\brief 根据R，G，B，A通道构造
\param r 红色通道[0,255]
\param g 绿色通道[0,255]
\param b 蓝色通道[0,255]
\param a 透明通道[0,255]
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor(System.Int32)">
\brief 根据32位整数构造
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor(System.UInt32)">
\brief 根据32位整数构造
</member>
        <member name="M:GeoStar.Kernel.GsColor.#ctor">
\brief 缺省构造
</member>
        <member name="T:GeoStar.Kernel.GsColor">
\brief 颜色对象
</member>
        <member name="D:GeoStar.Kernel.GsMatrixD">
\brief 双精度矩阵
</member>
        <member name="D:GeoStar.Kernel.GsMatrix">
\brief 单精度矩阵
</member>
        <member name="D:GeoStar.Kernel.GsMultiPyramidPtr">
\brief GsMultiPyramidPtr
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.DevicePosition(GeoStar.Utility.GsRect,System.Int32,System.Int32,GeoStar.Utility.GsRect*,System.Int32)">
\brief 用于确定设备坐标轴方向分别为X方向从左到右，Y轴方向从上到下的情况下，相对这个区域的一个瓦片的裁切区域。
\param GsRect 设置的范围
\param nRow 瓦片的行坐标
\param nCol 瓦片的列坐标
\param position 返回列的范围
\param nLevel 瓦片级别
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.FromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从字符串反序列化
\param str 字符串
\return 返回是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileSpanY(System.Int32,System.Double,System.Double)">
\brief 计算某层的瓦片Y方向上的地理跨度
\param nLevel 瓦片的级别
\param x 测试的x坐标
\param y 测试的y坐标
\return 返回地理跨度
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileSpanX(System.Int32,System.Double,System.Double)">
\brief 计算某层的瓦片X方向上的地理跨度
\param nLevel 瓦片的级别
\param x 测试的x坐标
\param y 测试的y坐标
\return 返回地理跨度
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileExtentRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
\brief 计算一个范围的瓦片行列号覆盖的地理范围
\param nLevel 级别
\param nMinRow 瓦片的最小行坐标
\param nMinCol 瓦片的最小列坐标
\param nMaxRow 瓦片的最大行坐标
\param nMaxCol 瓦片的最大列坐标
\param dblXMin 返回地理范围最小x
\param dblYMin 返回地理范围最小y
\param dblXMax 返回地理范围最大x
\param dblYMax 返回地理范围最大y
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileIndexRange(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
\brief 计算一个地理坐标范围落入的瓦片行列号
\param xmin 地理范围最小x
\param ymin 地理范围最小y
\param xmax 地理范围最大x
\param ymax 地理范围最大y
\param level 级别
\param nMinRow 返回瓦片的最小行坐标
\param nMinCol 返回瓦片的最小列坐标
\param nMaxRow 返回瓦片的最大行坐标
\param nMaxCol 返回瓦片的最大列坐标
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileExtent(System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
\brief 根据瓦片行列号计算瓦片经纬度范围
\param level 级别
\param nRow 瓦片的行坐标
\param nCol 瓦片的列坐标
\param dblXMin 地理范围最小x
\param dblYMin 地理范围最小y
\param dblXMax 地理范围最大x
\param dblYMax 地理范围最大y
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMultiPyramid.TileIndex(System.Int32,System.Double,System.Double,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
\brief 根据层号和地理坐标计算落入的行列号
\param level 级别
\param x 地理x坐标
\param y 地理y坐标
\param nRow 返回瓦片的行坐标
\param nCol 返回瓦片的列坐标
\param pixelX 相对瓦片左上角的像素x坐标
\param pixelY 相对瓦片左上角的像素y坐标
\return 返回计算是否成功
</member>
        <member name="F:GeoStar.Kernel.GsMultiPyramid.ListSubPyramid">
\brief 保存子金字塔的列表
</member>
        <member name="T:GeoStar.Kernel.GsMultiPyramid">
\brief 复合金字塔对象
\details 允许其中的部分或者全部级别都拥有不同的数学基础。
</member>
        <member name="D:GeoStar.Kernel.GsPyramidPtr">
\brief GsPyramidPtr
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.BestLevel(System.Double)">
\brief 从输入的分辨率计算最合适的级别
\param dblRes 分辨率
\return 返回StartLevel到EndLevel之间最为合适的级别。
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.ToString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 序列化成字符串
\param str 输出的序列化字符串
\return 返回是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.FromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从字符串反序列化
\param str 字符串
\return 返回是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileSpanY(System.Int32,System.Double,System.Double)">
\brief 计算某层的瓦片Y方向上的地理跨度
\param nLevel 瓦片的级别
\param x 测试的x坐标
\param y 测试的y坐标
\return 返回地理跨度
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileSpanX(System.Int32,System.Double,System.Double)">
\brief 计算某层的瓦片X方向上的地理跨度
\param nLevel 瓦片的级别
\param x 测试的x坐标
\param y 测试的y坐标
\return 返回地理跨度
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.DevicePosition(GeoStar.Utility.GsRect,System.Int32,System.Int32,GeoStar.Utility.GsRect*,System.Int32)">
\brief 用于确定设备坐标轴方向分别为X方向从左到右，Y轴方向从上到下的情况下，相对这个区域的一个瓦片的裁切区域。
\param GsRect 设置的范围
\param nRow 瓦片的行坐标
\param nCol 瓦片的列坐标
\param position 返回列的范围
\param nLevel 瓦片级别
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileExtentRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
\brief 计算一个范围的瓦片行列号覆盖的地理范围
\param nLevel 级别
\param nMinRow 瓦片的最小行坐标
\param nMinCol 瓦片的最小列坐标
\param nMaxRow 瓦片的最大行坐标
\param nMaxCol 瓦片的最大列坐标
\param dblXMin 返回地理范围最小x
\param dblYMin 返回地理范围最小y
\param dblXMax 返回地理范围最大x
\param dblYMax 返回地理范围最大y
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileIndexRange(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
\brief 计算一个地理坐标范围落入的瓦片行列号
\param xmin 地理范围最小x
\param ymin 地理范围最小y
\param xmax 地理范围最大x
\param ymax 地理范围最大y
\param level 级别
\param nMinRow 返回瓦片的最小行坐标
\param nMinCol 返回瓦片的最小列坐标
\param nMaxRow 返回瓦片的最大行坐标
\param nMaxCol 返回瓦片的最大列坐标
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileExtent(System.Int32,System.Int32,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
\brief 根据瓦片行列号计算瓦片经纬度范围
\param level 级别
\param nRow 瓦片的行坐标
\param nCol 瓦片的列坐标
\param dblXMin 地理范围最小x
\param dblYMin 地理范围最小y
\param dblXMax 地理范围最大x
\param dblYMax 地理范围最大y
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.TileIndex(System.Int32,System.Double,System.Double,System.Int32*,System.Int32*,System.Int32*,System.Int32*)">
\brief 根据层号和地理坐标计算落入的行列号
\param level 级别
\param x 地理x坐标
\param y 地理y坐标
\param nRow 返回瓦片的行坐标
\param nCol 返回瓦片的列坐标
\param pixelX 相对瓦片左上角的像素x坐标
\param pixelY 相对瓦片左上角的像素y坐标
\return 返回计算是否成功
</member>
        <member name="M:GeoStar.Kernel.GsPyramid.CreateDefault">
\brief 设置参数为缺省参数
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.Tolerance">
\brief 金字塔计算使用的常数容差
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.PAI">
\brief 金字塔计算使用的常数PI
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.YMax">
\brief 金字塔的有效范围最大Y
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.XMax">
\brief 金字塔的有效范围最大X
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.YMin">
\brief 金字塔的有效范围最小Y
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.XMin">
\brief 金字塔的有效范围最小X
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.ToY">
\brief 顶级定位瓦片范围结束Y坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.ToX">
\brief 顶级定位瓦片范围结束X坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.FromY">
\brief 顶级定位瓦片范围开始Y坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.FromX">
\brief 顶级定位瓦片范围开始X坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.Name">
\brief 金字塔名称，用于可读性
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.PyramidID">
\brief 金字塔ID，可用于唯一区别金字塔
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.Description">
\brief 金字塔详细描述信息
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.OriginColIndex">
\brief 瓦片行列的起始列坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.OriginRowIndex">
\brief 瓦片行列的起始行坐标
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.TileSizeY">
\brief 瓦片Y方向上的瓦片像素大小
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.TileSizeX">
\brief 瓦片X方向上的瓦片像素大小
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.ScaleY">
\brief 两级之间Y方向上的缩放比例
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.ScaleX">
\brief 两级之间X方向上的缩放比例
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.BottomLevelIndex">
\brief 最下级瓦片的级别索引
</member>
        <member name="F:GeoStar.Kernel.GsPyramid.TopLevelIndex">
\brief 顶级瓦片的级别索引
</member>
        <member name="T:GeoStar.Kernel.GsPyramid">
\brief 单一金字塔模型
\details
↑←→↓
金字塔模型的坐标体系是建立在地图坐标系和设备坐标系以及瓦片坐标系三种坐标系之上的。
下面分别说明两种坐标系的方向：
                 y轴
地图坐标系的方向  ↑/
				 →x轴
---------------------------------------------

设备坐标系的方向   →x轴
                 ↓
				y轴
---------------------------------------------
瓦片坐标系是用户自定义坐标系
其坐标轴方向由用户参数定义。

单一金字塔模型，金字塔从开始级到结束级别采用相同的数学基础。
</member>
        <member name="D:GeoStar.Kernel.GsQIXFileSpatialIndexPtr">
\brief GsQIXFileSpatialIndexPtr
</member>
        <member name="M:GeoStar.Kernel.GsQIXFileSpatialIndex.QueryMultiDimension(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double!System.Runtime.CompilerServices.IsConst*,System.Int32,std.vector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 查询多个维度
\param minBound 维度最小的值
\param maxBound 维度最大的值
\param nDim 要检索的维度
\return 返回是否检索到对象
</member>
        <member name="M:GeoStar.Kernel.GsQIXFileSpatialIndex.Query(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据矩形范围查询相交对象id
\param box 要检索的矩形范围
\param vecResult 返回和检索矩形相交的对象id
\return 返回是否检索到对象
</member>
        <member name="M:GeoStar.Kernel.GsQIXFileSpatialIndex.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从QIX文件名构造
</member>
        <member name="T:GeoStar.Kernel.GsQIXFileSpatialIndex">
\brief 基于本地QIX文件的只读R树空间索引
</member>
        <member name="D:GeoStar.Kernel.GsMemoryRTreeSpatialIndexPtr">
\brief GsMemoryRTreeSpatialIndexPtr
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.QueryMultiDimension(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double!System.Runtime.CompilerServices.IsConst*,System.Int32,std.vector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 查询多个维度
\param minBound 维度最小的值
\param maxBound 维度最大的值
\param nDim 要检索的维度
\return 返回是否检索到对象
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.SaveToQIXFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将索引保存为QIX文件
\details 将内存的索引保存为文件，可以通过GsQIXFileSpatialIndex类打开快速检索。
\param strQIXFile 要保存的文件路径
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.Remove(System.Int32)">
\brief 从空间索引移除一个对象
\param nID 要移除对象的id
\return 移除是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.Add(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
\brief 增加一个对象到空间索引
\param box 要增加对象的box
\param nID 要增加对象的id
\return 增加是否成功
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.Query(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据矩形范围查询相交对象id
\param box 要检索的矩形范围
\param vecResult 返回和检索矩形相交的对象id
\return 返回是否检索到对象
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.Dimension">
\brief R树维度
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.MaxDepth">
\brief R树最大深度
</member>
        <member name="M:GeoStar.Kernel.GsMemoryRTreeSpatialIndex.#ctor(System.Double!System.Runtime.CompilerServices.IsConst*,System.Double!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)">
\brief 根据R树索引深度和维度构造
\param nMaxDepth 最大的R树深度，范围[3~8]
\param nDim 索引坐标的维[2,4]
</member>
        <member name="T:GeoStar.Kernel.GsMemoryRTreeSpatialIndex">
\brief 在内存中的R树索引实现
</member>
        <member name="D:GeoStar.Kernel.GsSpatialIndexEditPtr">
\brief GsSpatialIndexEditPtr
</member>
        <member name="M:GeoStar.Kernel.GsSpatialIndexEdit.Remove(System.Int32)">
\brief 从空间索引移除一个对象
\param nID 要移除对象的id
\return 移除是否成功
</member>
        <member name="M:GeoStar.Kernel.GsSpatialIndexEdit.Add(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
\brief 增加一个对象到空间索引
\param box 要增加对象的box
\param nID 要增加对象的id
\return 增加是否成功
</member>
        <member name="T:GeoStar.Kernel.GsSpatialIndexEdit">
\brief 支持修改的空间索引抽象基类
</member>
        <member name="D:GeoStar.Kernel.GsSpatialIndexQueryPtr">
\brief GsSpatialIndexQueryPtr
</member>
        <member name="M:GeoStar.Kernel.GsSpatialIndexQuery.Query(GeoStar.Kernel.GsBox!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 根据矩形范围查询相交对象id
\param box 要检索的矩形范围
\param vecResult 返回和检索矩形相交的对象id
\return 返回是否检索到对象
</member>
        <member name="T:GeoStar.Kernel.GsSpatialIndexQuery">
\brief 粗查空间索引对象抽象基类
</member>
        <member name="D:GeoStar.Kernel.GsBD09ToWGS84CoordinateTransformationPtr">
\brief GsBD09ToWGS84CoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsBD09ToWGS84CoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="M:GeoStar.Kernel.GsBD09ToWGS84CoordinateTransformation.#ctor(System.Double)">
\brief 从转换精度构造
\param dblPrecision 反转的精确度，单位米
</member>
        <member name="T:GeoStar.Kernel.GsBD09ToWGS84CoordinateTransformation">
\brief 转从BD09(百度）坐标系反转为WGS84
\details https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China
</member>
        <member name="D:GeoStar.Kernel.GsWGS84ToBD09CoordinateTransformationPtr">
\brief GsWGS84ToGCJ02CoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsWGS84ToBD09CoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="T:GeoStar.Kernel.GsWGS84ToBD09CoordinateTransformation">
\brief 从WGS84坐标系转BD09(百度）坐标系。
\details https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China
</member>
        <member name="D:GeoStar.Kernel.GsGCJ02ToWGS84CoordinateTransformationPtr">
\brief GsGCJ02ToWGS84CoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsGCJ02ToWGS84CoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="M:GeoStar.Kernel.GsGCJ02ToWGS84CoordinateTransformation.#ctor(System.Double)">
\brief 从转换精度构造
\param dblPrecision 反转的精确度，单位米
</member>
        <member name="T:GeoStar.Kernel.GsGCJ02ToWGS84CoordinateTransformation">
\brief 转从GCJ02(火星）坐标系反转为WGS84
\details https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China
</member>
        <member name="D:GeoStar.Kernel.GsWGS84ToGCJ02CoordinateTransformationPtr">
\brief GsWGS84ToGCJ02CoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsWGS84ToGCJ02CoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="T:GeoStar.Kernel.GsWGS84ToGCJ02CoordinateTransformation">
\brief 从WGS84坐标系转GCJ02(火星）坐标系。
\details https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China
</member>
        <member name="D:GeoStar.Kernel.GsAffineCoordinateTransformationPtr">
\brief GsAffineCoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.TargetPoint">
\brief 目标的同名点坐标
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.SourcePoint">
\brief 源的同名点坐标
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.IdenticalPointCount">
\brief 同名点数量
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.Matrix">
\brief 获取访射变换矩阵指针
\details 访射变换矩阵为6个double 每个元素的意义如下：[a1][b1][a2][b2][a0][b0]
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.Elements(System.Double*)">
\brief 获取仿射变换矩阵的值。
\param m 用于输出矩阵值得数组，长度6
\details 访射变换矩阵为6个double 每个元素的意义如下：[a1][b1][a2][b2][a0][b0]
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.Parameter(System.Double*,System.Double*,System.Int32)">
\brief 设置同名点参数
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.#ctor(System.Double*)">
\brief 根据访射变换矩阵构造
\details 访射变换矩阵为6个double 每个元素的意义如下：[a1][b1][a2][b2][a0][b0]
</member>
        <member name="M:GeoStar.Kernel.GsAffineCoordinateTransformation.#ctor(System.Double*,System.Double*,System.Int32)">
\brief 根据源和目标同名点组构成仿射变换参数
\details 最低需要3个点的坐标,即nLen为6。
</member>
        <member name="T:GeoStar.Kernel.GsAffineCoordinateTransformation">
\brief 仿射坐标转换
\details 推导过程 
 XL = A0 + A1 * XD + A2 * YD
 YL = B0 + B1 * XD + B2 * YD
</member>
        <member name="D:GeoStar.Kernel.GsParameterProjectCoordinateTransformationPtr">
\brief GsParameterProjectCoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsParameterProjectCoordinateTransformation.Parameter(GeoStar.Kernel.GsCoordinateTransformationMethod,System.Double*)">
\brief 设置坐标转换的方法和参数值。
</member>
        <member name="M:GeoStar.Kernel.GsParameterProjectCoordinateTransformation.Method">
\brief 获取数据转换的方法
</member>
        <member name="M:GeoStar.Kernel.GsParameterProjectCoordinateTransformation.#ctor(GeoStar.Kernel.GsSpatialReference*,GeoStar.Kernel.GsSpatialReference*,GeoStar.Kernel.GsCoordinateTransformationMethod,System.Double*)">
\brief 从转换方法和转换参数构造
</member>
        <member name="F:GeoStar.Kernel.GsParameterProjectCoordinateTransformation.m_eMethod">
\brief 转换参数。
</member>
        <member name="F:GeoStar.Kernel.GsParameterProjectCoordinateTransformation.m_vecParam">
\brief 转换参数。
</member>
        <member name="T:GeoStar.Kernel.GsParameterProjectCoordinateTransformation">
\brief 参数化的投影坐标转换
\details 定义不同投影间的转换方法和转换参数
\details 从一个大地经纬度坐标系变换到另一个大地经纬度坐标系一般需要经过三个环节：大地经纬度坐标系到空间直角坐标系&gt;空间直角坐标系到空间直角坐标系&gt;空间直角坐标系到大地经纬度坐标系。
\details 其中的中间环节，空间直角坐标到空间直角坐标采用七参数赫尔默特（Helmert）转换法，其转换矩阵为著名的布尔沙-沃尔夫（Bursa-Wolf）公式,或者三参数等不同的转换方法
</member>
        <member name="T:GeoStar.Kernel.GsCoordinateTransformationMethod">
\brief 坐标换换方法
</member>
        <member name="F:eGeocentricTranslation">
\brief 基于地心的三参数转换法。
</member>
        <member name="F:eCoordinateFrame">
\brief 坐标框架法
\details 七参数赫尔默特（Helmert）转换法，依据布尔莎（Bursa-Wolf）公式
\details 由EPSG（欧洲石油勘探组织）定义
\details 与位置矢量法不同的是7参数中三个旋转参数的方向相反。
</member>
        <member name="F:ePositionVector">
\brief 位置矢量法
\details 七参数赫尔默特（Helmert）转换法，依据布尔莎（Bursa-Wolf）公式
\details 由国际大地测量协会（IAG）通过ISO19111标准定义
\details 与坐标框架法不同的是7参数中三个旋转参数的方向相反。
</member>
        <member name="D:GeoStar.Kernel.GsProjectCoordinateTransformationPtr">
\brief GsProjectCoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsProjectCoordinateTransformation.Target(GeoStar.Kernel.GsSpatialReference*)">
\brief 设置投影转换目标空间参考
</member>
        <member name="M:GeoStar.Kernel.GsProjectCoordinateTransformation.Target">
\brief 投影转换目标空间参考
</member>
        <member name="M:GeoStar.Kernel.GsProjectCoordinateTransformation.Source(GeoStar.Kernel.GsSpatialReference*)">
\brief 设置投影转换源空间参考
</member>
        <member name="M:GeoStar.Kernel.GsProjectCoordinateTransformation.Source">
\brief 投影转换源空间参考
</member>
        <member name="M:GeoStar.Kernel.GsProjectCoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="T:GeoStar.Kernel.GsProjectCoordinateTransformation">
\brief 投影坐标转换
</member>
        <member name="D:GeoStar.Kernel.GsCoordinateTransformationPtr">
\brief GsCoordinateTransformationPtr
</member>
        <member name="M:GeoStar.Kernel.GsCoordinateTransformation.Transformation(System.Double*,System.Int32,System.Int32)">
\brief 对x，y，或者z构成的坐标数组进行转换
</member>
        <member name="M:GeoStar.Kernel.GsCoordinateTransformation.Transformation(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
\brief 对x数组和y数组以及Z数组分别转换
</member>
        <member name="T:GeoStar.Kernel.GsCoordinateTransformation">
\brief 坐标转换基类
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.SpecialCategory(GeoStar.Kernel.GsSpatialReferenceManager.GsSpecialCategory)">
\brief 获取特殊的空间参考分类。
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.Category(System.Int32)">
\brief 获取空间参考的一个分类
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.CategoryCount">
\brief 空间参考的分类数量
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.DataFolder">
\brief 获取空间参考数据目录。
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 指定特定目录构造空间参考管理对象
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.GsSpatialReferenceCategory.SpatialReference(System.Int32)">
\brief根据索引获取空间参考对象
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.GsSpatialReferenceCategory.Count">
\brief 空间参考的数量
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReferenceManager.GsSpatialReferenceCategory.Name">
\brief 类别的名称
</member>
        <member name="T:GeoStar.Kernel.GsSpatialReferenceManager.GsSpatialReferenceCategory">
\brief 空间参考的分类。
</member>
        <member name="F:eAliasOfEPSG">
\brief EPSG别名分类
</member>
        <member name="F:eStandardEPSG">
\brief 标准EPSG分类
</member>
        <member name="T:GeoStar.Kernel.GsSpatialReferenceManager.GsSpecialCategory">
\brief 特殊分类
</member>
        <member name="T:GeoStar.Kernel.GsSpatialReferenceManager">
\brief 空间参考管理对象。
\details 枚举现有的空间参考，增加新空间参考等等能力。
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.Compute(System.Boolean,System.Boolean,System.Double*,System.Double*)">
\brief 计算多边形的球面面积以及周长
\param bReverse 是否反向，如果为true（反向）则认为逆时针多边形得到负的面积值。(标准积分面积逆时针方向的点返回正面积）
\param bSign  是否带符号返回面积，如果时则在方向正确时返回正面积不正确时返回负面积， 否则将返回多边形外的地球面积。
\param pArea  当构造时使用非Polyline参数则返回球面面积，否则不返回
\param pPerimeter    返回多边形或者polyline的周长
\return 返回多边形或者折线有多少个点
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.AddEdge(System.Double,System.Double)">
\brief 以方位角、长度增加一条边
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.AddPoint(System.Double,System.Double)">
\brief 增加一个边界点
\param lon 经度
\param lat 纬度
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.op_Assign(GeoStar.Kernel.GsGeodesicPolygon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值操作符
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.#ctor(GeoStar.Kernel.GsGeodesicPolygon!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicPolygon.#ctor(GeoStar.Kernel.GsSpatialReference*,System.Boolean)">
\brief 构造一个多边形或者Polyline
</member>
        <member name="T:GeoStar.Kernel.GsGeodesicPolygon">
\brief 测地线多边形，以测地线构成的多边形
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicLine.Position(System.Double,System.Double*,System.Double*,System.Double*)">
\brief 根据距离获得测地线上的点坐标
\param distance 距离起点的距离，单位米
\param toLatitude 终点的经度
\param toLongitude 终点的纬度
\param toAzimuth 终点的方位角
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicLine.op_Assign(GeoStar.Kernel.GsGeodesicLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值操作符
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicLine.#ctor(GeoStar.Kernel.GsGeodesicLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
</member>
        <member name="M:GeoStar.Kernel.GsGeodesicLine.#ctor(GeoStar.Kernel.GsSpatialReference*,System.Double,System.Double,System.Double,GeoStar.Kernel.GsGeodesicLine.GeoDMask)">
\brief 根据空间参考，起点的经纬度和方向角确定一根测地线
</member>
        <member name="T:GeoStar.Kernel.GsGeodesicLine.GeoDMask">
 mask values for the \e caps argument to geod_lineinit().
********************************************************************
</member>
        <member name="T:GeoStar.Kernel.GsGeodesicLine">
\brief 一根测地线，已经确定了起点终点的大地线
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.Interpolation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
\brief 寻找起点终点大圆上的t对应的点
\param fromLongitude 开始点经度
\param fromLatitude 开始点纬度度
\param toLongitude 终点经度
\param toLatitude 终点维度
\param t 参数0~1标示起点和终点，可以小于0或者大于1
\param Longitude 插值点的经度
\param Latitude 插值点的维度
\param Azimuth 插值点的方向角
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.Direct(System.Double,System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
\brief 根据起点经纬度坐标和方位角沿测试线前进一定长度到终点
\param fromLongitude 开始点经度
\param fromLatitude 开始点纬度度
\param fromAzimuth 开始点方位角（以正北为0顺时针旋转的角度，单位度）
\param lenth12 沿测地线前进的距离（单位米）
\param toLongitude 输出终点的经度
\param toLatitude 输出终点的纬度
\param toLatitude 输出终点的方位角
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.Inverse(System.Double,System.Double,System.Double,System.Double,System.Double*,System.Double*)">
\brief 计算测地线长度、大圆距离、球面距离
\param fromLongitude 开始点经度
\param fromLatitude 开始点纬度度
\param toLongitude 结束点经度
\param toLatitude 结束点纬度度
\param fromAzimuth 输出开始点的方向角
\param toAzimuth 输出结束点的方向角
\return 测地线长度，单位米
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.op_Assign(GeoStar.Kernel.GsGeodesic!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值操作符
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.#ctor(GeoStar.Kernel.GsGeodesic!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.#ctor(System.Double,System.Double)">
\brief 从地球半径和扁率构造
\param a 赤道半径 
\param f 扁率
</member>
        <member name="M:GeoStar.Kernel.GsGeodesic.#ctor(GeoStar.Kernel.GsSpatialReference*)">
\brief 从空间参考初始化
</member>
        <member name="T:GeoStar.Kernel.GsGeodesic">
\brief 大地线，计算两个经纬度坐标的测地线长度，或称为大圆距离、球面距离
</member>
        <member name="D:GeoStar.Kernel.GsSpatialReferencePtr">
\brief GsSpatialReferencePtr
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Axis(System.Int32,GeoStar.Kernel.GsAxisOrientation*)">
\brief 获取坐标轴的方向信息
\param i 坐标轴的顺序（0或者1） 
\param peOrientation 输出坐标轴的方向
\return  返回坐标轴的名称或者空字符串
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Projection">
\brief 投影名称
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Ellipsoid">
\brief 椭球名称
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.EPSG">
\brief EPSG
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.MeanRadius">
\brief 椭球平均半径(公里 km)
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.FlattenInverseF">
\brief 椭球扁率的倒数
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.PolarRadiusB">
\brief 椭球短半轴(公里 km)
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.EquatorialRadiusA">
\brief 椭球长半轴(公里 km)
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsProjected">
\brief 是否是投影坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsGeographic">
\brief 是否是地理坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsLocalCS">
\brief 是否是本地坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsSameParameter(GeoStar.Kernel.GsSpatialReference*)">
\brief 是否是相同的空间参数，可以作为空间参考是否相同的依据，但不绝对
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsSameGeogCS(GeoStar.Kernel.GsSpatialReference*)">
\brief 是否是相同的地理坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsSameProjCS(GeoStar.Kernel.GsSpatialReference*)">
\brief 是否是相同的投影坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsSame(GeoStar.Kernel.GsSpatialReference*)">
\brief 是否是相同的坐标系
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.IsNull">
\brief 是否为空
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.ExportToProj4">
\brief 以Proj4的格式输出
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.ExportToXml">
\brief 以XML的格式输出
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.ExportToWKT(System.Boolean)">
\brief 坐标单位
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Units">
\brief 坐标单位
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 空间参考的名称
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Name">
\brief 空间参考的名称
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.Handle">
\brief 返回内部对象指针
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.#ctor(System.Int32)">
\brief 从EPSG编号构造
\details 使用全局配置项Kernel/SpatialRererence/EPSG设置EPSG.txt所在的路径
\code{.cpp}
 GsGlobeConfig::Instance().Child("Kernel/SpatialRererence/EPSG").Value("...SpatialReferenceDataFolder\\EPSG.txt");

GsSpatialReferencePtr ptrSR = new GsSpatialReference(4326);
{....}
\endcode
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Kernel.GsSpatialReferenceFormat)">
\brief 从字符串和指定类型进行构造
</member>
        <member name="M:GeoStar.Kernel.GsSpatialReference.#ctor(GeoStar.Kernel.GsWellKnownSpatialReference)">
\brief 从已知的空间参考类型构造
</member>
        <member name="T:GeoStar.Kernel.GsSpatialReference">
\brief 空间参考
</member>
        <member name="T:GeoStar.Kernel.GsAxisOrientation">
\brief 坐标轴方向
</member>
        <member name="F:eDown">
\brief 朝下
</member>
        <member name="F:eUp">
\brief 朝上
</member>
        <member name="F:eWest">
\brief 朝西
</member>
        <member name="F:eEast">
\brief 朝东
</member>
        <member name="F:eSouth">
\brief 朝南
</member>
        <member name="F:eNorth">
\brief 朝北
</member>
        <member name="F:eOther">
\brief 不确定方向
</member>
        <member name="T:GeoStar.Kernel.GsUnits">
\brief 坐标单位
</member>
        <member name="F:eKM">
\brief 千米
</member>
        <member name="F:eCM">
\brief 厘米
</member>
        <member name="F:eInch">
\brief 英寸
</member>
        <member name="F:eMM">
\brief 毫米
</member>
        <member name="F:eDegree">
\brief 度
</member>
        <member name="F:eMeter">
\brief 米
</member>
        <member name="F:eUnknownUnit">
\brief 未知单位
</member>
        <member name="T:GeoStar.Kernel.GsWellKnownSpatialReference">
\brief 已知常用空间参考
</member>
        <member name="F:eWebMercator">
\brief web墨卡托空间参考
</member>
        <member name="F:eCGCS2000">
\brief CGCS2000空间参考
</member>
        <member name="F:eWGS84">
\brief WGS84空间参考
</member>
        <member name="T:GeoStar.Kernel.GsSpatialReferenceFormat">
\brief 空间参考数据格式类型
</member>
        <member name="F:eGeoStar5Format">
\brief GeoStar5以逗号分隔的空间参考描述格式。
</member>
        <member name="F:eESRIWktFormat">
\brief ESRI的Wkt格式
</member>
        <member name="F:eProj4Format">
\brief proj.4格式
</member>
        <member name="F:eXMLFormat">
\brief XML格式
</member>
        <member name="F:eWktFormat">
\brief 标准WKT格式
</member>
        <member name="F:eUnknownFormat">
\brief 未知的空间参考定义格式
</member>
        <member name="T:GeoStar.Utility.GsGZFile">
\brief GZ压缩功能
</member>
        <member name="M:GeoStar.Utility.GsZLib.Uncompress(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsByteBuffer*)">
\brief 解压一段内存
\param sourceLen 要解压的内存大小，返回时返回解压了多长的长度。
</member>
        <member name="M:GeoStar.Utility.GsZLib.Uncompress(GeoStar.Utility.GsByteBuffer*,GeoStar.Utility.GsByteBuffer*)">
\brief 解压一段内存
</member>
        <member name="M:GeoStar.Utility.GsZLib.Compress(GeoStar.Utility.GsByteBuffer*,GeoStar.Utility.GsByteBuffer*,System.Int32)">
\brief 压缩一段内存
\param nLevel 压缩级别0~9,  0标识不压缩，9标识最大压缩
</member>
        <member name="M:GeoStar.Utility.GsZLib.Compress(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Byte*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
\brief 压缩一段内存
\param nLevel 压缩级别0~9,  0标识不压缩，9标识最大压缩
</member>
        <member name="T:GeoStar.Utility.GsZLib">
\brief zlib功能封装
</member>
        <member name="M:GeoStar.Utility.GsZipFile.Add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 向Zip文件中内存块作为文件。
</member>
        <member name="M:GeoStar.Utility.GsZipFile.Add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,GeoStar.Utility.GsZipSource*)">
\brief 向Zip文件中添加自定义源的文件。
</member>
        <member name="M:GeoStar.Utility.GsZipFile.Add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 向Zip文件中添加一个文件
</member>
        <member name="M:GeoStar.Utility.GsZipFile.Entry(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 根据名称获得一个文件
</member>
        <member name="M:GeoStar.Utility.GsZipFile.Entry(System.Int32)">
\brief 根据索引获得一个文件
</member>
        <member name="M:GeoStar.Utility.GsZipFile.EntryCount">
\brief zip文件中打包文件的数量
</member>
        <member name="M:GeoStar.Utility.GsZipFile.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件解压或者创建新的zip文件
</member>
        <member name="M:GeoStar.Utility.GsZipFile.#ctor(GeoStar.Utility.GsZipSource*)">
\brief 从自定义源中解压zip文件
</member>
        <member name="M:GeoStar.Utility.GsZipFile.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存中解压zip文件
</member>
        <member name="T:GeoStar.Utility.GsZipFile">
\brief zip文件封装类。
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.Delete">
\brief 删除自身。
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.ReadTo(GeoStar.Utility.GsByteBuffer*)">
\brief 读取所有数据到这个源中
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.ReadTo(GeoStar.Utility.GsZipSource*)">
\brief 读取所有数据到这个源中
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.EndRead">
\brief 读取结束读取
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.Read(System.Byte*,System.Int32)">
\brief 读取一段数据返回读取的字节。返回0标识或者小于输入Buffer长度则标识读取完成。
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.BeginRead">
\brief 开始读取数据
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.op_Implicit~System.Boolean">
\brief 是否有效
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.IsValid">
\brief 是否有效
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.IsFolder">
\brief 是否是目录
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.Path">
\brief 路径
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.CompressedSize">
\brief 压缩后大小
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.UncompressedSize">
\brief 未压缩大小
</member>
        <member name="M:GeoStar.Utility.GsZipEntry.Index">
\brief 文件索引
</member>
        <member name="F:GeoStar.Utility.GsZipEntry.m_Handle">
\brief 解压文件时的读取句柄。
</member>
        <member name="F:GeoStar.Utility.GsZipEntry.m_CompSize">
\brief 文件的压缩大小
</member>
        <member name="F:GeoStar.Utility.GsZipEntry.m_Size">
\brief 文件的实际大小
</member>
        <member name="F:GeoStar.Utility.GsZipEntry.m_Name">
\brief 路径和名称
</member>
        <member name="F:GeoStar.Utility.GsZipEntry.m_Index">
\brief 压缩文件的索引
</member>
        <member name="T:GeoStar.Utility.GsZipEntry">
\brief zip压缩文件内的一个文件或者目录。
</member>
        <member name="T:GeoStar.Utility.GsZipSource">
\brief Zip数据源。
</member>
        <member name="T:GeoStar.Utility.GsZipCommand">
\brief GsZipSource操作命令
</member>
        <member name="T:GeoStar.Utility.GsZipContext">
\brief ZIP文件上下文。
</member>
        <member name="M:GeoStar.Utility.GsXmlWriter.WriteEndDocument">
\brief 结束写入一个文档
</member>
        <member name="M:GeoStar.Utility.GsXmlWriter.WriteStartDocument(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 开始一个文档
</member>
        <member name="M:GeoStar.Utility.GsXmlWriter.WriteXml(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 直接写入xml片段到xml流中
</member>
        <member name="M:GeoStar.Utility.GsXmlWriter.Depth">
\brief 已经写入的xml的深度
</member>
        <member name="M:GeoStar.Utility.GsXmlWriter.#ctor(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 构造函数
\param stream 输出流。
</member>
        <member name="T:GeoStar.Utility.GsXmlWriter">
\brief xml流式写入
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.Read(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 读取一个xml片段。
\details 分段读取xml片段，解析整个xml
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnError(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 但发生错误时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnEndDoctypeDecl">
\brief 当结束一个文档声明时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnStartDoctypeDecl(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 当开始一个文档声明时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnElementContent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 读取到ElementContent时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 当读取注释时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnElementAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 当读取一个属性时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnCDataEnd">
\brief 当CData元素结束时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnCDataBegin">
\brief 当CData元素开始时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnElementEnd(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 当元素结束时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnElementBegin(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 当元素开始时发生
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnEnd">
\brief 当完整解析xml后发生。
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.OnBegin">
\brief 当刚开始解析xml时发生。
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.Reset">
\brief 将解析器恢复为缺省状态。
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.Depth(System.Int32)">
\brief 设置文档解析深度
</member>
        <member name="M:GeoStar.Utility.GsXmlReader.Depth">
\brief 文档解析深度
</member>
        <member name="T:GeoStar.Utility.GsXmlReader">
\brief xml流式读取
\details 分段从Read方法读取xml片段，并逐渐将完整xml解析出来。
\details 通过继承GsXmlReader类副高OnXXX方法实现对xml的解析。
</member>
        <member name="T:GeoStar.Utility.GsEnumParser">
\brief 枚举解析器是将C++的枚举从字符串解析成枚举值，或者将枚举值解析为字符串。
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Reset">
\brief 重置
</member>
        <member name="M:GeoStar.Utility.GsQRCode.QRCodePage(System.Int32)">
\brief 获取一个二维码数据
\details 返回对象的生命周期应保持小于GsQRCode对象自身
</member>
        <member name="M:GeoStar.Utility.GsQRCode.PageCount">
\brief 生成的二维码数量
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Encode(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 任意内存块进行编码
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Encode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 任意字符串进行编码
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Mode(GeoStar.Utility.GsQREncodeMode)">
\brief 二维码的编码模式
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Mode">
\brief 二维码的编码模式
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Level(GeoStar.Utility.GsQREncodeLevel)">
\brief 二维码的编码级别
\details 级别越高，容错性越好
</member>
        <member name="M:GeoStar.Utility.GsQRCode.Level">
\brief 二维码的编码级别
\details 级别越高，容错性越好
</member>
        <member name="T:GeoStar.Utility.GsQRCode">
\brief 二维码生成类。
</member>
        <member name="T:GeoStar.Utility.GsQRCodeDataType">
\brief 二维码编码数据类型
</member>
        <member name="F:eQRCodeBinary">
\brief 任意二进制数据
</member>
        <member name="F:eQRCodeString">
\brief 字符串二维编码
</member>
        <member name="F:eQRCodeUnknown">
\brief 未知类型，错误类型
</member>
        <member name="T:GeoStar.Utility.GsQREncodeMode">
\brief 二维码编码模式
</member>
        <member name="T:GeoStar.Utility.GsQREncodeLevel">
\brief 二维码生成的级别。
</member>
        <member name="M:GeoStar.Utility.GsQRCodePage.IsSet(System.Int32,System.Int32)">
\brief 根据行列获取是否存在色块。
</member>
        <member name="M:GeoStar.Utility.GsQRCodePage.Size">
\brief 二维码的大小
</member>
        <member name="T:GeoStar.Utility.GsQRCodePage">
\brief 一个二维码对象
</member>
        <member name="M:GeoStar.Utility.GsEndianConverter.IsLitteEndian">
\brief 是否是低字节序
</member>
        <member name="M:GeoStar.Utility.GsEndianConverter.IsBigEndian">
\brief 是否是高字节序
</member>
        <member name="M:GeoStar.Utility.GsEndianConverter.OsEndian">
\brief 静态函数
</member>
        <member name="T:GeoStar.Utility.GsEndianConverter">
\brief 字节序转换类
</member>
        <member name="T:GeoStar.Utility.GsEndian">
\brief 字节序枚举
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.LastInsertRowID">
\brief 插入最后一行
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.RecordCount">
\brief 满足要求的记录数
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.ColunmName(System.Int32)">
\brief 获取列的名称
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.ColunmType(System.Int32)">
\brief 获取列的类型
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.ColumnCount">
\brief 获取查询结果的列数
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.Reset">
\brief 释放内存
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.BindValue(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Utility.Data.GsFieldType)">
\brief 绑定索引
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.ValueLength(System.Int32)">
\brief 返回当前列的值
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.DoubleValue(System.Int32)">
\brief 读取64位浮点数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.Int64Value(System.Int32)">
\brief 读取64位整数数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.IntValue(System.Int32)">
\brief 读取32位整数数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.BlobValue(System.Int32)">
\brief 读取无符号字符数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.MoveNext">
\brief 读取下一条数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.ExecuteQuery">
\brief 执行读取，返回1个结果
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.Execute">
\brief 执行读取，返回多个结果
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.IsNull">
\brief 判断指针是否为空
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.op_Implicit~sqlite3_stmt*">
\brief 返回指针地址
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.Prepare(GeoStar.Utility.Data.GsDatabase*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 准备执行
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.#ctor(GeoStar.Utility.Data.Sqlite.GsSqliteDatabase*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.#ctor">
\brief 缺省构造函数
</member>
        <member name="F:GeoStar.Utility.Data.Sqlite.GsSqliteStatement.m_pStmt">
\brief 创建stmt指针
</member>
        <member name="T:GeoStar.Utility.Data.Sqlite.GsSqliteStatement">
\brief 包装Sqlite的stmt
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteTransaction.Rollback">
\brief 回滚数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteTransaction.Commit">
\brief 提交数据
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteTransaction.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteTransaction.#ctor(GeoStar.Utility.Data.Sqlite.GsSqliteDatabase*)">
\brief 构造函数
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.ExistTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 判断表是否存在
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.Interrupt">
\brief 打断正在运行中的数据库命令
\return 不支持打断操作的能力则返回false，成功打断或者无须打断都返回true
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.Error(System.Int64)">
\brief 判断是否读取失败
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.ErrorCode">
\brief 错误编号
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.ErrorMessage">
\brief 最后的消息
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.Close">
\brief 判断是否关闭
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.LastInsertRowID">
\brief 插入最后1行
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.Execute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 执行操作
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.IsOpen">
\brief 判断是否打开文件
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.DB">
\brief 返回指针地址
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.op_Implicit~sqlite3*">
\brief 转化成数据库指针
</member>
        <member name="M:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase.#ctor">
\brief 构造函数
</member>
        <member name="T:GeoStar.Utility.Data.Sqlite.GsSqliteDatabase">
\brief sqlite数据库指针的封装。
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.ColunmName(System.Int32)">
\brief 获取列的名称
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.ColunmType(System.Int32)">
\brief 获取列的类型
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.ColumnCount">
\brief 获取查询结果的列数
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Reset">
\brief 释放内存
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.BindValue(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,GeoStar.Utility.Data.GsFieldType)">
\brief 绑定索引
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.ValueLength(System.Int32)">
\brief 返回当前列的值
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.BlobValue(System.Int32)">
\brief 读取无符号字符数据
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.MoveNext">
\brief 返回下1条数据
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Execute">
\brief 执行读取，返回多个结果
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.ExecuteQuery">
\brief 执行读取，返回1个结果
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 绑定字符常量
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32)">
\brief 绑定函数重载
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.UInt64)">
\brief 绑定64位无符号整数
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.Int64)">
\brief 绑定64位整数
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.Double)">
\brief 绑定64位浮点数
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.Int32)">
\brief 绑定32位整数
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Bind(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 绑定无符号字符
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.DoubleValue(System.Int32)">
\brief 读取double类型数据
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.StringValuePtr(System.Int32)">
\brief 读取无符号字符常量
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.StringValue(System.Int32)">
\brief 读取字符串
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.Int64Value(System.Int32)">
\brief 读取64位
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.IntValue(System.Int32)">
\brief 读取32位
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.RecordCount">
\brief 返回-1
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.SQLString">
\brief 将本地字符串转化为数据库字符串
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.#ctor(GeoStar.Utility.Data.GsDatabase*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 重载构造函数，创建数据库指针
</member>
        <member name="M:GeoStar.Utility.Data.GsStatement.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.Data.GsStatement">
\brief 封装数据库的字符串操作
</member>
        <member name="F:eDateType">
\brief 日期类型
</member>
        <member name="F:eGeometryType">
\brief 几何类型
</member>
        <member name="F:eDoubleType">
\brief 双精度浮点型
</member>
        <member name="F:eFloatType">
\brief 浮点型
</member>
        <member name="F:eBlobType">
\brief 二进制类型
</member>
        <member name="F:eStringType">
\brief 字符串类型
</member>
        <member name="F:eUInt64Type">
\brief 64位的无符号整型
</member>
        <member name="F:eInt64Type">
\brief 64位的整型
</member>
        <member name="F:eUIntType">
\brief 32位的无符号整型
</member>
        <member name="F:eIntType">
\brief 32位的整型
</member>
        <member name="F:eBoolType">
\brief BOOL类型
</member>
        <member name="M:GeoStar.Utility.Data.GsTransaction.Rollback">
\brief 回滚数据
</member>
        <member name="M:GeoStar.Utility.Data.GsTransaction.Commit">
\brief 提交数据
</member>
        <member name="T:GeoStar.Utility.Data.GsTransaction">
\brief 封装数据库的传递
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.Interrupt">
\brief 打断正在运行中的数据库命令
\return 不支持打断操作的能力则返回false，成功打断或者无须打断都返回true
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.ErrorCode">
\brief 错误编号
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.ErrorMessage">
\brief 最后的消息
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.Close">
\brief 判断是否关闭
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.LastInsertRowID">
\brief 插入最后1行
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.Execute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 执行操作
</member>
        <member name="M:GeoStar.Utility.Data.GsDatabase.IsOpen">
\brief 判断是否打开文件
</member>
        <member name="T:GeoStar.Utility.Data.GsDatabase">
\brief 封装数据库接口
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Row(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 写入某行的数据
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Row(System.Int32,std.vector&lt;System.Byte&gt;*)">
\brief 获取某行的首指针
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Row(System.Int32)">
\brief 获取某行的首指针
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Stride">
\brief 图像一行的字节长度
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Bit">
\brief 获取图像的字节数组，并非所有图像都能够成功
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Height">
\brief 设置高度
</member>
        <member name="M:GeoStar.Utility.GsPAMBitmap.Width">
\brief 设置宽度
</member>
        <member name="T:GeoStar.Utility.GsPAMBitmap">
\brief 基于NetPbm的PAM格式文件影像
\details http://netpbm.sourceforge.net/
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.Stride">
\brief 图像一行的字节长度
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.Bit">
\brief 获取图像的字节数组，并非所有图像都能够成功
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.Height">
\brief 设置高度
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.Width">
\brief 设置宽度
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.CopyFrom(GeoStar.Utility.GsImage*)">
\brief 拷贝
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.SavePNG(GeoStar.Utility.GsByteBuffer*)">
\brief 保存图像为PNG格式的内存块。
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.SavePNG(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存图像为PNG格式文件
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 解码内存中的图像
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 解码文件格式的图像
</member>
        <member name="M:GeoStar.Utility.GsSimpleBitmap.#ctor(System.UInt32,System.UInt32,System.Int32)">
\brief 重载构造函数
</member>
        <member name="T:GeoStar.Utility.GsSimpleBitmap">
\brief 内存中存储的简单位图对象
</member>
        <member name="M:GeoStar.Utility.GsImage.LoadFrom(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从内存块载入生成图像对象
</member>
        <member name="M:GeoStar.Utility.GsImage.LoadFrom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从文件载入生成图像
</member>
        <member name="M:GeoStar.Utility.GsImage.SaveJPEG(GeoStar.Utility.GsByteBuffer*,System.Int32)">
\brief 保存图像为JPEG格式的内存块。
</member>
        <member name="M:GeoStar.Utility.GsImage.SaveJPEG(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 保存图像为JPEG格式文件
</member>
        <member name="M:GeoStar.Utility.GsImage.SavePNG(GeoStar.Utility.GsByteBuffer*)">
\brief 保存图像为PNG格式的内存块。
</member>
        <member name="M:GeoStar.Utility.GsImage.SavePNG(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存图像为PNG格式文件
</member>
        <member name="M:GeoStar.Utility.GsImage.Row(System.Int32)">
\brief 获取某行的首指针
</member>
        <member name="M:GeoStar.Utility.GsImage.Stride">
\brief 图像一行的字节长度
</member>
        <member name="M:GeoStar.Utility.GsImage.Bit">
\brief 获取图像的字节数组，并非所有图像都能够成功
</member>
        <member name="M:GeoStar.Utility.GsImage.Height">
\brief 设置高度
</member>
        <member name="M:GeoStar.Utility.GsImage.Width">
\brief 设置宽度
</member>
        <member name="M:GeoStar.Utility.GsImage.CopyFrom(GeoStar.Utility.GsImage*)">
\brief 拷贝
</member>
        <member name="M:GeoStar.Utility.GsImage.Dispose">
\brief 析构函数
</member>
        <member name="T:GeoStar.Utility.GsImage">
\brief 影像对象
</member>
        <member name="M:GeoStar.Utility.GsRectF.OffsetTo(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移返回新的偏移后的矩形
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_Subtraction(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_Addition(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRectF.OffsetTo(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移返回新的偏移后的矩形
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_Subtraction(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_Addition(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRectF.Union(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形合并
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_AdditionAssignment(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 合并到自身
</member>
        <member name="M:GeoStar.Utility.GsRectF.op_Addition(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形合并
</member>
        <member name="M:GeoStar.Utility.GsRectF.RightBottom">
\brief 右下角
</member>
        <member name="M:GeoStar.Utility.GsRectF.LeftBottom">
\brief 左下角
</member>
        <member name="M:GeoStar.Utility.GsRectF.RightTop">
\brief 右上角
</member>
        <member name="M:GeoStar.Utility.GsRectF.LeftTop">
\brief 左上角
</member>
        <member name="M:GeoStar.Utility.GsRectF.Size">
\brief 大小
</member>
        <member name="M:GeoStar.Utility.GsRectF.Location">
\brief 定位点
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsContain(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsContain(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsContain(System.Single,System.Single)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsDisjoin(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否相离
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsDisjoin(System.Single,System.Single,System.Single,System.Single)">
\brief 是否和线相离
</member>
        <member name="M:GeoStar.Utility.GsRectF.Intersects(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 计算两个相交的部分
</member>
        <member name="M:GeoStar.Utility.GsRectF.IsIntersects(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否相交
</member>
        <member name="M:GeoStar.Utility.GsRectF.Center">
\brief 中心点
</member>
        <member name="M:GeoStar.Utility.GsRectF.Height">
\brief 设置高度
</member>
        <member name="M:GeoStar.Utility.GsRectF.Width">
\brief 设置宽度
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(GeoStar.Utility.GsRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 构造函数重载
</member>
        <member name="M:GeoStar.Utility.GsRectF.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.GsRectF">
\brief 创建一个float类型的矩形
</member>
        <member name="M:GeoStar.Utility.GsRect.Union(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形合并
</member>
        <member name="M:GeoStar.Utility.GsRect.op_AdditionAssignment(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 合并到自身
</member>
        <member name="M:GeoStar.Utility.GsRect.op_Addition(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形合并
</member>
        <member name="M:GeoStar.Utility.GsRect.OffsetTo(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移返回新的偏移后的矩形
</member>
        <member name="M:GeoStar.Utility.GsRect.op_Subtraction(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRect.op_Addition(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 矩形偏移
</member>
        <member name="M:GeoStar.Utility.GsRect.RightBottom">
\brief 右下角
</member>
        <member name="M:GeoStar.Utility.GsRect.LeftBottom">
\brief 左下角
</member>
        <member name="M:GeoStar.Utility.GsRect.RightTop">
\brief 右上角
</member>
        <member name="M:GeoStar.Utility.GsRect.LeftTop">
\brief 左上角
</member>
        <member name="M:GeoStar.Utility.GsRect.Size">
\brief 大小
</member>
        <member name="M:GeoStar.Utility.GsRect.Location">
\brief 定位点
</member>
        <member name="M:GeoStar.Utility.GsRect.IsContain(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRect.IsContain(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRect.IsContain(System.Int32,System.Int32)">
\brief 是否包含
</member>
        <member name="M:GeoStar.Utility.GsRect.IsDisjoin(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否相离
</member>
        <member name="M:GeoStar.Utility.GsRect.IsDisjoin(System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 是否和线相离
</member>
        <member name="M:GeoStar.Utility.GsRect.Intersects(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 计算两个相交的部分
</member>
        <member name="M:GeoStar.Utility.GsRect.IsIntersects(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否相交
</member>
        <member name="M:GeoStar.Utility.GsRect.Center">
\brief 中心点
</member>
        <member name="M:GeoStar.Utility.GsRect.Offset(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 偏移一个位置
</member>
        <member name="M:GeoStar.Utility.GsRect.Height">
\brief 设置高度
</member>
        <member name="M:GeoStar.Utility.GsRect.Width">
\brief 设置宽度
</member>
        <member name="M:GeoStar.Utility.GsRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsRect.#ctor(GeoStar.Utility.GsRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsRect.#ctor(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsRect.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.GsRect">
\brief 创建一个int类型的矩形
</member>
        <member name="M:GeoStar.Utility.GsSizeF.#ctor(System.Int32,System.Int32)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsSizeF.#ctor(GeoStar.Utility.GsSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsSizeF.#ctor(GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsSizeF.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.GsSizeF">
\brief 设置float型宽度和高度
</member>
        <member name="M:GeoStar.Utility.GsSize.op_Inequality(GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否不等
</member>
        <member name="M:GeoStar.Utility.GsSize.op_Assign(GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 复制
</member>
        <member name="M:GeoStar.Utility.GsSize.op_Equality(GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否相等
</member>
        <member name="M:GeoStar.Utility.GsSize.#ctor(System.Int32,System.Int32)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsSize.#ctor(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 从点构造
</member>
        <member name="M:GeoStar.Utility.GsSize.#ctor(GeoStar.Utility.GsSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsSize.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.GsSize">
\brief 设置int型宽度和高度
</member>
        <member name="M:GeoStar.Utility.GsPTF.op_SubtractionAssignment(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief offset自身
</member>
        <member name="M:GeoStar.Utility.GsPTF.op_Subtraction(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 点Offset点
</member>
        <member name="M:GeoStar.Utility.GsPTF.op_AdditionAssignment(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief offset自身
</member>
        <member name="M:GeoStar.Utility.GsPTF.op_Addition(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 点Offset点
</member>
        <member name="M:GeoStar.Utility.GsPTF.#ctor(System.Single,System.Single)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsPTF.#ctor(System.Int32,System.Int32)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsPTF.#ctor(GeoStar.Utility.GsPTF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsPTF.#ctor(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 重载构造函数
</member>
        <member name="M:GeoStar.Utility.GsPTF.#ctor">
\brief 缺省构造函数
</member>
        <member name="T:GeoStar.Utility.GsPTF">
\brief 创建一个float类型的点结构体
</member>
        <member name="M:GeoStar.Utility.GsPT.op_SubtractionAssignment(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief offset自身
</member>
        <member name="M:GeoStar.Utility.GsPT.op_Subtraction(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 点Offset点
</member>
        <member name="M:GeoStar.Utility.GsPT.op_AdditionAssignment(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief offset自身
</member>
        <member name="M:GeoStar.Utility.GsPT.op_Addition(GeoStar.Utility.GsPT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 点Offset点
</member>
        <member name="T:GeoStar.Utility.GsPT">
\brief 创建一个int类型的点结构体
</member>
        <member name="M:GeoStar.Utility.GsDir.Delete(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 删除一个目录
\return 返回是否删除成功
</member>
        <member name="M:GeoStar.Utility.GsDir.Delete(System.Boolean)">
\brief 删除当前目录
\brief param recursive 是否删除子目录
\return 返回是否成功
</member>
        <member name="M:GeoStar.Utility.GsDir.op_Implicit~System.Boolean">
\brief bool操作符 
</member>
        <member name="M:GeoStar.Utility.GsDir.op_Assign(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值
\brief rhs对象
\return 自身
</member>
        <member name="M:GeoStar.Utility.GsDir.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 赋值
\brief rhs对象
\return 自身
</member>
        <member name="M:GeoStar.Utility.GsDir.op_Assign(GeoStar.Utility.GsDir!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值
\brief rhs对象
\return 自身
</member>
        <member name="M:GeoStar.Utility.GsDir.op_Equality(GeoStar.Utility.GsDir!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 判断目录是否为同一个目录
\brief rhs其他目录
\return 传入目录是否和本目录为同一个文件
</member>
        <member name="M:GeoStar.Utility.GsDir.Dirs(std.vector&lt;GeoStar.Utility.GsDir&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 目录下所有的子目录
\return 返回目录下的所有子目录对象
</member>
        <member name="M:GeoStar.Utility.GsDir.Dirs">
\brief 目录下所有的子目录
\return 返回目录下的所有子目录对象
</member>
        <member name="M:GeoStar.Utility.GsDir.File(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取目录下的文件
\return 目录下的文件
</member>
        <member name="M:GeoStar.Utility.GsDir.SubDir(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取子目录
\return 返回子目录对象
</member>
        <member name="M:GeoStar.Utility.GsDir.Files(std.vector&lt;GeoStar.Utility.GsFile&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 目录下所有的文件
\brief files保存文件对象的集合
\return 返回保存集合的指针
</member>
        <member name="M:GeoStar.Utility.GsDir.Files(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 目录下所有的文件
\brief searchPattern搜索条件，比如*.txt
\return 返回目录下的所有文件对象
</member>
        <member name="M:GeoStar.Utility.GsDir.Parent">
\brief 返回父目录
\return 返回父目录
</member>
        <member name="M:GeoStar.Utility.GsDir.IsRoot">
\brief 是否为根目录
\return 返回目录是否是跟目录
</member>
        <member name="M:GeoStar.Utility.GsDir.Exists">
\brief 目录是否存在
\return 返回目录是否存在
</member>
        <member name="M:GeoStar.Utility.GsDir.FullPath">
\brief 目录的完整路径
\return 返回目录的完整路径
</member>
        <member name="M:GeoStar.Utility.GsDir.Name">
\brief 目录的名称
\return 返回目录的名称
</member>
        <member name="M:GeoStar.Utility.GsDir.Create">
\brief 如果文件夹不存在则创建文件夹
</member>
        <member name="M:GeoStar.Utility.GsDir.Path">
\brief 获取目录的内部字符串路径
\return 返回目录字符串指针
</member>
        <member name="M:GeoStar.Utility.GsDir.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 目录的完整路径构造对象
\brief strName目录完整路径
</member>
        <member name="M:GeoStar.Utility.GsDir.#ctor(GeoStar.Utility.GsDir!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
\brief rhs拷贝的对象
</member>
        <member name="T:GeoStar.Utility.GsDir">
\brief 文件系统的目录
</member>
        <member name="M:GeoStar.Utility.GsFile.Delete(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 删除一个文件
\return 返回是否删除成功
</member>
        <member name="M:GeoStar.Utility.GsFile.Delete">
\brief 删除当前文件
\return 返回是否成功
</member>
        <member name="M:GeoStar.Utility.GsFile.ReadAll">
\brief 将文件当作文本文件全部读取为字符串
\return 输出文件中读取的字符串
</member>
        <member name="M:GeoStar.Utility.GsFile.ChangeExtension(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 改变文件路径的扩展名
\details 注意并非修改文件的扩展名。
\param strExt 新的扩展名，(不带.)
\return 返回文件的扩展名
</member>
        <member name="M:GeoStar.Utility.GsFile.Extension">
\brief 文件的扩展名，(不带.)
\return 返回文件的扩展名
</member>
        <member name="M:GeoStar.Utility.GsFile.Parent">
\brief 文件所在的目录
\return 分返文件所在的目录
</member>
        <member name="M:GeoStar.Utility.GsFile.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 赋值
\brief rhs其他文件
\return 自身
</member>
        <member name="M:GeoStar.Utility.GsFile.op_Implicit~System.Boolean">
\brief bool操作符 
</member>
        <member name="M:GeoStar.Utility.GsFile.op_Assign(GeoStar.Utility.GsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 赋值
\brief rhs其他文件
\return 自身
</member>
        <member name="M:GeoStar.Utility.GsFile.op_Equality(GeoStar.Utility.GsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 判断文件是否为同一个文件
\brief rhs其他文件
\return 传入文件是否和本文件为同一个文件
</member>
        <member name="M:GeoStar.Utility.GsFile.Size">
\brief 获取文件的大小
\return 返回文件大小，字节
</member>
        <member name="M:GeoStar.Utility.GsFile.Exists">
\brief 获取文件是否存在
\return 返回文件是否存在
</member>
        <member name="M:GeoStar.Utility.GsFile.FullPath">
\brief 获取文件完整路径
\return 返回文件的完整路径
</member>
        <member name="M:GeoStar.Utility.GsFile.Name(System.Boolean)">
\brief 获取文件名称，不包含路径
\return 返回文件的名称
</member>
        <member name="M:GeoStar.Utility.GsFile.Path">
\brief 获取文件的内部字符串路径
\return 返回路径字符串指针
</member>
        <member name="M:GeoStar.Utility.GsFile.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 文件的完整路径构造对象
\param strName文件完整路径
</member>
        <member name="M:GeoStar.Utility.GsFile.#ctor(GeoStar.Utility.GsFile!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
\brief rhs拷贝的对象
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.IsPathRooted(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取一个值，该值指示指定的路径字符串是包含绝对路径信息还是包含相对路径信息。
\brief path 要测试的路径
\return 如果 path 包含绝对路径，则为 true；否则为 false
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.IsFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 判断一个路径是否是文件
\brief path 路径
\return 返回路径是否是文件路径
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.PathRelativePathToW(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从两个绝对路径计算相对路径
\brief from 绝对路径，从这个绝对路径计算
\brief to  绝对路径，计算该路径相对于from的相对路径
\return 返回相对路径，如果输入路径无效则返回to
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.Combine(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 合并两个路径字符串
\brief path1 第一个路径
\brief path2 第二个路径
\return 包含合并的路径的字符串。如果指定的路径之一是零长度字符串，则该方法返回其他路径。如果 path2 包含绝对路径，则该方法返回 path2
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.ModuleFileName">
\brief 当前执行文件所在的文件路径
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.WorkingFolder">
\brief 工作目录
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.Exists(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 判断文件路径、目录路径是否存在
\param strFile 文件或者目录的路径
\return 返回路径是或否存在
</member>
        <member name="M:GeoStar.Utility.GsFileSystem.PathSeparator">
\brief 文件路径的的分隔符
</member>
        <member name="T:GeoStar.Utility.GsFileSystem">
\brief 文件路径相关的操作静态函数
</member>
        <member name="M:GeoStar.Utility.GsCRT._itoa(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)">
\brief 转换整数为字符串
\param dblValue 要转换的整数数
\param nNumOfDigits 要使用的进制[2~16]
\param pDstBuf 存储字符串的缓冲区
\return 返回输入缓冲区的首地址
</member>
        <member name="M:GeoStar.Utility.GsCRT._gcvt(System.Double,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\brief 转换浮点数据为字符串
\param dblValue 要转换的浮点数
\param nNumOfDigits 要使用的进制[2~16]
\param pDstBuf 存储字符串的缓冲区
\return 返回输入缓冲区的首地址
</member>
        <member name="M:GeoStar.Utility.GsCRT._access(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设定文件或文件夹的访问权限
\return 成功返回0，否则返回-1
</member>
        <member name="M:GeoStar.Utility.GsCRT._atof(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 把常量字符串转换成double类型
\return 返回double类型浮点
</member>
        <member name="M:GeoStar.Utility.GsCRT._atoi64(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 把常量字符串转换成long long类型
\return 返回long long类型整数
</member>
        <member name="M:GeoStar.Utility.GsCRT._stricmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 比较2个常量字符串的大小，忽略大小写
\return 返回1或0或-1
</member>
        <member name="M:GeoStar.Utility.GsCRT.strncmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 比较两个字符串第n个字符长的大小
\return 返回1或0或-1
</member>
        <member name="M:GeoStar.Utility.GsCRT.strnicmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 比较两个字符串第n个字符长的大小，忽略大小写。
\return 返回1或0或-1
</member>
        <member name="M:GeoStar.Utility.GsCRT._isinf(System.Double)">
\brief 判断double是否是无穷大、无穷小
\return 返回1标示是无穷大或无穷小的0标示不是
</member>
        <member name="M:GeoStar.Utility.GsCRT._isnan(System.Double)">
\brief 判断double是否是无效值
\return 返回1标示是有效的0标示无效
</member>
        <member name="M:GeoStar.Utility.GsCRT.strtoll(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32)">
\brief 按照进制转换字符串为64位整数
\param base 进制2,4,8,10,16等
</member>
        <member name="M:GeoStar.Utility.GsCRT.round(System.Double)">
\brief 计算四舍五入的结果
</member>
        <member name="T:GeoStar.Utility.GsCRT">
\brief 封装c的运行时函数CRT 
</member>
        <member name="T:GeoStar.Utility.GsByteBufferStream">
\brief 将bytebuffer作为stl标准流来处理。
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Swap(GeoStar.Utility.GsGrowByteBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 交换两个缓冲区的数据
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Copy(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 复制nLen个字节
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Reset">
\brief 释放内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Clear">
\brief 清除内存数据
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Allocate(System.UInt32)">
\brief 分配nLen个字节内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Append(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 函数重载，增加内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Append(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 增加内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.SetBufferValue(System.Int32)">
\brief 复制int类型数据的前real个字节
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.BufferSize">
\brief 分配nLen个字符内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.BufferHead">
\brief 分配8个字符内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Ptr">
\brief 分配8个字符内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.op_Implicit~System.Byte*">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Detach">
\brief 传递指针地址
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.Attach(System.Byte*)">
\brief 释放内存，传递指针地址
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 构造函数，分配nLen个字符内存
</member>
        <member name="M:GeoStar.Utility.GsGrowByteBuffer.#ctor(System.Byte*)">
\brief 构造函数，传递指针地址给类成员变量
</member>
        <member name="T:GeoStar.Utility.GsGrowByteBuffer">
\brief 增长型直接内存块，内存只增加不减少
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.FromBase64(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 从Base64字符串解码成为内存块
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.ToBase64">
\brief 将二进制内存块转换为base64编码字符串
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Copy(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 复制输入内存块中特定长度的数据
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Reset">
\brief 释放内存
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Clear">
\brief 清除内存数据
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Allocate(System.UInt32)">
\brief 分配特定字节长度的缓冲区。
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Insert(System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 从特定位置覆盖数据
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Append(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 向尾部增加一段字符串
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Append(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 向尾部添加一段数据
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.SetBufferValue(System.Int32)">
\brief 设置缓冲区的字节值为特定值
\details 类似memset的功能
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.BufferSize">
\brief 缓冲区的长度
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.BufferHead">
\brief 缓冲区的头指针
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.EndPtr">
\brief 缓冲区的尾指针
\details &gt;=此指针表示超出了缓冲区范围
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.Ptr">
\brief 缓冲区的头指针，相当于BufferHead()
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Boolean*">
\brief 类型转换重载函数，转换为BOOL指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Single*">
\brief 类型转换重载函数，转换为32位浮点指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Double*">
\brief 类型转换重载函数，转换为64位浮点指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.UInt64*">
\brief 类型转换重载函数，转换为无符号64位整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Int64*">
\brief 类型转换重载函数，转换为64位整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.UInt16*">
\brief 类型转换重载函数，转换为无符号16位整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Int16*">
\brief 类型转换重载函数，转换为16位整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.UInt32*">
\brief 类型转换重载函数，转换为无符号整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Int32*">
\brief 类型转换重载函数，转换为整数指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*">
\brief 类型转换重载函数，转换为字符指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.op_Implicit~System.Byte*">
\brief 类型转换重载函数，转换为无符号字符指针类型
</member>
        <member name="M:GeoStar.Utility.GsByteBuffer.#ctor">
\brief 受保护的构造函数，只有子类才能创建对象
</member>
        <member name="T:GeoStar.Utility.GsByteBuffer">
\brief 直接内存块
</member>
        <member name="M:GeoStar.Utility.GsLogger.op_LeftShift(GeoStar.Utility.LOG_LEVEL!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 输出日志
</member>
        <member name="M:GeoStar.Utility.GsLogger.Default">
\brief 缺省的日志对象
</member>
        <member name="M:GeoStar.Utility.GsLogger.Log(GeoStar.Utility.LOG_LEVEL,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 报告一段日志
</member>
        <member name="M:GeoStar.Utility.GsLogger.auto_flush">
\brief 日志操作后输出流是否刷新
\return 返回true表示刷新，否则，不刷新
</member>
        <member name="M:GeoStar.Utility.GsLogger.Dispose">
\brief 虚析构函数
</member>
        <member name="M:GeoStar.Utility.GsLogger.Name">
\brief 获取日志名
</member>
        <member name="M:GeoStar.Utility.GsLogger.CustomOutput(GeoStar.Utility.GsCustomLogOutput*)">
\brief 自定义输出
</member>
        <member name="M:GeoStar.Utility.GsLogger.LogLevel(GeoStar.Utility.LOG_LEVEL)">
\brief 获得日志级别，设置日志级别
</member>
        <member name="M:GeoStar.Utility.GsLogger.LastError">
\brief 最后报告的错误
</member>
        <member name="M:GeoStar.Utility.GsLogger.IsDebuging">
\brief 判断当前程序是否运行在调试状态
\details 仅仅对于windows平台下Visual Studio中调试状态有效，其他情况下一律返回false。
</member>
        <member name="M:GeoStar.Utility.GsLogger.#ctor">
\brief 构造函数
</member>
        <member name="T:GeoStar.Utility.GsLogger.GsLogStream">
\brief 日志流操作
</member>
        <member name="T:GeoStar.Utility.GsLogger">
\brief 创建日志
</member>
        <member name="T:GeoStar.Utility.GsFileCustomLogOutput">
\brief 将日志输出到文件
</member>
        <member name="T:GeoStar.Utility.GsCustomLogOutput">
\brief 自定义的输出管道
</member>
        <member name="T:GeoStar.Utility.LOG_LEVEL">
\brief 日志的级别	
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.EscapedNanosecond">
\brief 经过的时间（单位纳秒）
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.EscapedMillisecond">
\brief 经过的时间（单位毫秒）
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.EscapedSecond">
\brief 经过的时间（单位秒）
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.Start">
\brief 启动计时器
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.IsStarted">
\brief 计时器是否已经开始工作了
</member>
        <member name="M:GeoStar.Utility.GsStopWatch.#ctor(System.Boolean)">
\brief 构造
</member>
        <member name="T:GeoStar.Utility.GsStopWatch">
\brief 高精度计时器
</member>
        <member name="M:GeoStar.Utility.GsThreadPool.Shutdown">
\brief 关闭线程池
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsThreadPool.Trigger(GeoStar.Utility.GsThreadPoolParameter*)">
\brief 出发一个线程工作。
\brief pParameter线程池的参数，如果为空则缺省系统初始化线程池的参数
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsThreadPool.Initialize(GeoStar.Utility.GsThreadPoolParameter*,System.Int32,System.Int32)">
\brief 初始化线程池
\brief pParameter线程池的参数
\brief nMinThread线程池的最少线程数量
\brief nMaxThread线程池的最大线程数量
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsThreadPool.CreateWorker(GeoStar.Utility.GsThreadPoolParameter*)">
\brief 创建一个线程此工人对象
\brief pParameter线程池的参数
\return 线程池工人对象指针
</member>
        <member name="T:GeoStar.Utility.GsThreadPool">
\brief 线程池。继承此类实现CreateWorker函数，实现自定义的线程池
</member>
        <member name="M:GeoStar.Utility.GsThreadWorker.Terminate(GeoStar.Utility.GsThreadPoolParameter*)">
\brief 执行线程
\brief pParameter线程池的参数
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsThreadWorker.Execute(GeoStar.Utility.GsThreadPoolParameter*)">
\brief 执行线程
\brief pParameter线程池的参数
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsThreadWorker.Initialize(GeoStar.Utility.GsThreadPoolParameter*)">
\brief 初始化线程池工人。
\brief pParameter线程池的参数
\return 返回是否初始化成功
</member>
        <member name="T:GeoStar.Utility.GsThreadWorker">
\brief 线程工人，在线程池中工作的工人，继承此类实现工作线程线程上工作的工人
</member>
        <member name="T:GeoStar.Utility.GsThreadPoolParameter">
\brief 线程池参数
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.Execute">
\brief 执行线程，实现此纯虚函数
\return 返回执行是否成功
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.Wait">
\brief 发送关闭线程的通知后等待线程结束
\return 返回是否成功
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.ShouldStop">
\brief 是否需要停止，在Execute函数中判断线程是否接受到了外部的停止通知
\brief 调用Shutdown方法后ShouldStop会返回true
\return 如果线程可以结束了则返回true
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.ThreadID">
\brief 获取线程的ID
\return 返回线程的ID
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.Shutdown(System.Boolean)">
\brief 发送关闭线程的通知，或等待线程结束
\brief bWaitFinish是否等待线程结束
\return 返回是否成功
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.IsWorking">
\brief 实现是否在执行
\return 返回实现是否在执行
</member>
        <member name="M:GeoStar.Utility.GsWorkThread.StartThread">
\brief 启动线程
\return 返回执行是否成功
</member>
        <member name="T:GeoStar.Utility.GsWorkThread">
\brief 工作线程，通过继承工作线程类，实现类对多线程的支持
</member>
        <member name="M:GeoStar.Utility.GsGlobeConfig.Load(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 从xml或者配置中load配置信息
</member>
        <member name="M:GeoStar.Utility.GsGlobeConfig.Save">
\brief 将全局的配置保存为字符串
</member>
        <member name="M:GeoStar.Utility.GsGlobeConfig.Save(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将全局的配置保存为文件
</member>
        <member name="M:GeoStar.Utility.GsGlobeConfig.Instance">
\brief 全局的配置类根对象。
</member>
        <member name="T:GeoStar.Utility.GsGlobeConfig">
\brief 全局配置类
</member>
        <member name="M:GeoStar.Utility.GsConfig.Element">
\brief 获取配置的xml节点
</member>
        <member name="M:GeoStar.Utility.GsConfig.Remove(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 删除一个子配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Remove(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 删除一个子配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Clear">
\brief 清空所有的子配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Append(GeoStar.Utility.GsConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 将另外的分支添加到这个GsConfig中
</member>
        <member name="M:GeoStar.Utility.GsConfig.IntValue(System.Int32)">
\brief 获取特定类型的值
</member>
        <member name="M:GeoStar.Utility.GsConfig.IsNumberValue">
\brief 判断是否为特定值类型
</member>
        <member name="M:GeoStar.Utility.GsConfig.StringValue(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 获取字符串值，不存在则返回缺省值
</member>
        <member name="M:GeoStar.Utility.GsConfig.Value(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 设置配置的值
</member>
        <member name="M:GeoStar.Utility.GsConfig.Value">
\brief 配置的值
</member>
        <member name="M:GeoStar.Utility.GsConfig.op_Subscript(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 方括号操作符，设计调用Peek方法。
</member>
        <member name="M:GeoStar.Utility.GsConfig.Peek(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 选择一个子的配置，如果不存在的话并不会创建
</member>
        <member name="M:GeoStar.Utility.GsConfig.ChildrenName">
\brief 子配置的名称
</member>
        <member name="M:GeoStar.Utility.GsConfig.Children">
\brief 所有的子对象列表
</member>
        <member name="M:GeoStar.Utility.GsConfig.op_Equality(GeoStar.Utility.GsConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 是否为同一配置节点
</member>
        <member name="M:GeoStar.Utility.GsConfig.HasChildren">
\brief 是否存在子的配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Exist(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 是否存在某个子的配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Child(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 选择一个子的配置，如果不存在的话会创建这个子的配置并返回。
</member>
        <member name="M:GeoStar.Utility.GsConfig.Path">
\brief 获取配置的路径
</member>
        <member name="M:GeoStar.Utility.GsConfig.IsValid">
\brief 判断配置是否有效
</member>
        <member name="M:GeoStar.Utility.GsConfig.Type">
\brief 配置的数据类型。
</member>
        <member name="M:GeoStar.Utility.GsConfig.Description">
\brief 获取设置配置项的描述
</member>
        <member name="M:GeoStar.Utility.GsConfig.Name">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.GsConfig.Parent">
\brief 获取父亲配置对象
</member>
        <member name="M:GeoStar.Utility.GsConfig.IsRoot">
\brief 是否为根配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.Root">
\brief 获取根配置对象
</member>
        <member name="M:GeoStar.Utility.GsConfig.IsDirty">
\brief 判断配置是否发生了变化
</member>
        <member name="M:GeoStar.Utility.GsConfig.Save">
\brief 保存为XML字符串
</member>
        <member name="M:GeoStar.Utility.GsConfig.Save(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 保存到文件中
</member>
        <member name="M:GeoStar.Utility.GsConfig.FileName">
\brief 获取配置文件的文件名
\brief GsConfig其他配置项	
</member>
        <member name="M:GeoStar.Utility.GsConfig.Dispose">
\brief 析构函数
</member>
        <member name="M:GeoStar.Utility.GsConfig.op_Assign(GeoStar.Utility.GsConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 等号赋值操作符。 
\brief GsConfig其他配置项  
</member>
        <member name="M:GeoStar.Utility.GsConfig.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 从xml文件或者字符串打开配置
\brief strXML字符串或者配置文件路径
\brief bIsString判断strXML是xml字符串还是文件名，true表示strXML为纯的xml字符串
</member>
        <member name="M:GeoStar.Utility.GsConfig.#ctor(tinyxml2.XMLElement*)">
\brief  pEle配置项目的xml节点
</member>
        <member name="M:GeoStar.Utility.GsConfig.#ctor(GeoStar.Utility.GsConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 拷贝构造函数
</member>
        <member name="M:GeoStar.Utility.GsConfig.#ctor">
\brief 缺省构造，构造一个空的配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.#ctor(System.Int32)">
\brief 特殊构造空的配置
</member>
        <member name="M:GeoStar.Utility.GsConfig.copyto(tinyxml2.XMLNode*,tinyxml2.XMLDocument*)">
\brief 深度clone
</member>
        <member name="M:GeoStar.Utility.GsConfig.normalstring(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 替代xml中的转义
</member>
        <member name="M:GeoStar.Utility.GsConfig.findnamenode(tinyxml2.XMLElement*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 找寻指定名称的Node
</member>
        <member name="M:GeoStar.Utility.GsConfig.split(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.basic_string&lt;System.SByte!Syste">
\brief 分割字符串
</member>
        <member name="M:GeoStar.Utility.GsConfig.buildpath(tinyxml2.XMLNode*)">
\brief 构造路径
</member>
        <member name="M:GeoStar.Utility.GsConfig.replacestring(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifie">
\brief 内部私有函数
\brief 替代字符串中的一部分为新的部分
</member>
        <member name="M:GeoStar.Utility.GsConfig.Dirty">
\brief 如果数据变化则调用此函数设置标识。
</member>
        <member name="F:GeoStar.Utility.GsConfig.m_pEle">
\brief 配置的xml节点。
</member>
        <member name="F:GeoStar.Utility.GsConfig.m_pDoc">
\brief Document只有根配置才不为空。
</member>
        <member name="T:GeoStar.Utility.GsConfig">
\brief 配置类，实现配置的读取和写入。
</member>
        <member name="M:GeoStar.Utility.GsHash.MD5(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 计算文件MD5
</member>
        <member name="M:GeoStar.Utility.GsHash.MD5(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 任意内存块计算MD5
</member>
        <member name="M:GeoStar.Utility.GsHash.Hash128(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 字符串计算128位Hash
</member>
        <member name="M:GeoStar.Utility.GsHash.Hash128(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 任意内存块计算128位Hash
</member>
        <member name="M:GeoStar.Utility.GsHash.Hash64(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 计算字符串的64位Hash
</member>
        <member name="M:GeoStar.Utility.GsHash.Hash64(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 任意内存块计算64位Hash
</member>
        <member name="T:GeoStar.Utility.GsHash">
\brief 各类数据计算为Hash值
</member>
        <member name="M:GeoStar.Utility.GsAny.HashCode">
\brief 计算对象的哈希值
\return 返回哈希值。
</member>
        <member name="M:GeoStar.Utility.GsAny.ValuePtr">
\brief 数据的头指针
\return 返回数据的头指针地址
</member>
        <member name="M:GeoStar.Utility.GsAny.ValueSize">
\brief 数据的大小
\return 返回数据的长度
</member>
        <member name="M:GeoStar.Utility.GsAny.AllocBlob(System.Int32)">
\brief 分配空的blob空间，并设置类型为blob
</member>
        <member name="M:GeoStar.Utility.GsAny.Set(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 设置blob数据
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~GeoStar.Utility.GsRefObject*">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Double">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Single">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Boolean">
\brief 类型转换	
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.UInt64">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Int64">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.UInt32">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Int32">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.UInt16">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Int16">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.Byte">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte">
\brief 类型转换
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(GeoStar.Utility.GsRefObject*)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Boolean)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Double)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Single)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.UInt64)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Int64)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.UInt32)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Int32)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.UInt16)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Int16)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.Byte)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.op_Assign(GeoStar.Utility.GsAny!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 符号重载，返回引用类型
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(GeoStar.Utility.GsAny!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 类引用构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 无符号字符常量构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 字符常量构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(GeoStar.Utility.GsRefObject*)">
\brief GsRefObject类指针的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Boolean)">
\brief bool类型构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Double)">
\brief 64位浮点构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Single)">
\brief 32位浮点构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.UInt64)">
\brief 无符号64位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Int64)">
\brief 64位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.UInt32)">
\brief 无符号32位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Int32)">
\brief 32位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.UInt16)">
\brief 无符号16位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Int16)">
\brief 16位的构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.Byte)">
\brief 无符号字符构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\brief 单字符构造函数
</member>
        <member name="M:GeoStar.Utility.GsAny.#ctor">
\brief 构造函数重载
</member>
        <member name="F:GeoStar.Utility.GsAny.Type">
\brief 数据类型
</member>
        <member name="T:GeoStar.Utility.GsAny">
\brief 存储各种类型数据的对象。
</member>
        <member name="T:GeoStar.Utility.GsVarType">
\brief GsAny对象的数据类型
</member>
        <member name="F:eBlob">
\brief 二进制数据
</member>
        <member name="F:eObject">
\brief GsRefObject*
</member>
        <member name="F:eBool">
\brief bool
</member>
        <member name="F:eString">
\brief const char*
</member>
        <member name="F:eR8">
\brief double
</member>
        <member name="F:eR4">
\brief float
</member>
        <member name="F:eUI8">
\brief unsigned long long
</member>
        <member name="F:eUI4">
\brief unsigned int
</member>
        <member name="F:eUI2">
\brief unsigned short
</member>
        <member name="F:eUI1">
\brief unsigned char
</member>
        <member name="F:eI8">
\brief long long
</member>
        <member name="F:eI4">
\brief int
</member>
        <member name="F:eI2">
\brief short
</member>
        <member name="F:eI1">
\brief char
</member>
        <member name="F:eEmpty">
\brief 空数据
</member>
        <member name="M:GeoStar.Utility.GsClassFactory.CreateInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 创建类的实例
</member>
        <member name="M:GeoStar.Utility.GsClassFactory.RegisterFactoryCreate(=FUNC:GeoStar.Utility.GsRefObject*(System.Void),System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 注册类创建函数
</member>
        <member name="T:GeoStar.Utility.GsClassFactory">
\brief GsRefObjectPtr
\brief 类工厂，用于注册类创建函数和创建类。
</member>
        <member name="M:GeoStar.Utility.GsRefObject.RefCount">
\brief 获取引用计数的值
\return 返回当前引用计数的值
</member>
        <member name="M:GeoStar.Utility.GsRefObject.Release">
\brief 减少一个引用计数
\return 返回减少后的引用计数值
</member>
        <member name="M:GeoStar.Utility.GsRefObject.AddRef">
\brief 增加一个引用计数
\return 返回增加后的引用计数值
</member>
        <member name="M:GeoStar.Utility.GsRefObject.OnFinalRelease">
\brief 当引用计数为0的时候会激发此函数，继承类可以覆盖此函数做特殊的实现
\return 返回false则GsRefObject不会主动删除对象
</member>
        <member name="T:GeoStar.Utility.GsRefObject">
\brief 引用对象，通过继承此类实现对象对引用计数的支持。
</member>
        <member name="M:GeoStar.Utility.GsNoneCopyable.op_Assign(GeoStar.Utility.GsNoneCopyable!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief 操作符重载，返回对象的引用
</member>
        <member name="T:GeoStar.Utility.GsNoneCopyable">
\brief 不可拷贝对象，通过继承此类实现对象的不可拷贝
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.IsMatch(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 通配符匹配字符串
\details 通过 *a  来匹配   aaaa或者bbba或者ccca等，*代表1到N个字符，？代表1个字符
\param  pattern 通配符匹配模式如（*?abc)
\param str 要匹配的字符串
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.EndWith(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 字符串是否以某个之结束。
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.StartWith(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\brief 字符串是否以某个之串开头。
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.TrimRight(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 剔除字符串尾部的空白字符
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.TrimLeft(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 剔除字符串前面空白字符
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.Trim(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 剔除字符串前面的空白字符
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.Replace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将字符串中的制定字符串替换为新的部分
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.Split(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\brief 将字符串分割为若干子串
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.Split(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将字符串分割为若干子串
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.IsNullOrEmpty(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 字符串是否为空或者无效字符串
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.Format(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
\brief 格式化字符串
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Boolean)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Double)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Single)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.UInt64)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Int64)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.UInt32)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Int32)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.UInt16)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Int16)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.Byte)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\brief 转换为字符串对象
</member>
        <member name="M:GeoStar.Utility.GsStringHelp.ToString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 转换为字符串对象
</member>
        <member name="T:GeoStar.Utility.GsStringHelp">
\brief 提供字符串相关的一些功能函数。
</member>
        <member name="T:GeoStar.Utility.GsLocal">
\brief 将字符串转换为本地字符串
</member>
        <member name="T:GeoStar.Utility.GsUtf8">
\brief 将字符串转换为utf8字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.ToLocal(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将Utf8的字符串转换为本地字符串
\return 返回转换为本地编码的字符串。
</member>
        <member name="M:GeoStar.Utility.GsEncoding.LocalToUnicode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将MBCS本地的窄字符串转换Unicode宽字符串
\return 返回Unicode编码的字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.Utf8ToUnicode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将utf8的窄字符串转换Unicode宽字符串
\return 返回Unicode编码的字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.ToLocal(System.Char!System.Runtime.CompilerServices.IsConst*)">
\brief 将本地Unicode字符串转换为MBCS的本地窄字符串
\return 返回转换为utf8编码的字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.ToUtf8(System.Char!System.Runtime.CompilerServices.IsConst*)">
\brief 将本地Unicode字符串转换为utf8字符串
\return 返回转换为utf8编码的字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.ToUtf8(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 将本地字符串转换为utf8字符串
\return 返回转换为utf8编码的字符串
</member>
        <member name="M:GeoStar.Utility.GsEncoding.IsUtf8(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief 判断字符串是否是utf8字符串。
\param  str 要判断的字符串
\return 返回输入字符串是否是utf8字符串
</member>
        <member name="T:GeoStar.Utility.GsEncoding">
\brief 实现字符串编码相关的功能
</member>
        <member name="T:GeoStar.Utility.GsCA2W">
\brief 窄字符串转宽字符
</member>
        <member name="T:GeoStar.Utility.GsCW2A">
\brief 宽字符串转窄字符
</member>
        <member name="T:GeoStar.Utility.GsCodePageID">
\brief 编码id
</member>
        <member name="M:GeoStar.Utility.GsMath.NaN">
\brief 无效double
</member>
        <member name="M:GeoStar.Utility.GsMath.ToDegree(System.Double)">
\brief 弧度转换为度
</member>
        <member name="M:GeoStar.Utility.GsMath.ToRadian(System.Double)">
\brief 度转换为弧度
</member>
        <member name="M:GeoStar.Utility.GsMath.Round(System.Single)">
\brief 四舍五入到最邻近的整数
</member>
        <member name="M:GeoStar.Utility.GsMath.Round(System.Double)">
\brief 四舍五入到最邻近的整数
</member>
        <member name="M:GeoStar.Utility.GsMath.IsEqual(System.Single,System.Single)">
\brief 判断两个float是否相等
</member>
        <member name="M:GeoStar.Utility.GsMath.IsEqual(System.Double,System.Double)">
\brief 判断两个double是否相等
</member>
        <member name="T:GeoStar.Utility.GsMath">
\brief 数学相关的函数
</member>
        <member name="M:Json.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Output using the StyledStreamWriter.
\see Json::operator&gt;&gt;()
</member>
        <member name="M:Json.StyledStreamWriter.write(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Serialize a Value in <a HREF="http://www.json.org">JSON</a> format.
   * \param out Stream to write to. (Can be ostringstream, e.g.)
   * \param root Value to serialize.
   * \note There is no point in deriving from Writer, since write() should not
   * return a value.

</member>
        <member name="M:Json.StyledWriter.write(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Serialize a Value in <a HREF="http://www.json.org">JSON</a> format.
   * \param root Value to serialize.
   * \return String containing the JSON document that represents the root value.

</member>
        <member name="M:Json.FastWriter.dropNullPlaceholders">
\brief Drop the "null" string from the writer's output for nullValues.
   * Strictly speaking, this is not valid JSON. But when the output is being
   * fed to a browser's Javascript, it makes for smaller output and the
   * browser can handle the output just fine.

</member>
        <member name="T:Json.FastWriter">
\brief Outputs a Value in <a HREF="http://www.json.org">JSON</a> format
 *without formatting (not human friendly).
 *
 * The JSON document is written in a single line. It is not intended for 'human'
 *consumption,
 * but may be usefull to support feature such as RPC where bandwith is limited.
 * \sa Reader, Value
 * \deprecated Use StreamWriterBuilder.

</member>
        <member name="T:Json.Writer">
\brief Abstract class for writers.
 * \deprecated Use StreamWriter. (And really, this is an implementation detail.)

</member>
        <member name="M:Json.StreamWriterBuilder.setDefaults(Json.Value*)">
Called by ctor, but you can use this to reset settings_.
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_writer.cpp StreamWriterBuilderDefaults

</member>
        <member name="M:Json.StreamWriterBuilder.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
A simple way to update a specific setting.

</member>
        <member name="M:Json.StreamWriterBuilder.validate(Json.Value*)">
\return true if 'settings' are legal and consistent;
   *   otherwise, indicate bad settings via 'invalid'.

</member>
        <member name="M:Json.StreamWriterBuilder.newStreamWriter">
\throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="M:Json.writeString(Json.StreamWriter.Factory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Write into stringstream, then return string, for convenience.
 * A StreamWriter will be created from the factory, used, and then deleted.

</member>
        <member name="M:Json.StreamWriter.Factory.newStreamWriter">
\brief Allocate a CharReader via operator new().
     * \throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="T:Json.StreamWriter.Factory">
\brief A simple abstract factory.

</member>
        <member name="M:Json.StreamWriter.write(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*)">
Write Value into document as configured in sub-class.
      Do not take ownership of sout, but maintain a reference during function.
      \pre sout != NULL
      \return zero on success (For now, we always return zero, so check the stream instead.)
      \throw std::exception possibly, depending on configuration

</member>
        <member name="M:Json.parseFromStream(Json.CharReader.Factory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_istream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)">
Consume entire stream and use its begin/end.
  * Someday we might have a real StreamReader, but for now this
  * is convenient.

</member>
        <member name="M:Json.CharReaderBuilder.strictMode(Json.Value*)">
Same as old Features::strictMode().
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_reader.cpp CharReaderBuilderStrictMode

</member>
        <member name="M:Json.CharReaderBuilder.setDefaults(Json.Value*)">
Called by ctor, but you can use this to reset settings_.
   * \pre 'settings' != NULL (but Json::null is fine)
   * \remark Defaults:
   * \snippet src/lib_json/json_reader.cpp CharReaderBuilderDefaults

</member>
        <member name="M:Json.CharReaderBuilder.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
A simple way to update a specific setting.

</member>
        <member name="M:Json.CharReaderBuilder.validate(Json.Value*)">
\return true if 'settings' are legal and consistent;
   *   otherwise, indicate bad settings via 'invalid'.

</member>
        <member name="F:Json.CharReaderBuilder.settings_">
Configuration of this builder.
    These are case-sensitive.
    Available settings (case-sensitive):
    - `"collectComments": false or true`
      - true to collect comment and allow writing them
        back during serialization, false to discard comments.
        This parameter is ignored if allowComments is false.
    - `"allowComments": false or true`
      - true if comments are allowed.
    - `"strictRoot": false or true`
      - true if root must be either an array or an object value
    - `"allowDroppedNullPlaceholders": false or true`
      - true if dropped null placeholders are allowed. (See StreamWriterBuilder.)
    - `"allowNumericKeys": false or true`
      - true if numeric object keys are allowed.
    - `"allowSingleQuotes": false or true`
      - true if '' are allowed for strings (both keys and values)
    - `"stackLimit": integer`
      - Exceeding stackLimit (recursive depth of `readValue()`) will
        cause an exception.
      - This is a security issue (seg-faults caused by deeply nested JSON),
        so the default is low.
    - `"failIfExtra": false or true`
      - If true, `parse()` returns false when extra non-whitespace trails
        the JSON value in the input string.
    - `"rejectDupKeys": false or true`
      - If true, `parse()` returns false when a key is duplicated within an object.

    You can examine 'settings_` yourself
    to see the defaults. You can also write and read them just like any
    JSON Value.
    \sa setDefaults()

</member>
        <member name="M:Json.CharReader.Factory.newCharReader">
\brief Allocate a CharReader via operator new().
     * \throw std::exception if something goes wrong (e.g. invalid settings)

</member>
        <member name="M:Json.CharReader.parse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   document.
   * The document must be a UTF-8 encoded string containing the document to read.
   *
   * \param beginDoc Pointer on the beginning of the UTF-8 encoded string of the
   document to read.
   * \param endDoc Pointer on the end of the UTF-8 encoded string of the
   document to read.
   *        Must be &gt;= beginDoc.
   * \param root [out] Contains the root value of the document if it was
   *             successfully parsed.
   * \param errs [out] Formatted error messages (if not NULL)
   *        a user friendly string that lists errors in the parsed
   * document.
   * \return \c true if the document was successfully parsed, \c false if an
   error occurred.

</member>
        <member name="T:Json.CharReader">
Interface for reading JSON from a char array.

</member>
        <member name="M:Json.Reader.good">
\brief Return whether there are any errors.
   * \return \c true if there are no errors to report \c false if
   * errors have occurred.

</member>
        <member name="M:Json.Reader.pushError(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Add a semantic error message with extra context.
   * \param value JSON Value location associated with the error
   * \param message The error message.
   * \param extra Additional JSON Value location to contextualize the error
   * \return \c true if the error was successfully added, \c false if either
   * Value offset exceeds the document size.

</member>
        <member name="M:Json.Reader.pushError(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Add a semantic error message.
   * \param value JSON Value location associated with the error
   * \param message The error message.
   * \return \c true if the error was successfully added, \c false if the
   * Value offset exceeds the document size.

</member>
        <member name="M:Json.Reader.getStructuredErrors">
\brief Returns a vector of structured erros encounted while parsing.
   * \return A (possibly empty) vector of StructuredError objects. Currently
   *         only one error can be returned, but the caller should tolerate
   * multiple
   *         errors.  This can occur if the parser recovers from a non-fatal
   *         parse error and then encounters additional errors.

</member>
        <member name="M:Json.Reader.getFormattedErrorMessages">
\brief Returns a user friendly string that list errors in the parsed
   * document.
   * \return Formatted error message with the list of errors with their location
   * in
   *         the parsed document. An empty string is returned if no error
   * occurred
   *         during parsing.

</member>
        <member name="M:Json.Reader.getFormatedErrorMessages">
\brief Returns a user friendly string that list errors in the parsed
   * document.
   * \return Formatted error message with the list of errors with their location
   * in
   *         the parsed document. An empty string is returned if no error
   * occurred
   *         during parsing.
   * \deprecated Use getFormattedErrorMessages() instead (typo fix).

</member>
        <member name="M:Json.Reader.parse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   document.
   * \param beginDoc Pointer on the beginning of the UTF-8 encoded string of the
   document to read.
   * \param endDoc Pointer on the end of the UTF-8 encoded string of the
   document to read.
   *               Must be &gt;= beginDoc.
   * \param root [out] Contains the root value of the document if it was
   *             successfully parsed.
   * \param collectComments \c true to collect comment and allow writing them
   back during
   *                        serialization, \c false to discard comments.
   *                        This parameter is ignored if
   Features::allowComments_
   *                        is \c false.
   * \return \c true if the document was successfully parsed, \c false if an
   error occurred.

</member>
        <member name="M:Json.Reader.parse(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\brief Read a Value from a <a HREF="http://www.json.org">JSON</a>
   * document.
   * \param document UTF-8 encoded string containing the document to read.
   * \param root [out] Contains the root value of the document if it was
   *             successfully parsed.
   * \param collectComments \c true to collect comment and allow writing them
   * back during
   *                        serialization, \c false to discard comments.
   *                        This parameter is ignored if
   * Features::allowComments_
   *                        is \c false.
   * \return \c true if the document was successfully parsed, \c false if an
   * error occurred.

</member>
        <member name="M:Json.Reader.#ctor(Json.Features!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Constructs a Reader allowing the specified feature set
   * for parsing.

</member>
        <member name="M:Json.Reader.#ctor">
\brief Constructs a Reader allowing all features
   * for parsing.

</member>
        <member name="T:Json.Reader.StructuredError">
\brief An error tagged with where in the JSON text it was encountered.
   *
   * The offsets give the [start, limit) range of bytes within the text. Note
   * that this is bytes, not codepoints.
   *

</member>
        <member name="T:Json.Reader">
\brief Unserialize a <a HREF="http://www.json.org">JSON</a> document into a
 *Value.
 *
 * \deprecated Use CharReader and CharReaderBuilder.

</member>
        <member name="T:Json.ValueIterator">
\brief Iterator for object and array value.

</member>
        <member name="T:Json.ValueConstIterator">
\brief const iterator for object and array value.
 *

</member>
        <member name="M:Json.ValueIteratorBase.memberName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)">
Return the member name of the referenced Value, or NULL if it is not an
objectValue.
\note Better version than memberName(). Allows embedded nulls.
</member>
        <member name="M:Json.ValueIteratorBase.memberName">
Return the member name of the referenced Value. "" if it is not an
objectValue.
\deprecated This cannot be used for UTF-8 strings, since there can be embedded nulls.
</member>
        <member name="M:Json.ValueIteratorBase.name">
Return the member name of the referenced Value, or "" if it is not an
objectValue.
\note Avoid `c_str()` on result, as embedded zeroes are possible.
</member>
        <member name="M:Json.ValueIteratorBase.index">
Return the index of the referenced Value, or -1 if it is not an arrayValue.
</member>
        <member name="M:Json.ValueIteratorBase.key">
Return either the index or the member name of the referenced value as a
Value.
</member>
        <member name="T:Json.ValueIteratorBase">
\brief base class for Value iterators.
 *

</member>
        <member name="M:Json.Path.make(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates the "path" to access the specified node and returns a reference on
the node.
</member>
        <member name="T:Json.Path">
\brief Experimental and untested: represents a "path" to access a node.
 *
 * Syntax:
 * - "." =&gt; root node
 * - ".[n]" =&gt; elements at index 'n' of root node (an array value)
 * - ".name" =&gt; member named 'name' of root node (an object value)
 * - ".name1.name2.name3"
 * - ".[0][1][2].name1[3]"
 * - ".%" =&gt; member name is provided as parameter
 * - ".[%]" =&gt; index is provied as parameter

</member>
        <member name="T:Json.PathArgument">
\brief Experimental and untested: represents an element of the "path" to
 * access a node.

</member>
        <member name="M:Json.Value.getComment(Json.CommentPlacement)">
Include delimiters and embedded newlines.
</member>
        <member name="M:Json.Value.setComment(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.CommentPlacement)">
Comments must be //... or /* ... */
</member>
        <member name="M:Json.Value.setComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,Json.CommentPlacement)">
Comments must be //... or /* ... */
</member>
        <member name="M:Json.Value.setComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.CommentPlacement)">
\deprecated Always pass len.
</member>
        <member name="M:Json.Value.getMemberNames">
\brief Return a list of the member names.

If null, return an empty list.
\pre type() is objectValue or nullValue
\post if type() was nullValue, it remains nullValue
</member>
        <member name="M:Json.Value.isMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return true if the object has a member named key.
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.isMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Return true if the object has a member named key.
\note 'key' must be null-terminated.
</member>
        <member name="M:Json.Value.removeIndex(System.UInt32,Json.Value*)">
\brief Remove the indexed array element.

      O(n) expensive operations.
      Update 'removed' iff removed.
      \return true iff removed (no exceptions)

</member>
        <member name="M:Json.Value.removeMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*)">
\brief Remove the named map member.

      Update 'removed' iff removed.
      \param key may contain embedded nulls.
      \return true iff removed (no exceptions)

</member>
        <member name="M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*)">
Same as removeMember(const char* key, const char* end, Value* removed),
but 'key' is null-terminated.
</member>
        <member name="M:Json.Value.removeMember(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Same as removeMember(const char*)
\param key may contain embedded nulls.
\deprecated
</member>
        <member name="M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief Remove and return the named member.

Do nothing if it did not exist.
\return the removed Value, or null.
\pre type() is objectValue or nullValue
\post type() is unchanged
\deprecated
</member>
        <member name="M:Json.Value.demand(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Most general and efficient version of object-mutators.
\note As stated elsewhere, behavior is undefined if (end-key) &gt;= 2^30
\return non-zero, but JSON_ASSERT if this is neither object nor nullValue.
</member>
        <member name="M:Json.Value.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Most general and efficient version of isMember()const, get()const,
and operator[]const
\note As stated elsewhere, behavior is undefined if (end-key) &gt;= 2^30
</member>
        <member name="M:Json.Value.get(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.get(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return the member named key if it exist, defaultValue otherwise.
\note deep copy
</member>
        <member name="M:Json.Value.op_Subscript(Json.StaticString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Access an object value by name, create a null member if it does not
   exist.

   * If the object has no entry for that name, then the member name used to store
   * the new entry is not duplicated.
   * Example of use:
   * \code
   * Json::Value object;
   * static const StaticString code("code");
   * object[code] = 1234;
   * \endcode

</member>
        <member name="M:Json.Value.op_Subscript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Access an object value by name, create a null member if it does not exist.
\param key may contain embedded nulls.

Access an object value by name, returns null if there is no member with
that name.
\param key may contain embedded nulls.
</member>
        <member name="M:Json.Value.op_Subscript(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Access an object value by name, create a null member if it does not exist.
\note Because of our implementation, keys are limited to 2^30 -1 chars.
 Exceeding that will cause an exception.

Access an object value by name, returns null if there is no member with
that name.
</member>
        <member name="M:Json.Value.append(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Append value to array at the end.

Equivalent to jsonvalue[jsonvalue.size()] = value;
</member>
        <member name="M:Json.Value.get(System.UInt32,Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
If the array contains at least index+1 elements, returns the element
value,
otherwise returns defaultValue.
</member>
        <member name="M:Json.Value.op_Subscript(System.Int32)">
Access an array element (zero based index ).
If the array contains less than index element, then null value are
inserted
in the array so that its size is index+1.
(You may need to say 'value[0u]' to get your compiler to distinguish
 this from the operator[] which takes a string.)

Access an array element (zero based index )
(You may need to say 'value[0u]' to get your compiler to distinguish
 this from the operator[] which takes a string.)
</member>
        <member name="M:Json.Value.op_Subscript(System.UInt32)">
Access an array element (zero based index ).
If the array contains less than index element, then null value are
inserted
in the array so that its size is index+1.
(You may need to say 'value[0u]' to get your compiler to distinguish
 this from the operator[] which takes a string.)

Access an array element (zero based index )
(You may need to say 'value[0u]' to get your compiler to distinguish
 this from the operator[] which takes a string.)
</member>
        <member name="M:Json.Value.resize(System.UInt32)">
Resize the array to size elements.
New elements are initialized to null.
May only be called on nullValue or arrayValue.
\pre type() is arrayValue or nullValue
\post type() is arrayValue
</member>
        <member name="M:Json.Value.clear">
Remove all object members and array elements.
\pre type() is arrayValue, objectValue, or nullValue
\post type() is unchanged
</member>
        <member name="M:Json.Value.op_LogicalNot">
Return isNull()
</member>
        <member name="M:Json.Value.empty">
\brief Return true if empty array, empty object, or null;
otherwise, false.
</member>
        <member name="M:Json.Value.size">
Number of values in array or object
</member>
        <member name="M:Json.Value.getString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)">
Get raw char* of string-value.
   *  \return false if !string. (Seg-fault if str or end are NULL.)

</member>
        <member name="M:Json.Value.op_LessThan(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare payload only, not comments etc.
</member>
        <member name="M:Json.Value.swapPayload(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Swap values but leave comments and source offsets in place.
</member>
        <member name="M:Json.Value.swap(Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Swap everything.
</member>
        <member name="M:Json.Value.op_Assign(Json.Value)">
Deep copy, then swap(other).
\note Over-write existing comments. To preserve comments, use #swapPayload().
</member>
        <member name="M:Json.Value.#ctor(Json.Value!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Deep copy.
</member>
        <member name="M:Json.Value.#ctor(Json.StaticString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Constructs a value from a static string.

   * Like other value string constructor but do not duplicate the string for
   * internal storage. The given string must remain alive after the call to this
   * constructor.
   * \note This works only for null-terminated strings. (We cannot change the
   *   size of this class, so we have nowhere to store the length,
   *   which might be computed later for various operations.)
   *
   * Example of usage:
   * \code
   * static StaticString foo("some text");
   * Json::Value aValue(foo);
   * \endcode

</member>
        <member name="M:Json.Value.#ctor(Json.ValueType)">
\brief Create a default Value of the given type.

    This is a very useful constructor.
    To create an empty array, pass arrayValue.
    To create an empty object, pass objectValue.
    Another Value can then be set to this one by assignment.
This is useful since clear() and resize() will not alter types.

    Examples:
\code
Json::Value null_value; // null
Json::Value arr_value(Json::arrayValue); // []
Json::Value obj_value(Json::objectValue); // {}
\endcode

</member>
        <member name="F:Json.Value.maxUInt64">
Maximum unsigned 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxInt64">
Maximum signed 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minInt64">
Minimum signed 64 bits int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxUInt">
Maximum unsigned int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxInt">
Maximum signed int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minInt">
Minimum signed int value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxLargestUInt">
Maximum unsigned integer value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.maxLargestInt">
Maximum signed integer value that can be stored in a Json::Value.
</member>
        <member name="F:Json.Value.minLargestInt">
Minimum signed integer value that can be stored in a Json::Value.
</member>
        <member name="T:Json.StaticString">
\brief Lightweight wrapper to tag static string.
 *
 * Value constructor and objectValue member assignement takes advantage of the
 * StaticString and avoid the cost of string duplication when storing the
 * string or the member name.
 *
 * Example of usage:
 * \code
 * Json::Value aValue( StaticString("some text") );
 * Json::Value object;
 * static const StaticString code("code");
 * object[code] = 1234;
 * \endcode

</member>
        <member name="F:numberOfCommentPlacement">
root value)
</member>
        <member name="T:Json.ValueType">
\brief Type of the value held by a Value object.

</member>
        <member name="M:Json.throwLogicError(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
used internally
</member>
        <member name="M:Json.throwRuntimeError(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
used internally
</member>
        <member name="T:Json.LogicError">
Exceptions thrown by JSON_ASSERT/JSON_FAIL macros.
 *
 * These are precondition-violations (user bugs) and internal errors (our bugs).
 * 
 * \remark derived from Json::Exception

</member>
        <member name="T:Json.RuntimeError">
Exceptions which the user cannot easily avoid.
 *
 * E.g. out-of-memory (when we use malloc), stack-overflow, malicious input
 * 
 * \remark derived from Json::Exception

</member>
        <member name="T:Json.Exception">
Base class for all exceptions we throw.
 *
 * We use nothing but these internally. Of course, STL can throw others.

</member>
        <member name="F:Json.Features.allowNumericKeys_">
\c true if numeric object key are allowed. Default: \c false.
</member>
        <member name="F:Json.Features.allowDroppedNullPlaceholders_">
\c true if dropped null placeholders are allowed. Default: \c false.
</member>
        <member name="F:Json.Features.strictRoot_">
\c true if root must be either an array or an object value. Default: \c
false.
</member>
        <member name="F:Json.Features.allowComments_">
\c true if comments are allowed. Default: \c true.
</member>
        <member name="M:Json.Features.#ctor">
\brief Initialize the configuration like JsonConfig::allFeatures;

</member>
        <member name="M:Json.Features.strictMode">
\brief A configuration that is strictly compatible with the JSON
   * specification.
   * - Comments are forbidden.
   * - Root object must be either an array or an object value.
   * - Assumes Value strings are encoded in UTF-8

</member>
        <member name="T:Json.Features">
\brief Configuration passed to reader and writer.
 * This configuration object can be used to force the Reader or Writer
 * to behave in a standard conforming way.

</member>
        <member name="M:tinyxml2.XMLPrinter.PrintSpace(System.Int32)">
Prints out the space before an element. You may override to change
	    the space and tabs used. A PrintSpace() override should call Print().

</member>
        <member name="M:tinyxml2.XMLPrinter.ClearBuffer">
If in print to memory mode, reset the buffer to the
beginning.

</member>
        <member name="M:tinyxml2.XMLPrinter.CStrSize">
If in print to memory mode, return the size
of the XML file in memory. (Note the size returned
includes the terminating null.)

</member>
        <member name="M:tinyxml2.XMLPrinter.CStr">
If in print to memory mode, return a pointer to
the XML file in memory.

</member>
        <member name="M:tinyxml2.XMLPrinter.PushComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Add a comment
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.Double)">
Add a text node from a double.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.Single)">
Add a text node from a float.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.Boolean)">
Add a text node from a bool.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.UInt32)">
Add a text node from an unsigned.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.Int32)">
Add a text node from an integer.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Add a text node.
</member>
        <member name="M:tinyxml2.XMLPrinter.CloseElement(System.Boolean)">
If streaming, close the Element.
</member>
        <member name="M:tinyxml2.XMLPrinter.PushAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
If streaming, add an attribute to an open element.
</member>
        <member name="M:tinyxml2.XMLPrinter.OpenElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
If streaming, start writing an element.
        The element must be closed with CloseElement()

</member>
        <member name="M:tinyxml2.XMLPrinter.PushHeader(System.Boolean,System.Boolean)">
If streaming, write the BOM and declaration. 
</member>
        <member name="M:tinyxml2.XMLPrinter.#ctor(_iobuf*,System.Boolean,System.Int32)">
Construct the printer. If the FILE* is specified,
    	this will print to the FILE. Else it will print
    	to memory, and the result is available in CStr().
    	If 'compact' is set to true, then output is created
    	with only required whitespace and newlines.

</member>
        <member name="T:tinyxml2.XMLConstHandle">
A variant of the XMLHandle class for working with const XMLNodes and Documents. It is the
same in all regards, except for the 'const' qualifiers. See XMLHandle for API.

</member>
        <member name="M:tinyxml2.XMLHandle.ToDeclaration">
Safe cast to XMLDeclaration. This can return null.
</member>
        <member name="M:tinyxml2.XMLHandle.ToUnknown">
Safe cast to XMLUnknown. This can return null.
</member>
        <member name="M:tinyxml2.XMLHandle.ToText">
Safe cast to XMLText. This can return null.
</member>
        <member name="M:tinyxml2.XMLHandle.ToElement">
Safe cast to XMLElement. This can return null.
</member>
        <member name="M:tinyxml2.XMLHandle.ToNode">
Safe cast to XMLNode. This can return null.
</member>
        <member name="M:tinyxml2.XMLHandle.NextSiblingElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the next sibling element of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.NextSibling">
Get the next sibling of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.PreviousSiblingElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the previous sibling element of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.PreviousSibling">
Get the previous sibling of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.LastChildElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the last child element of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.LastChild">
Get the last child of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.FirstChildElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the first child element of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.FirstChild">
Get the first child of this handle.
</member>
        <member name="M:tinyxml2.XMLHandle.op_Assign(tinyxml2.XMLHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment
</member>
        <member name="M:tinyxml2.XMLHandle.#ctor(tinyxml2.XMLHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor
</member>
        <member name="M:tinyxml2.XMLHandle.#ctor(tinyxml2.XMLNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Create a handle from a node.
</member>
        <member name="M:tinyxml2.XMLHandle.#ctor(tinyxml2.XMLNode*)">
Create a handle from any node (at any depth of the tree.) This can be a null pointer.
</member>
        <member name="M:tinyxml2.XMLDocument.Clear">
Clear the document, resetting it to the initial state.
</member>
        <member name="M:tinyxml2.XMLDocument.PrintError">
If there is an error, print it to stdout.
</member>
        <member name="M:tinyxml2.XMLDocument.GetErrorStr2">
Return a possibly helpful secondary diagnostic location or string.
</member>
        <member name="M:tinyxml2.XMLDocument.GetErrorStr1">
Return a possibly helpful diagnostic location or string.
</member>
        <member name="M:tinyxml2.XMLDocument.ErrorID">
Return the errorID.
</member>
        <member name="M:tinyxml2.XMLDocument.Error">
Return true if there was an error parsing the document.
</member>
        <member name="M:tinyxml2.XMLDocument.DeleteNode(tinyxml2.XMLNode*)">
Delete a node associated with this document.
It will be unlinked from the DOM.

</member>
        <member name="M:tinyxml2.XMLDocument.NewUnknown(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create a new Unknown associated with
this Document. The memory for the object
is managed by the Document.

</member>
        <member name="M:tinyxml2.XMLDocument.NewText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create a new Text associated with
this Document. The memory for the Text
is managed by the Document.

</member>
        <member name="M:tinyxml2.XMLDocument.NewComment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create a new Comment associated with
this Document. The memory for the Comment
is managed by the Document.

</member>
        <member name="M:tinyxml2.XMLDocument.NewElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create a new Element associated with
this Document. The memory for the Element
is managed by the Document.

</member>
        <member name="M:tinyxml2.XMLDocument.RootElement">
Return the root element of DOM. Equivalent to FirstChildElement().
        To get the first node, use FirstChild().

</member>
        <member name="M:tinyxml2.XMLDocument.SetBOM(System.Boolean)">
Sets whether to write the BOM when writing the file.

</member>
        <member name="M:tinyxml2.XMLDocument.HasBOM">
Returns true if this document has a leading Byte Order Mark of UTF8.

</member>
        <member name="M:tinyxml2.XMLDocument.SaveFile(_iobuf*,System.Boolean)">
    	Save the XML file to disk. You are responsible
    	for providing and closing the FILE*.

    	Returns XML_NO_ERROR (0) on success, or
    	an errorID.

</member>
        <member name="M:tinyxml2.XMLDocument.SaveFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Save the XML file to disk.
Returns XML_NO_ERROR (0) on success, or
an errorID.

</member>
        <member name="M:tinyxml2.XMLDocument.LoadFile(_iobuf*)">
    	Load an XML file from disk. You are responsible
    	for providing and closing the FILE*. 
     
        NOTE: The file should be opened as binary ("rb")
        not text in order for TinyXML-2 to correctly
        do newline normalization.

    	Returns XML_NO_ERROR (0) on success, or
    	an errorID.

</member>
        <member name="M:tinyxml2.XMLDocument.LoadFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Load an XML file from disk.
Returns XML_NO_ERROR (0) on success, or
an errorID.

</member>
        <member name="M:tinyxml2.XMLDocument.Parse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
    	Parse an XML file from a character string.
    	Returns XML_NO_ERROR (0) on success, or
    	an errorID.

    	You may optionally pass in the 'nBytes', which is
    	the number of bytes which will be parsed. If not
    	specified, TinyXML-2 will assume 'xml' points to a
    	null terminated string.

</member>
        <member name="M:tinyxml2.XMLDocument.#ctor(System.Boolean,tinyxml2.Whitespace)">
constructor
</member>
        <member name="T:tinyxml2.XMLDocument">
A Document binds together all the functionality.
	It can be saved, loaded, and printed to the screen.
	All Nodes are connected and allocated to a Document.
	If the Document is deleted, all its Nodes are also deleted.

</member>
        <member name="M:tinyxml2.XMLElement.QueryFloatText(System.Single*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2.XMLElement.QueryDoubleText(System.Double*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2.XMLElement.QueryBoolText(System.Boolean*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2.XMLElement.QueryUnsignedText(System.UInt32*)">
See QueryIntText()
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.Single)">
Convenience method for setting text inside and element. See SetText() for important limitations.
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.Double)">
Convenience method for setting text inside and element. See SetText() for important limitations.
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.Boolean)">
Convenience method for setting text inside and element. See SetText() for important limitations.
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.UInt32)">
Convenience method for setting text inside and element. See SetText() for important limitations.
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.Int32)">
Convenience method for setting text inside and element. See SetText() for important limitations.
</member>
        <member name="M:tinyxml2.XMLElement.SetText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Convenience function for easy access to the text inside an element. Although easy
    	and concise, SetText() is limited compared to creating an XMLText child
    	and mutating it directly.

    	If the first child of 'this' is a XMLText, SetText() sets its value to
		the given string, otherwise it will create a first child that is an XMLText.

    	This is a convenient method for setting the text of simple contained text:
    	@verbatim
    	<foo>This is text</foo>
    		fooElement-&gt;SetText( "Hullaballoo!" );
     	<foo>Hullaballoo!</foo>
		@endverbatim

    	Note that this function can be misleading. If the element foo was created from
    	this XML:
    	@verbatim
    		<foo><b>This is text</b></foo>
    	@endverbatim

    	then it will not change "This is text", but rather prefix it with a text element:
    	@verbatim
    		<foo>Hullaballoo!<b>This is text</b></foo>
    	@endverbatim
		
		For this XML:
    	@verbatim
    		<foo />
    	@endverbatim
    	SetText() will generate
    	@verbatim
    		<foo>Hullaballoo!</foo>
    	@endverbatim

</member>
        <member name="M:tinyxml2.XMLElement.GetText">
Convenience function for easy access to the text inside an element. Although easy
    	and concise, GetText() is limited compared to getting the XMLText child
    	and accessing it directly.

    	If the first child of 'this' is a XMLText, the GetText()
    	returns the character string of the Text node, else null is returned.

    	This is a convenient method for getting the text of simple contained text:
    	@verbatim
    	<foo>This is text</foo>
    		const char* str = fooElement-&gt;GetText();
    	@endverbatim

    	'str' will be a pointer to "This is text".

    	Note that this function can be misleading. If the element foo was created from
    	this XML:
    	@verbatim
    		<foo><b>This is text</b></foo>
    	@endverbatim

    	then the value of str would be null. The first child node isn't a text node, it is
    	another element. From this XML:
    	@verbatim
    		<foo>This is <b>text</b></foo>
    	@endverbatim
    	GetText() will return "This is ".

</member>
        <member name="M:tinyxml2.XMLElement.FindAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Query a specific attribute in the list.
</member>
        <member name="M:tinyxml2.XMLElement.FirstAttribute">
Return the first attribute in the list.
</member>
        <member name="M:tinyxml2.XMLElement.DeleteAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Delete an attribute.

</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Double)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Sets the named attribute to value.
</member>
        <member name="M:tinyxml2.XMLElement.QueryFloatAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.QueryDoubleAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Double*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.QueryBoolAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.QueryUnsignedAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*)">
See QueryIntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.FloatAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.DoubleAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.BoolAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.UnsignedAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
See IntAttribute()
</member>
        <member name="M:tinyxml2.XMLElement.IntAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given an attribute name, IntAttribute() returns the value
    	of the attribute interpreted as an integer. 0 will be
    	returned if there is an error. For a method with error
    	checking, see QueryIntAttribute()

</member>
        <member name="M:tinyxml2.XMLElement.Attribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given an attribute name, Attribute() returns the value
    	for the attribute of that name, or null if none
    	exists. For example:

    	@verbatim
    	const char* value = ele-&gt;Attribute( "foo" );
    	@endverbatim

    	The 'value' parameter is normally null. However, if specified,
    	the attribute will only be returned if the 'name' and 'value'
    	match. This allow you to write code:

    	@verbatim
    	if ( ele-&gt;Attribute( "foo", "bar" ) ) callFooIsBar();
    	@endverbatim

    	rather than:
    	@verbatim
    	if ( ele-&gt;Attribute( "foo" ) ) {
    		if ( strcmp( ele-&gt;Attribute( "foo" ), "bar" ) == 0 ) callFooIsBar();
    	}
    	@endverbatim

</member>
        <member name="M:tinyxml2.XMLElement.SetName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Set the name of the element.
</member>
        <member name="M:tinyxml2.XMLElement.Name">
Get the name of an element (which is the Value() of the node.)
</member>
        <member name="T:tinyxml2.XMLElement">
The element is a container class. It has a value, the element name,
	and can contain other elements, text, comments, and unknowns.
	Elements also contain an arbitrary number of attributes.

</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.Single)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.Double)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.Boolean)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.UInt32)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.Int32)">
Set the attribute to value.
</member>
        <member name="M:tinyxml2.XMLAttribute.SetAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set the attribute to a string value.
</member>
        <member name="M:tinyxml2.XMLAttribute.QueryFloatValue(System.Single*)">
See QueryIntValue
</member>
        <member name="M:tinyxml2.XMLAttribute.QueryDoubleValue(System.Double*)">
See QueryIntValue
</member>
        <member name="M:tinyxml2.XMLAttribute.QueryBoolValue(System.Boolean*)">
See QueryIntValue
</member>
        <member name="M:tinyxml2.XMLAttribute.QueryUnsignedValue(System.UInt32*)">
See QueryIntValue
</member>
        <member name="M:tinyxml2.XMLAttribute.QueryIntValue(System.Int32*)">
QueryIntValue interprets the attribute as an integer, and returns the value
    	in the provided parameter. The function will return XML_NO_ERROR on success,
    	and XML_WRONG_ATTRIBUTE_TYPE if the conversion is not successful.

</member>
        <member name="M:tinyxml2.XMLAttribute.FloatValue">
Query as a float. See IntValue()
</member>
        <member name="M:tinyxml2.XMLAttribute.DoubleValue">
Query as a double. See IntValue()
</member>
        <member name="M:tinyxml2.XMLAttribute.BoolValue">
Query as a boolean. See IntValue()
</member>
        <member name="M:tinyxml2.XMLAttribute.UnsignedValue">
Query as an unsigned integer. See IntValue()
</member>
        <member name="M:tinyxml2.XMLAttribute.IntValue">
IntValue interprets the attribute as an integer, and returns the value.
        If the value isn't an integer, 0 will be returned. There is no error checking;
    	use QueryIntValue() if you need error checking.

</member>
        <member name="M:tinyxml2.XMLAttribute.Next">
The next attribute in the list.
</member>
        <member name="M:tinyxml2.XMLAttribute.Value">
The value of the attribute.
</member>
        <member name="M:tinyxml2.XMLAttribute.Name">
The name of the attribute.
</member>
        <member name="T:tinyxml2.XMLAttribute">
An attribute is a name-value pair. Elements have an arbitrary
	number of attributes, each with a unique name.

	@note The attributes are not XMLNodes. You may only query the
	Next() attribute in a list.

</member>
        <member name="T:tinyxml2.XMLUnknown">
Any tag that TinyXML-2 doesn't recognize is saved as an
	unknown. It is a tag of text, but should not be modified.
	It will be written back to the XML, unchanged, when the file
	is saved.

	DTD tags get thrown into XMLUnknowns.

</member>
        <member name="T:tinyxml2.XMLComment">
An XML Comment. 
</member>
        <member name="M:tinyxml2.XMLText.CData">
Returns true if this is a CDATA text element.
</member>
        <member name="M:tinyxml2.XMLText.SetCData(System.Boolean)">
Declare whether this should be CDATA or standard text.
</member>
        <member name="T:tinyxml2.XMLText">
XML text.

	Note that a text node can have child element nodes, for example:
	@verbatim
	<root>This is <b>bold</b></root>
	@endverbatim

	A text node can have 2 ways to output the next. "normal" output
	and CDATA. It will default to the mode it was parsed from the XML file and
	you generally want to leave it alone, but you can change the output mode with
	SetCData() and query it with CData().

</member>
        <member name="M:tinyxml2.XMLNode.ShallowEqual(tinyxml2.XMLNode!System.Runtime.CompilerServices.IsConst*)">
    	Test if 2 nodes are the same, but don't test children.
    	The 2 nodes do not need to be in the same Document.

    	Note: if called on a XMLDocument, this will return false.

</member>
        <member name="M:tinyxml2.XMLNode.ShallowClone(tinyxml2.XMLDocument*)">
    	Make a copy of this node, but not its children.
    	You may pass in a Document pointer that will be
    	the owner of the new Node. If the 'document' is
    	null, then the node returned will be allocated
    	from the current Document. (this-&gt;GetDocument())

    	Note: if called on a XMLDocument, this will return null.

</member>
        <member name="M:tinyxml2.XMLNode.DeleteChild(tinyxml2.XMLNode*)">
Delete a child of this node.

</member>
        <member name="M:tinyxml2.XMLNode.DeleteChildren">
Delete all the children of this node.

</member>
        <member name="M:tinyxml2.XMLNode.InsertAfterChild(tinyxml2.XMLNode*,tinyxml2.XMLNode*)">
    	Add a node after the specified child node.
		If the child node is already part of the document,
		it is moved from its old location to the new location.
		Returns the addThis argument or 0 if the afterThis node
		is not a child of this node, or if the node does not
		belong to the same document.

</member>
        <member name="M:tinyxml2.XMLNode.InsertFirstChild(tinyxml2.XMLNode*)">
    	Add a child node as the first (left) child.
		If the child node is already part of the document,
		it is moved from its old location to the new location.
		Returns the addThis argument or 0 if the node does not
		belong to the same document.

</member>
        <member name="M:tinyxml2.XMLNode.InsertEndChild(tinyxml2.XMLNode*)">
    	Add a child node as the last (right) child.
		If the child node is already part of the document,
		it is moved from its old location to the new location.
		Returns the addThis argument or 0 if the node does not
		belong to the same document.

</member>
        <member name="M:tinyxml2.XMLNode.NextSiblingElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the next (right) sibling element of this node, with an optionally supplied name.
</member>
        <member name="M:tinyxml2.XMLNode.NextSibling">
Get the next (right) sibling node of this node.
</member>
        <member name="M:tinyxml2.XMLNode.PreviousSiblingElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the previous (left) sibling element of this node, with an optionally supplied name.
</member>
        <member name="M:tinyxml2.XMLNode.PreviousSibling">
Get the previous (left) sibling node of this node.
</member>
        <member name="M:tinyxml2.XMLNode.LastChildElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the last child element or optionally the last child
        element with the specified name.

</member>
        <member name="M:tinyxml2.XMLNode.LastChild">
Get the last child node, or null if none exists.
</member>
        <member name="M:tinyxml2.XMLNode.FirstChildElement(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the first child element, or optionally the first child
        element with the specified name.

</member>
        <member name="M:tinyxml2.XMLNode.FirstChild">
Get the first child node, or null if none exists.
</member>
        <member name="M:tinyxml2.XMLNode.NoChildren">
Returns true if this node has no children.
</member>
        <member name="M:tinyxml2.XMLNode.Parent">
Get the parent of this node on the DOM.
</member>
        <member name="M:tinyxml2.XMLNode.SetValue(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Set the Value of an XML node.
    	@sa Value()

</member>
        <member name="M:tinyxml2.XMLNode.Value">
The meaning of 'value' changes for the specific type.
    	@verbatim
    	Document:	empty (NULL is returned, not an empty string)
    	Element:	name of the element
    	Comment:	the comment text
    	Unknown:	the tag contents
    	Text:		the text string
    	@endverbatim

</member>
        <member name="M:tinyxml2.XMLNode.ToUnknown">
Safely cast to an Unknown, or null.
</member>
        <member name="M:tinyxml2.XMLNode.ToDeclaration">
Safely cast to a Declaration, or null.
</member>
        <member name="M:tinyxml2.XMLNode.ToDocument">
Safely cast to a Document, or null.
</member>
        <member name="M:tinyxml2.XMLNode.ToComment">
Safely cast to a Comment, or null.
</member>
        <member name="M:tinyxml2.XMLNode.ToText">
Safely cast to Text, or null.
</member>
        <member name="M:tinyxml2.XMLNode.ToElement">
Safely cast to an Element, or null.
</member>
        <member name="M:tinyxml2.XMLNode.GetDocument">
Get the XMLDocument that owns this XMLNode.

Get the XMLDocument that owns this XMLNode.
</member>
        <member name="T:tinyxml2.XMLNode">
XMLNode is a base class for every object that is in the
	XML Document Object Model (DOM), except XMLAttributes.
	Nodes have siblings, a parent, and children which can
	be navigated. A node is always in a XMLDocument.
	The type of a XMLNode can be queried, and it can
	be cast to its more defined type.

	A XMLDocument allocates memory for all its Nodes.
	When the XMLDocument gets deleted, all its Nodes
	will also be deleted.

	@verbatim
	A Document can contain:	Element	(container or leaf)
							Comment (leaf)
							Unknown (leaf)
							Declaration( leaf )

	An Element can contain:	Element (container or leaf)
							Text	(leaf)
							Attributes (not on tree)
							Comment (leaf)
							Unknown (leaf)

	@endverbatim

</member>
        <member name="M:tinyxml2.XMLVisitor.Visit(tinyxml2.XMLUnknown!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit an unknown node.
</member>
        <member name="M:tinyxml2.XMLVisitor.Visit(tinyxml2.XMLComment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a comment node.
</member>
        <member name="M:tinyxml2.XMLVisitor.Visit(tinyxml2.XMLText!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a text node.
</member>
        <member name="M:tinyxml2.XMLVisitor.Visit(tinyxml2.XMLDeclaration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a declaration.
</member>
        <member name="M:tinyxml2.XMLVisitor.VisitExit(tinyxml2.XMLElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit an element.
</member>
        <member name="M:tinyxml2.XMLVisitor.VisitEnter(tinyxml2.XMLElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tinyxml2.XMLAttribute!System.Runtime.CompilerServices.IsConst*)">
Visit an element.
</member>
        <member name="M:tinyxml2.XMLVisitor.VisitExit(tinyxml2.XMLDocument!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a document.
</member>
        <member name="M:tinyxml2.XMLVisitor.VisitEnter(tinyxml2.XMLDocument!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Visit a document.
</member>
        <member name="T:tinyxml2.XMLVisitor">
	Implements the interface to the "Visitor pattern" (see the Accept() method.)
	If you call the Accept() method, it requires being passed a XMLVisitor
	class to handle callbacks. For nodes that contain other nodes (Document, Element)
	you will get called with a VisitEnter/VisitExit pair. Nodes that are always leafs
	are simply called with Visit().

	If you return 'true' from a Visit method, recursive parsing will continue. If you return
	false, <b>no children of this node or its siblings</b> will be visited.

	All flavors of Visit methods have a default implementation that returns 'true' (continue
	visiting). You need to only override methods that are interesting to you.

	Generally Accept() is called on the XMLDocument, although all nodes support visiting.

	You should never change the document from a callback.

	@sa XMLNode::Accept()

</member>
        <member name="M:GeoStar.Kernel.FileGeoDatabaseFactory.Open(GeoStar.Kernel.ConnectProperty)">
            <summary>
所有文件类型类工厂
</summary>
        </member>
        <member name="M:GeoStar.Kernel.GeoPackageGeoDatabaseFactory.Open(GeoStar.Kernel.ConnectProperty)">
            <summary>
GeoPackage文件类工厂
</summary>
        </member>
        <member name="M:GeoStar.Kernel.SqliteGeoDatabaseFactory.Open(GeoStar.Kernel.ConnectProperty)">
            <summary>
Sqlite文件类工厂
</summary>
        </member>
        <member name="M:GeoStar.Kernel.ShpGeoDatabaseFactory.Open(GeoStar.Kernel.ConnectProperty)">
            <summary>
Shp文件类工厂
</summary>
        </member>
        <member name="M:GeoStar.Kernel.SelectionSet.get_Count">
            <summary>
选择集OID数量
</summary>
        </member>
        <member name="M:GeoStar.Kernel.Feature.GetValue(System.String)">
\brief BOOL类型
\brief 32位的整型
\brief 32位的无符号整型
\brief 64位的整型
\brief 64位的无符号整型
\brief 字符串类型
\brief 二进制类型
\brief 浮点型
\brief 双精度浮点型
\brief 几何类型
\brief 日期类型
</member>
        <member name="M:GeoStar.Kernel.DataRoom.get_Database">
            <summary>
获取数据集所在的数据库对象
</summary>
        </member>
        <member name="M:GeoStar.Kernel.DataRoom.get_Type">
            <summary>
数据集的类型
</summary>
        </member>
        <member name="M:GeoStar.Kernel.DataRoom.get_Name">
            <summary>
数据集的名称
</summary>
        </member>
        <member name="M:GeoStar.Control.GeoSpace2D.InitializeComponent">
            <summary>
设计器支持所需的方法 - 不要
使用代码编辑器修改此方法的内容。
</summary>
        </member>
        <member name="F:GeoStar.Control.GeoSpace2D.components">
            <summary>
必需的设计器变量。
</summary>
        </member>
        <member name="M:GeoStar.Control.GeoSpace2D.Dispose">
            <summary>
清理所有正在使用的资源。
</summary>
            <summary>
清理所有正在使用的资源。
</summary>
        </member>
        <member name="T:GeoStar.Control.HighlightBox">
            <summary>
高亮Box
</summary>
            <summary>
查询Box
</summary>
        </member>
        <member name="T:GeoStar.Control.ScreenDrawBox">
            <summary>
屏幕绘制Box
</summary>
            <summary>
屏幕Box
</summary>
        </member>
        <member name="T:GeoStar.Control.QueryBox">
            <summary>
查询Box
</summary>
            <summary>
查询Box
</summary>
        </member>
        <member name="T:GeoStar.Control.GeoSpace2D">
            <summary>
GeoSpace 摘要
</summary>
        </member>
        <member name="M:GeoStar.Kernel.GsDrawableLayer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.GsDrawableLayer.Extent(GeoStar.Kernel.GsSpatialReference*)">
\brief 图层的最大范围,以图层的空间参考显示
</member>
        <member name="M:GeoStar.Kernel.GsDrawableLayer.InnerDraw(GeoStar.Kernel.GsDisplay*,GeoStar.Kernel.GsTrackCancel*,GeoStar.Kernel.GsDrawPhase)">
\brief 内部绘制入口
\details 子类通过覆盖此函数实现绘制。
</member>
        <member name="M:GeoStar.Kernel.Layer.get_Extent">
\brief 范围
</member>
        <member name="M:GeoStar.Kernel.Layer.get_HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="M:GeoStar.Kernel.FeatureLayerST.OnBegin(GeoStar.Kernel.GsFeature*,GeoStar.Kernel.GsFeatureCursor*,GeoStar.Kernel.GsDisplay*)">
\brief 事件,当开始绘制的时候发生
</member>
        <member name="T:GeoStar.Kernel.DrawableLayer">
\brief 可绘制图层
</member>
        <member name="P:GeoStar.Kernel.Layer.Extent">
\brief 范围
</member>
        <member name="P:GeoStar.Kernel.Layer.HasSelection">
\brief 图层是否存在选择集
</member>
        <member name="F:GeoStar.Kernel.DrawPhase.eDrawSelectionSet">
\brief 绘制选择集
</member>
        <member name="F:GeoStar.Kernel.DrawPhase.eDrawNormal">
\brief 通用绘制
</member>
        <member name="M:GeoStar.Kernel.RasterClass.CreatePyramid(System.Int32,GeoStar.Kernel.RasterResampleAlg,GeoStar.Kernel.GeoDatabase.Progress)">
            <summary>
创建缩略图、金字塔
</summary>
            <summary>
创建缩略图、金字塔
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.DeletePyramid">
            <summary>
删除缩略图、金字塔
</summary>
            <summary>
删除缩略图、金字塔
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.ExistsPyramid">
            <summary>
是否存在金字塔
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.Search(System.Drawing.Rectangle)">
            <summary>
搜索一块像素范围内的数据。
</summary>
            <summary>
搜索一块像素范围内的数据。
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.Search(GeoStar.Kernel.Box,System.Drawing.Size,GeoStar.Kernel.RasterResampleAlg)">
            <summary>
根据地理范围搜索一块数据，重采样要到目标大小
</summary>
            <summary>
根据地理范围搜索一块数据，重采样要到目标大小
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.MetadataItem(System.String,System.String)">
            <summary>
根据元数据类别和名称获得元数据的值
</summary>
            <summary>
根据元数据类别和名称获得元数据的值
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.MetadataNames(System.String)">
            <summary>
根据元数据类别获得该类别下的元数据名称
</summary>
            <summary>
根据元数据类别获得该类别下的元数据名称
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.MetadataDomain">
            <summary>
元数据类别
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.Band(System.Int32)">
            <summary>
根据索引获取波段
</summary>
            <summary>
根据索引获取波段
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.BandCount">
            <summary>
波段数量
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.Format">
            <summary>
编码格式
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.BlockHeight">
            <summary>
数据块像素高
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.BlockWidth">
            <summary>
数据块像素宽
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.Height">
            <summary>
栅格的像素高
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterClass.Width">
            <summary>
栅格的像素宽
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.PixelToGeo(System.Drawing.Rectangle)">
            <summary>
像素范围计算地理范围
</summary>
            <summary>
像素范围计算地理范围
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterClass.GeoToPixel(GeoStar.Kernel.Box)">
            <summary>
地理坐标范围到像素范围
</summary>
            <summary>
地理坐标范围到像素范围
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RasterCursor.Next(GeoStar.Kernel.Raster)">
\brief 获取下一块删个数据

\brief 获取下一块删个数据
</member>
        <member name="M:GeoStar.Kernel.RasterCursor.Next">
\brief 获取下一块删个数据

\brief 获取下一块删个数据
</member>
        <member name="M:GeoStar.Kernel.RasterCursor.Reset">
\brief 重置游标位置

\brief 重置游标位置
</member>
        <member name="P:GeoStar.Kernel.RasterCursor.Y">
\brief 游标数据开始数据Y偏移
</member>
        <member name="P:GeoStar.Kernel.RasterCursor.X">
\brief 游标数据开始数据X偏移
</member>
        <member name="P:GeoStar.Kernel.RasterCursor.Height">
\brief 游标的数据高度
</member>
        <member name="P:GeoStar.Kernel.RasterCursor.Width">
\brief 游标的数据宽度
</member>
        <member name="T:GeoStar.Kernel.RasterClass">
\brief 游标所属于的栅格类
<summary>
栅格类
</summary>
\brief 游标所属于的栅格类
</member>
        <member name="T:GeoStar.Kernel.RasterCursor">
            <summary>
栅格游标
</summary>
        </member>
        <member name="M:GeoStar.Kernel.RGBATranslateRGBA.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
构造函数
</summary>
            <param name="red">红色波段索引</param>
            <param name="green">绿色波段索引</param>
            <param name="blue">蓝色波段索引</param>
            <param name="alpha">透明波段索引，不存在则为0</param>
            <param name="nPixelBitSize">像素字节大小</param>
        </member>
        <member name="T:GeoStar.Kernel.RGBATranslateRGBA">
            <summary>
RGBA到RGBA，包含RGB或者RGBA任意顺序波段的颜色转换为RGBA颜色
</summary>
        </member>
        <member name="T:GeoStar.Kernel.IndexTranslateRGBA">
            <summary>
调色板索引转换为RGBA
</summary>
        </member>
        <member name="T:GeoStar.Kernel.GrayTranslateRGBA">
            <summary>
灰度转换为RGBA
</summary>
        </member>
        <member name="M:GeoStar.Kernel.Raster.TranslateToRGBA(System.IntPtr,System.Int32,System.Int32,System.Int32,GeoStar.Kernel.TranslateRGBA)">
            <summary>
根据转换对象RGBA格式的图像
</summary>
            <param name="ptrScan0">目标位图中第一个像素的地址或者第一个扫描行地址</param>
            <param name="Stride">扫描宽度</param>
            <param name="w">目标位图的宽度</param>
            <param name="h">目标位图的高度</param>
            <param name="pTrans">转换方法</param>
            <summary>
根据转换对象RGBA格式的图像
</summary>
            <param name="ptrScan0">目标位图中第一个像素的地址或者第一个扫描行地址</param>
            <param name="Stride">扫描宽度</param>
            <param name="w">目标位图的宽度</param>
            <param name="h">目标位图的高度</param>
            <param name="pTrans">转换方法</param>
        </member>
        <member name="M:GeoStar.Kernel.Raster.TranslateToRGBA(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
自动转换为RGBA格式的图像
</summary>
            <param name="ptrScan0">目标位图中第一个像素的地址或者第一个扫描行地址</param>
            <param name="Stride">扫描宽度</param>
            <param name="w">目标位图的宽度</param>
            <param name="h">目标位图的高度</param>
            <summary>
拷贝为ARGB格式的图像
</summary>
            <param name="ptrScan0">目标位图中第一个像素的地址或者第一个扫描行地址</param>
            <param name="Stride">扫描宽度</param>
            <param name="w">目标位图的宽度</param>
            <param name="h">目标位图的高度</param>
        </member>
        <member name="M:GeoStar.Kernel.Raster.CopyTo(System.Byte[],System.Int32)">
\brief 将栅格数据copy到指定的数组中去。

\brief 将栅格数据copy到指定的数组中去。
</member>
        <member name="P:GeoStar.Kernel.Raster.RasterData">
\brief 获取栅格数据
</member>
        <member name="M:GeoStar.Kernel.Raster.SetRasterData(System.Byte[])">
\brief 设置栅格数据

\brief 设置栅格数据
</member>
        <member name="P:GeoStar.Kernel.Raster.OffsetY">
\brief 获取栅格数据Y偏移
</member>
        <member name="P:GeoStar.Kernel.Raster.OffsetX">
\brief 获取栅格数据X偏移
</member>
        <member name="P:GeoStar.Kernel.Raster.Height">
\brief 获取设置栅格数据高度
</member>
        <member name="P:GeoStar.Kernel.Raster.Width">
\brief 获取设置栅格数据宽度
</member>
        <member name="P:GeoStar.Kernel.Raster.DataLength">
\brief 根据栅格类属性计算的栅格数据长度
</member>
        <member name="P:GeoStar.Kernel.Raster.DataPtr">
\brief 获取栅格数据指针
</member>
        <member name="T:GeoStar.Kernel.Raster">
            <summary>
一块栅格对象
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterBand.NoDataValue">
\brief 无效值
</member>
        <member name="P:GeoStar.Kernel.RasterBand.Maximum">
\brief 最大值
</member>
        <member name="P:GeoStar.Kernel.RasterBand.Minimum">
\brief 最小值
</member>
        <member name="P:GeoStar.Kernel.RasterBand.BandType">
            <summary>
栅格波段的用途或类型
</summary>
        </member>
        <member name="P:GeoStar.Kernel.RasterBand.BandDataType">
            <summary>
栅格波段的数据类型。
</summary>
        </member>
        <member name="T:GeoStar.Kernel.RasterBand">
            <summary>
栅格波段
</summary>
        </member>
        <member name="T:GeoStar.Kernel.TranslateRGBA">
            <summary>
RGBA颜色转换器，将其他的颜色转换为RGBA颜色。
</summary>
        </member>
        <member name="T:GeoStar.Kernel.RasterBandType">
\brief 波段类型
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eYCbCr_CrBandType">
\brief YCbCr Cr红色偏移量波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eYCbCr_CbBandType">
\brief YCbCr Cb蓝色偏移量波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eYCbCr_YBandType">
\brief YCbCr Y亮度波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eBlackBandType">
\brief CMLY Magenta波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eYellowBandType">
\brief CMYK Yellow波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eMagentaBandType">
\brief CMYK Magenta波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eCyanBandType">
\brief CMYK Cyan波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eLightnessBandType">
\brief HLS Lightness波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eSaturationBandType">
\brief HLS Saturation波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eHueBandType">
\brief HLS Hue波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eAlphaBandType">
\brief RGBA 透明波段，0标示透明，255标示不透明
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eBlueBandType">
\brief RGBA 蓝色波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eGreenBandType">
\brief RGBA 绿色波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eRedBandType">
\brief RGBA 红色波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.ePaletteIndexBandType">
\brief Paletted 调色板索引波段
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eGrayIndexBandType">
\brief Greyscale灰度索引
</member>
        <member name="F:GeoStar.Kernel.RasterBandType.eUndefinedBandType">
\brief 未定义波段
</member>
        <member name="M:GeoStar.Control.ScreenDrawBox.TrackEnvelope(GeoStar.Control.ScreenDrawBox.EnvelopeTracked)">
            <summary>
屏幕绘制矩形。
</summary>
            <summary>
屏幕绘制矩形。
</summary>
        </member>
        <member name="T:GeoStar.Control.ScreenDrawBox.EnvelopeTracked">
            <summary>
屏幕上矩形被绘制完成后的委托
</summary>
        </member>
        <member name="M:GeoStar.Kernel.GeoDatabase.OpenDataRoom(GeoStar.Kernel.DataRoomType,System.String)">
            <summary>
打开一种类型的数据集
</summary>
            <summary>
打开一种类型的数据集
</summary>
        </member>
        <member name="M:GeoStar.Kernel.GeoDatabase.EnumDataRoomName(GeoStar.Kernel.DataRoomType)">
            <summary>
枚举数据集的名称
</summary>
            <summary>
枚举数据集的名称
</summary>
        </member>
        <member name="P:GeoStar.Kernel.GeoDatabase.ConnectPropertyInformation">
            <summary>
数据库连接信息
</summary>
        </member>
        <member name="T:GeoStar.Kernel.GeoDatabase.Progress">
            <summary>
进度委托
</summary>
        </member>
        <member name="T:GeoStar.Kernel.GeoDatabase">
            <summary>
地理数据库
</summary>
        </member>
        <member name="T:GeoStar.Kernel.RowClass">
            <summary>
二维表
</summary>
        </member>
        <member name="T:GeoStar.Kernel.TileClass">
            <summary>
瓦片类
</summary>
        </member>
        <member name="M:GeoStar.Kernel.FeatureClass.Select(GeoStar.Kernel.Box)">
            <summary>
根据矩形精确选择
</summary>
            <summary>
根据矩形精确选择
</summary>
        </member>
        <member name="T:GeoStar.Kernel.FeatureClass">
            <summary>
矢量地物类
</summary>
        </member>
        <member name="P:GeoStar.Kernel.SelectionSet.Count">
            <summary>
选择集OID数量
</summary>
        </member>
        <member name="M:GeoStar.Kernel.SelectionSet.Next">
            <summary>
枚举下一个OID，返回小于等于0则为结束
</summary>
            <summary>
枚举下一个OID，返回小于等于0则为结束
</summary>
        </member>
        <member name="M:GeoStar.Kernel.SelectionSet.Reset">
            <summary>
重置OID枚举
</summary>
            <summary>
重置OID枚举
</summary>
        </member>
        <member name="M:GeoStar.Kernel.SelectionSet.Search">
            <summary>
从选择集生成游标
</summary>
            <summary>
从选择集生成游标
</summary>
        </member>
        <member name="M:GeoStar.Kernel.FeatureCursor.Next(GeoStar.Kernel.Feature)">
            <summary>
获取下一个地物
</summary>
            <summary>
获取下一个地物
</summary>
        </member>
        <member name="M:GeoStar.Kernel.FeatureCursor.Next">
            <summary>
获取下一个地物
</summary>
            <summary>
获取下一个地物
</summary>
        </member>
        <member name="M:GeoStar.Kernel.GeoDataRoom.Extent(System.Boolean)">
            <summary>
地理数据集的最大范围
</summary>
            <summary>
地理数据集的最大范围
</summary>
        </member>
        <member name="T:GeoStar.Kernel.GeoDataRoom">
            <summary>
地理数据集基类
</summary>
        </member>
        <member name="M:GeoStar.Kernel.DataRoom.Delete">
            <summary>
删除数据集对象
</summary>
            <summary>
删除数据集对象
</summary>
        </member>
        <member name="T:GeoStar.Kernel.DataRoomFolder">
            <summary>
数据集所在的父数据集目录
</summary>
            <summary>
数据集目录
</summary>
            <summary>
数据集所在的父数据集目录
</summary>
        </member>
        <member name="P:GeoStar.Kernel.DataRoom.Database">
            <summary>
获取数据集所在的数据库对象
</summary>
        </member>
        <member name="P:GeoStar.Kernel.DataRoom.Type">
            <summary>
数据集的类型
</summary>
        </member>
        <member name="P:GeoStar.Kernel.DataRoom.Name">
            <summary>
数据集的名称
</summary>
        </member>
        <member name="T:GeoStar.Kernel.DataRoom">
            <summary>
数据集
</summary>
        </member>
        <member name="T:GeoStar.Kernel.DataRoomType">
            <summary>
数据库连接信息
</summary>
        </member>
        <member name="F:GeoStar.Kernel.DataRoomType.eRasterClassType">
\brief 栅格类
</member>
        <member name="F:GeoStar.Kernel.DataRoomType.eDataRoomFolderType">
\brief 数据集的集合
</member>
        <member name="F:GeoStar.Kernel.DataRoomType.eRowClassType">
\brief 二维表
</member>
        <member name="F:GeoStar.Kernel.DataRoomType.eTileClassType">
\brief 瓦片类
</member>
        <member name="F:GeoStar.Kernel.DataRoomType.eFeatureClassType">
\brief 矢量地物类
</member>
        <member name="T:GeoStar.Kernel.ConnectProperty">
            <summary>
数据库连接信息
</summary>
        </member>
        <member name="M:GeoStar.Utility.Config.set_Value(System.String)">
\brief 配置的值
</member>
        <member name="M:GeoStar.Utility.Config.get_Value">
\brief 配置的值
</member>
        <member name="M:GeoStar.Utility.Config.get_ChildrenName">
\brief 是否存在子的配置
</member>
        <member name="M:GeoStar.Utility.Config.get_Children">
\brief 是否存在子的配置
</member>
        <member name="M:GeoStar.Utility.Config.get_HasChildren">
\brief 是否存在子的配置
</member>
        <member name="M:GeoStar.Utility.Config.get_Path">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.set_Type(System.Type)">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.get_Type">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.set_TypeString(System.String)">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.get_TypeString">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.set_Description(System.String)">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.get_Description">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.set_Name(System.String)">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.get_Name">
\brief 获取设置配置的名称
</member>
        <member name="M:GeoStar.Utility.Config.get_Parent">
\brief 获取父亲配置对象
</member>
        <member name="M:GeoStar.Utility.Config.get_IsRoot">
\brief 获取根配置对象
</member>
        <member name="M:GeoStar.Utility.Config.get_Root">
\brief 获取根配置对象
</member>
        <member name="M:GeoStar.Utility.Config.get_IsNull">
\brief 判断配置是否发生了变化
</member>
        <member name="M:GeoStar.Utility.Config.get_IsDirty">
\brief 判断配置是否发生了变化
</member>
        <member name="M:GeoStar.Utility.Config.get_FileName">
\brief 获取配置文件的文件名
\brief GsConfig其他配置项	
</member>
        <member name="M:GeoStar.Utility.Config.Remove(System.String)">
\brief 删除一个子配置

\brief 删除一个子配置
</member>
        <member name="M:GeoStar.Utility.Config.Clear">
\brief 清空所有的子配置

\brief 清空所有的子配置
</member>
        <member name="M:GeoStar.Utility.Config.Append(GeoStar.Utility.Config)">
\brief 将另外的分支添加到这个GsConfig中

\brief 将另外的分支添加到这个GsConfig中
</member>
        <member name="M:GeoStar.Utility.Config.SetValue(System.String)">
\brief 设置值

\brief 设置值
</member>
        <member name="M:GeoStar.Utility.Config.Int64Value(System.Int64)">
\brief 整数值

\brief 整数值
</member>
        <member name="M:GeoStar.Utility.Config.BooleanValue(System.Boolean)">
\brief 布尔值

\brief 布尔值
</member>
        <member name="M:GeoStar.Utility.Config.DoubleValue(System.Double)">
\brief 双精度浮点值

\brief 双精度浮点值
</member>
        <member name="M:GeoStar.Utility.Config.IntValue(System.Int32)">
\brief 整数值

\brief 整数值
</member>
        <member name="M:GeoStar.Utility.Config.StringValue(System.String)">
\brief 字符串值

\brief 字符串值
</member>
        <member name="P:GeoStar.Utility.Config.IsNumberValue">
\brief 判断是否为特定值类型
</member>
        <member name="P:GeoStar.Utility.Config.Value">
\brief 配置的值
</member>
        <member name="P:GeoStar.Utility.Config.Item(System.String)">
\brief 方括号操作符，设计调用Peek方法。
</member>
        <member name="M:GeoStar.Utility.Config.Peek(System.String)">
\brief 选择一个子的配置，如果不存在的话并不会创建

\brief 选择一个子的配置，如果不存在的话并不会创建
</member>
        <member name="P:GeoStar.Utility.Config.ChildrenName">
\brief 所有的子配置名称
</member>
        <member name="P:GeoStar.Utility.Config.Children">
\brief 所有的子配置
</member>
        <member name="M:GeoStar.Utility.Config.Equals(System.Object)">
\brief 是否相等

\brief 是否相等
</member>
        <member name="P:GeoStar.Utility.Config.HasChildren">
\brief 是否存在子的配置
</member>
        <member name="M:GeoStar.Utility.Config.Exist(System.String)">
\brief 是否存在某个子的配置

\brief 是否存在某个子的配置
</member>
        <member name="M:GeoStar.Utility.Config.Child(System.String)">
\brief 选择一个子的配置，如果不存在的话会创建这个子的配置并返回。

\brief 选择一个子的配置，如果不存在的话会创建这个子的配置并返回。
</member>
        <member name="P:GeoStar.Utility.Config.Path">
\brief 获取配置的路径
</member>
        <member name="P:GeoStar.Utility.Config.Type">
\brief 类型
</member>
        <member name="P:GeoStar.Utility.Config.TypeString">
\brief 类型字符串
</member>
        <member name="P:GeoStar.Utility.Config.Description">
\brief 描述
</member>
        <member name="P:GeoStar.Utility.Config.Name">
\brief 获取设置配置的名称
</member>
        <member name="P:GeoStar.Utility.Config.Parent">
\brief 获取父亲配置对象
</member>
        <member name="P:GeoStar.Utility.Config.IsRoot">
\brief 是否为根配置
</member>
        <member name="P:GeoStar.Utility.Config.IsNull">
\brief 是否为空
</member>
        <member name="P:GeoStar.Utility.Config.Root">
\brief 获取根配置对象
</member>
        <member name="P:GeoStar.Utility.Config.IsDirty">
\brief 判断配置是否发生了变化
</member>
        <member name="M:GeoStar.Utility.Config.Save">
\brief 保存为XML字符串

\brief 保存为XML字符串
</member>
        <member name="M:GeoStar.Utility.Config.Save(System.String)">
\brief 保存到文件中

\brief 保存到文件中
</member>
        <member name="P:GeoStar.Utility.Config.FileName">
\brief 获取配置文件的文件名
\brief GsConfig其他配置项	
</member>
        <member name="F:GeoStar.Utility.Config.m_pEle">
\brief 配置的xml节点。
</member>
        <member name="P:GeoStar.Kernel.SpatialReference.Projection">
            <summary>
投影名称
</summary>
        </member>
        <member name="P:GeoStar.Kernel.SpatialReference.Ellipsoid">
            <summary>
椭球名称
</summary>
        </member>
        <member name="P:GeoStar.Kernel.SpatialReference.WKT">
            <summary>
空间参考的WKT串
</summary>
        </member>
        <member name="P:GeoStar.Kernel.SpatialReference.Name">
            <summary>
空间参考名称
</summary>
        </member>
        <member name="T:GeoStar.Kernel.SpatialReference">
空间参考。
<summary>
获得空间参考
</summary><summary>
获得空间参考
</summary></member>
        <member name="T:GeoStar.Kernel.Geometry">
            <summary>
几何对象基类
</summary>
        </member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeRing">
\brief 单圈
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeCircleArc">
\brief 三点圆弧
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeLine">
\brief 两点线段
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeEnvelope">
\brief 矩形
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeAnnotation">
\brief 注记
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypePolyline">
\brief 多段折线
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeMultiPoint">
\brief 复合点、多点
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeCollection">
\brief 集合
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypePolygon">
\brief 多边形
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypePath">
\brief 单段线
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypePoint">
\brief 单点
</member>
        <member name="F:GeoStar.Kernel.GeometryType.eGeometryTypeUnknown">
\brief 未知或无效几何类型
</member>
        <!-- 丢弃成员“M:tinyxml2.XMLNode.Accept(tinyxml2.XMLVisitor*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:tinyxml2.XMLDeclaration”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:tinyxml2.XMLElement.QueryIntAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:tinyxml2.XMLElement.QueryAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:tinyxml2.XMLElement.QueryIntText(System.Int32*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:tinyxml2.XMLDocument.Print(tinyxml2.XMLPrinter*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:tinyxml2.XMLDocument.NewDeclaration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:tinyxml2.XMLHandle”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:tinyxml2.XMLPrinter”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.Features.all”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.Value”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.Value.isValidIndex(System.UInt32)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.Value.removeMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,Json.Value*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.Value.isMember(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.Reader.parse(std.basic_istream<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.CharReaderBuilder”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:Json.op_RightShift(std.basic_istream<System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Json.Value*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.StreamWriter”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.StreamWriterBuilder”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:Json.StreamWriterBuilder.settings_”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.StyledWriter”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:Json.StyledStreamWriter”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“T:GeoStar.Utility.GsStringStream”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:GeoStar.Kernel.GsGeodesic.geodesic.f1”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:GeoStar.Kernel.GsGeodesicLine.geodesicline.b”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:GeoStar.Kernel.GsGeodesicLine.geodesicline.caps”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:GeoStar.Kernel.GsGeodesicPolygon.GeoDPolygon.lat0”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“F:GeoStar.Kernel.GsGeodesicPolygon.GeoDPolygon.num”的格式错误的 XML 文档注释。 -->
    </members>
</doc>