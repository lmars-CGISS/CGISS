vec4 FromAngleAxis(float rfAngle, vec3 rkAxis)
{
	float fHalfAngle = 0.5*rfAngle;
	float fSin = sin(fHalfAngle);
	float x = fSin*rkAxis.x;
	float y = fSin*rkAxis.y;
	float z = fSin*rkAxis.z;
	float w = cos(fHalfAngle);
	return vec4(x, y, z, w);
}

mat4 QuaToRotationMatrix(vec4 qua)
{
	mat4 m;
	float fTx  = 2.0 * qua.x;
	float fTy  = 2.0 * qua.y;
	float fTz  = 2.0 * qua.z;
	float fTwx = fTx * qua.w;
	float fTwy = fTy * qua.w;
	float fTwz = fTz * qua.w;
	float fTxx = fTx * qua.x;
	float fTxy = fTy * qua.x;
	float fTxz = fTz * qua.x;
	float fTyy = fTy * qua.y;
	float fTyz = fTz * qua.y;
	float fTzz = fTz * qua.z; 
 
	m[0][0] = 1.0 - (fTyy+fTzz);
	m[1][0] = fTxy - fTwz;
	m[2][0] = fTxz + fTwy;
	m[3][0] = 0.0;

	m[0][1] = fTxy + fTwz;
	m[1][1] = 1.0 - (fTxx+fTzz);
	m[2][1] = fTyz - fTwx;
	m[3][1] = 0.0;

	m[0][2] = fTxz - fTwy;
	m[1][2] = fTyz + fTwx;
	m[2][2] = 1.0 - (fTxx + fTyy);
	m[3][2] = 0.0;

	m[0][3] = 0.0;
	m[1][3] = 0.0;
	m[2][3] = 0.0;
	m[3][3] = 1.0;
	return m;
}