uniform vec4 texture0_size;

float unpackDepth(const in vec4 rgba_depth)
{
	const vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0));
	float depth=dot(rgba_depth, bitShifts);
	depth = depth * 2.0 - 1.0;
	return depth;
}

float getDepthFromShadowMap(in sampler2D viewShedTexture, in vec4 texCoord)
{
	// 获取纹理中存储的深度值(从邻近的四个像素中取最大的深度)
	vec2 tcoord;
    tcoord.x = (texCoord.x * texture0_size.x) - 0.5;
    tcoord.y = (texCoord.y * texture0_size.y) - 0.5;
    float x0 = floor(tcoord.x);
    float x1 = ceil(tcoord.x);
    float y0 = floor(tcoord.y);
    float y1 = ceil(tcoord.y);
    // sample coordinates in [0,1]^2 domain
	vec2 invTexSize = vec2(1.0/texture0_size.x, 1.0/texture0_size.y);
    vec2 t00, t01, t10, t11;
    t00 = vec2((x0+0.5) * invTexSize.x, (y0+0.5) * invTexSize.y);
    t10 = vec2((x1+0.5) * invTexSize.x, (y0+0.5) * invTexSize.y);
    t01 = vec2((x0+0.5) * invTexSize.x, (y1+0.5) * invTexSize.y);
    t11 = vec2((x1+0.5) * invTexSize.x, (y1+0.5) * invTexSize.y);
    // grab the samples
    vec4 z00 = texture2D(viewShedTexture, t00);
    vec4 z01 = texture2D(viewShedTexture, t01);
    vec4 z10 = texture2D(viewShedTexture, t10);
    vec4 z11 = texture2D(viewShedTexture, t11);
	 
	float depth = 1.0;
#if FLOAT_TEXTURE
	depth = max(max(z00.x, z01.x), max(z10.x, z11.x));
#else
	z00.x = unpackDepth(z00);
	z01.x = unpackDepth(z01);
	z10.x = unpackDepth(z10);
	z11.x = unpackDepth(z11);
	depth = max(max(z00.x, z01.x), max(z10.x, z11.x));
#endif
	return depth;
}